<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>leejs&#39;s blog</title>
    <link>https://dl137584.github.io/</link>
    
    <atom:link href="https://dl137584.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 15 Feb 2022 13:14:02 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[Android] Android 11 대응 - 패키지 공개 상태 - 1</title>
      <link>https://dl137584.github.io/2022/02/14/016-android11-package/</link>
      <guid>https://dl137584.github.io/2022/02/14/016-android11-package/</guid>
      <pubDate>Mon, 14 Feb 2022 12:45:40 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;변경사항-확인해보는-방법&quot;&gt;&lt;a href=&quot;#변경사항-확인해보는-방법&quot; class=&quot;headerlink&quot; title=&quot;변경사항 확인해보는 방법&quot;&gt;&lt;/a&gt;&lt;strong&gt;변경사항 확인해보는 방법&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="변경사항-확인해보는-방법"><a href="#변경사항-확인해보는-방법" class="headerlink" title="변경사항 확인해보는 방법"></a><strong>변경사항 확인해보는 방법</strong></h1><p><img src="/assets/images/016-01.png" alt="Android Developer"></p><h1 id="문제가-될만-한-호출-메소드"><a href="#문제가-될만-한-호출-메소드" class="headerlink" title="문제가 될만 한 호출 메소드"></a><strong>문제가 될만 한 호출 메소드</strong></h1><ul><li><p><code>packageManager.getInstalledApplications()</code> 또는 <code>packageManager.getInstalledPackages()</code> </p></li><li><p><code>packageManager.resolveActivity(intent, 0)</code> </p></li><li><p><code>packageManager.queryIntentActivities(intent, flags)</code> </p></li><li><p><code>packageManager.getPackageInfo(&quot;packageName&quot;, flags)</code> </p></li><li><p><code>packageManager.getLaunchIntentForPackage(packageName)</code></p></li></ul><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h1 id="방법-1-QUERY-ALL-PACKAGES"><a href="#방법-1-QUERY-ALL-PACKAGES" class="headerlink" title="방법 1. QUERY_ALL_PACKAGES"></a><strong>방법 1. QUERY_ALL_PACKAGES</strong></h1><p>QUERY_ALL_PACKAGES 권한을 추가하면 모든 앱을 찾거나 실행할 수 있다. 이 퍼미션은 어떤 앱이든 받을 수 있는 Install permission이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.QUERY_ALL_PACKAGES&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h1 id="방법-2-lt-queries-gt-태그"><a href="#방법-2-lt-queries-gt-태그" class="headerlink" title="방법 2. &lt;queries&gt; 태그"></a><strong>방법 2. &lt;queries&gt; 태그</strong></h1><h2 id="gradle-version-확인하기"><a href="#gradle-version-확인하기" class="headerlink" title="gradle version 확인하기"></a><strong>gradle version 확인하기</strong></h2><p>queries 태그를 사용하기 위한 준비작업이다.</p><p><img src="/assets/images/016-02.png" alt="Android developer"></p><p>좌측과 같은 버전을 사용하고 있다면 우측 이상에 해당하는 버전이 맞는지 확인해야 한다.</p><h2 id="queries-태그-사용"><a href="#queries-태그-사용" class="headerlink" title="queries 태그 사용"></a><strong>queries 태그 사용</strong></h2><p>이제 의존성을 가진 모든 앱의 패키지 정의를 queries 태그에 추가 적용한다.</p><ul><li><a href="https://developer.android.com/training/basics/intents/package-visibility-use-cases?hl=ko">사용 사례별로 패키지 공개상태 구성</a></li></ul><p>Android11에서는 기본적으로 자신의 앱이 아닌, 다른 패키지를 찾거나 다른 패키지의 액티비티를 실행할 수 없다. 따라서 자신의 앱 동작에 의존적인 패키지가 있다면 AndroidManifest에 <strong>&lt;queries&gt; 태그</strong>로 필요한 패키지를 정의해야 한다.</p><p>다시 말해, 자신의 앱에서 다른 앱을 찾거나(탐색), 다른 앱을 실행하는 동작이 필요할 경우 그 앱의 패키지를 미리 자신의 앱에 정의해두어야 한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- manifest 태그에 package 속성을 정의하는 것은 optional --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">package</span>=<span class="string">&quot;com.example.game&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">queries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.store&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.services&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.SEND&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">&quot;text/plain&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">queries</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/14/016-android11-package/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] ViewPager.addOnPageChangeListener</title>
      <link>https://dl137584.github.io/2022/02/11/015-viewpager-addonpagechangelistener/</link>
      <guid>https://dl137584.github.io/2022/02/11/015-viewpager-addonpagechangelistener/</guid>
      <pubDate>Fri, 11 Feb 2022 12:57:55 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://davinci505.tistory.com/entry/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-RecyclerView-%EC%8A%A4%ED%81%AC%EB%A1%A</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://davinci505.tistory.com/entry/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-RecyclerView-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EA%B0%90%EC%A7%80">onScrollStateChanged</a></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">loopViewPager.addOnPageChangeListener(<span class="keyword">object</span> : ViewPager.OnPageChangeListener &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPageSelected</span><span class="params">(position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    loopViewPager.currentItem = position</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPageScrolled</span><span class="params">(position: <span class="type">Int</span>, positionOffset: <span class="type">Float</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      positionOffsetPixels: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPageScrollStateChanged</span><span class="params">(state: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state == RecyclerView.SCROLL_STATE_DRAGGING) &#123;</span><br><span class="line">      <span class="comment">// 수동으로 스크롤 시에만 터치했을 때</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == RecyclerView.SCROLL_STATE_SETTLING)&#123;</span><br><span class="line">      <span class="comment">// 스크롤이 움직인 후 픽스되는 순간</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == RecyclerView.SCROLL_STATE_IDLE) &#123;</span><br><span class="line">      <span class="comment">// 아무것도 수행하지 않을 때</span></span><br><span class="line">      <span class="comment">// (즉, 스크롤이 움직이지 않고, 스크롤을 수동으로 잡고 있지 않음.)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="onPageSelected"><a href="#onPageSelected" class="headerlink" title="onPageSelected"></a>onPageSelected</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>페이지 인덱스가 변경되지 않는다면 이 메소드는 호출되지 않는다.  (수동으로 스크롤 하다가 뗐을 때 재현가능)</li><li>position: 스크롤 시 선택된 페이지의 인덱스</li></ul><h1 id="onPageScrolled"><a href="#onPageScrolled" class="headerlink" title="onPageScrolled"></a>onPageScrolled</h1><h2 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h2><ul><li>사용자의 터치 스크롤 &amp; smooth 스크롤 시에 호출된다.</li><li>position: <a href="https://kingorihouse.tumblr.com/post/87079690019/android-viewpageronpagechangelistener-%EC%9D%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A0%84%EB%8B%AC-%EC%88%9C%EC%84%9C">링크</a>에 따르면, “SETTLE 상태에서는 대상 페이지가 넘어오고, DRAGGING 상태에서는 출발 페이지가 넘어온다”고 한다. 따라서 이를 활용하기는 어려울 것 같아 사용하지 않음.</li><li>positionOffset: 0.0 ~ 1 사이의 값.  왼쪽으로 스크롤 시 1 -&gt; 0.0으로 감소하며, 오른쪽으로 스크롤 시 0.0 -&gt; 1로 증가한다.</li></ul><h1 id="onPageScrollStateChanged"><a href="#onPageScrollStateChanged" class="headerlink" title="onPageScrollStateChanged"></a>onPageScrollStateChanged</h1><h2 id="특징-2"><a href="#특징-2" class="headerlink" title="특징"></a>특징</h2><ul><li>페이지 인덱스가 변경될 경우, 변경되지 않을 경우 포함</li><li>상태가 변경될 경우 한 번씩 호출된다.</li></ul><h2 id="이벤트-전달-순서"><a href="#이벤트-전달-순서" class="headerlink" title="이벤트 전달 순서"></a>이벤트 전달 순서</h2><ul><li>수동으로 스크롤 시 페이지를 변경했을 때 순서  SCROLL_STATE_DRAGGING -&gt; SCROLL_STATE_SETTLING -&gt; onPageSelected SCROLL_STATE_IDLE</li><li>loopViewPager.setCurrentItem으로 스크롤될 경우 순서  SCROLL_STATE_SETTLING -&gt; onPageSelected -&gt; SCROLL_STATE_IDLE</li><li>수동으로 스크롤 시 페이지를 변경하지 않았을 경우 순서  SCROLL_STATE_DRAGGING -&gt; SCROLL_STATE_SETTLING -&gt; SCROLL_STATE_IDLE</li></ul>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/11/015-viewpager-addonpagechangelistener/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] Parcelable: Java와 Kotlin 구현 차이</title>
      <link>https://dl137584.github.io/2022/02/10/014-parcelable-in-java-and-kotlin/</link>
      <guid>https://dl137584.github.io/2022/02/10/014-parcelable-in-java-and-kotlin/</guid>
      <pubDate>Thu, 10 Feb 2022 10:37:39 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Parcelable을-상속받아-클래스-생성할-경우-CREATOR의-정의&quot;&gt;&lt;a href=&quot;#Parcelable을-상속받아-클래스-생성할-경우-CREATOR의-정의&quot; class=&quot;headerlink&quot; title=&quot;Parcelable을 상속</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Parcelable을-상속받아-클래스-생성할-경우-CREATOR의-정의"><a href="#Parcelable을-상속받아-클래스-생성할-경우-CREATOR의-정의" class="headerlink" title="Parcelable을 상속받아 클래스 생성할 경우 CREATOR의 정의"></a><strong>Parcelable을 상속받아 클래스 생성할 경우 CREATOR의 정의</strong></h2><blockquote><p>Parcelable protocol requires a Parcelable.Creator object called CREATOR</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;DataClass&gt; CREATOR = <span class="keyword">new</span> Creator&lt;DataClass&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SearchInfo <span class="title">createFromParcel</span><span class="params">(Parcel parcel)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DataClass(parcel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DataClass[] newArray(<span class="keyword">int</span> i) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DataClass[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이걸 코틀린 코드로 변환하면 다음과 같이 만들 수 있으나-</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JvmField</span> <span class="comment">// 프로젝트에 자바 클래스도 존재하는 경우 JvmField 어노테이션 누락에 주의할 것 </span></span><br><span class="line"><span class="keyword">val</span> CREATOR: Parcelable.Creator&lt;DataClass&gt; = <span class="keyword">object</span> : Parcelable.Creator&lt;DataClass&gt; &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">createFromParcel</span><span class="params">(parcel: <span class="type">Parcel</span>)</span></span>: DataClass &#123;</span><br><span class="line">    <span class="keyword">return</span> DataClass(parcel)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">newArray</span><span class="params">(i: <span class="type">Int</span>)</span></span>: Array&lt;DataClass?&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> arrayOfNulls&lt;DataClass?&gt;(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="코틀린-Parcelable-구현"><a href="#코틀린-Parcelable-구현" class="headerlink" title="[코틀린] Parcelable 구현"></a><strong>[코틀린] Parcelable 구현</strong></h2><p>-그러나 코틀린에서는 Parcelable 구현을 위해 <code>@Parcelize</code> 어노테이션을 제공하고 있기 때문에 꼭 필요한 경우가 아니면 자바와 같이 CREATOR를 만들 필요는 없다.</p><p>코틀린에서 구현한 Parcelable을 상속받은 Data Class는 다음과 같다. 이 코드는 이 자체만으로도 내부에서 CREATOR 기능을 수행한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Parcelable</span><br><span class="line"><span class="keyword">import</span> com.google.gson.annotations.SerializedName</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.parcel.Parcelize</span><br><span class="line"></span><br><span class="line"><span class="meta">@Parcelize</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">ParcelData</span></span>(<span class="meta">@SerializedName(<span class="meta-string">&quot;A&quot;</span>)</span> <span class="keyword">var</span> a: String? = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                      <span class="meta">@SerializedName(<span class="meta-string">&quot;B&quot;</span>)</span> <span class="keyword">var</span> b: String? = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                      <span class="meta">@SerializedName(<span class="meta-string">&quot;C&quot;</span>)</span> <span class="keyword">var</span> c: ArrayList&lt;AnyData&gt;? = arrayListOf()): Parcelable</span><br></pre></td></tr></table></figure><p>참고를 위해 Parcelize 어노테이션에 작성된 주석의 일부를 가져왔다.</p><blockquote><p>Instructs the Kotlin compiler to generate <code>writeToParcel()</code>, <code>describeContents()</code>[android.os.Parcelable] methods, as well as a <code>CREATOR</code> factory class automatically.</p></blockquote><p>이는 자바 코드(또는 코틀린 코드) 상에서 <code>putExtra</code>를 통해 전달할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ParcelData p = <span class="keyword">new</span> ParcelData();</span><br><span class="line">intent.putExtra(<span class="string">&quot;extra&quot;</span>, p);</span><br></pre></td></tr></table></figure><p>그리고 intent를 통해 이동한 액티비티에서는 <code>getParcelableExtra</code>로 데이터를 받아올 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/10/014-parcelable-in-java-and-kotlin/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] 다른 앱 위에 그리기 권한: TYPE_APPLICATION_OVERLAY</title>
      <link>https://dl137584.github.io/2022/02/09/013-type-application-overlay/</link>
      <guid>https://dl137584.github.io/2022/02/09/013-type-application-overlay/</guid>
      <pubDate>Wed, 09 Feb 2022 12:00:43 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;[“]다른 앱 위의 그리기]는 폰 설정 &amp;gt; 애플리케이션 &amp;gt; 앱 &amp;gt; 고급 [다른 앱 위에 표시되는 앱]에서 권한 설정할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/013-01.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=</description>
        
      
      
      
      <content:encoded><![CDATA[<p>[“]다른 앱 위의 그리기]는 폰 설정 &gt; 애플리케이션 &gt; 앱 &gt; 고급 [다른 앱 위에 표시되는 앱]에서 권한 설정할 수 있다.</p><p><img src="/assets/images/013-01.png"></p><h2 id="퍼미션"><a href="#퍼미션" class="headerlink" title="퍼미션"></a><strong>퍼미션</strong></h2><p>[다른 앱 위에 그리기] 설정을 추가하려면 Manifest에 이를 사용하겠다고 퍼미션을 추가해야하는데,</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="권한-다른-앱-위에-그리기-Draw-over-other-apps-Appear-on-top"><a href="#권한-다른-앱-위에-그리기-Draw-over-other-apps-Appear-on-top" class="headerlink" title="권한: 다른 앱 위에 그리기(Draw over other apps / Appear on top)"></a><strong>권한: 다른 앱 위에 그리기(Draw over other apps / Appear on top)</strong></h2><p>위 퍼미션을 추가하면 앱 설정(설정&gt;애플리케이션&gt;해당 앱)에 [다른 앱 위에 그리기] 정보가 뜬다. (안드로이드 버전마다 언어:영어일 때의 표시나 노출 위치는 다를 수 있다.)</p><p>중요한 것은 [다른 앱 위에 그리기]의 기본값이 버전마다 다르다는 건데,</p><ul><li><strong>API level 23(Android 6.0 Marshmallow)</strong> 미만에서는 true</li><li>그 이상에서는 false</li></ul><p>앱스토어에서 설치할 경우 기본적으로 위와 같이 설정되어 유저의 단말에 설치됨을 숙지하여 기능구현 프로세스를 짜야한다.</p><h2 id="버전-체크-방법"><a href="#버전-체크-방법" class="headerlink" title="버전 체크 방법"></a><strong>버전 체크 방법</strong></h2><p><img src="/assets/images/013-02.png"></p><p>[다른 앱 위에 그리기] 기능이 필요할 경우 API level 23 이상에서는 버전 체크 처리를 해주어야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* REQ_CODE_OVERLAY_PERMISSION는 임의로 정한 상수</span></span><br><span class="line"><span class="comment">   onActivityResult(int requestCode, int resultCode, Intent data)에서 requestCode로 받을 때 사용함 */</span></span><br><span class="line"><span class="meta">@TargetApi(Build.VERSION_CODES.M)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onObtainingPermissionOverlayWindow</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(<span class="string">&quot;package:&quot;</span> + context.getPackageName());</span><br><span class="line">    ((Activity) context).startActivityForResult(intent, REQ_CODE_OVERLAY_PERMISSION);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>덧붙여 [다른 앱 위에 그리기] 설정값이 true인지 확인하는 방법은 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">alertPermissionCheck</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M</span><br><span class="line">&amp;&amp; !Settings.canDrawOverlays(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="주의-deprecated-된-WindowManager-LayoutParams의-플래그"><a href="#주의-deprecated-된-WindowManager-LayoutParams의-플래그" class="headerlink" title="주의: deprecated 된 WindowManager.LayoutParams의 플래그"></a><strong>주의: deprecated 된 WindowManager.LayoutParams의 플래그</strong></h2><ul><li>TYPE_PHONE</li><li>TYPE_PRIORITY_PHONE</li><li>TYPE_SYSTEM_ALERT</li><li>TYPE_SYSTEM_ERROR</li><li>TYPE_SYSTEM_OVERLAY</li><li>TYPE_TOAST</li></ul><p>위에 나열된 타입은 API level 26(Android 8.0 Oreo)에 deprecated 되어 아래와 같이 Android Developer 에서는 이것들 대신 <strong>TYPE_APPLICATION_OVERLAY</strong>를 쓰도록 가이드 하고 있다.</p><p><img src="/assets/images/013-03.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> param: WindowManager.LayoutParams</span><br><span class="line"><span class="keyword">val</span> flag = <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.Version_CODES.O) &#123;</span><br><span class="line">    WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY</span><br><span class="line">&#125;</span><br><span class="line">param = WindowManager.LayoutParams(width,</span><br><span class="line">    WindowManager.LayoutParams.WRAP_CONTENT,</span><br><span class="line">flag, ...);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/09/013-type-application-overlay/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>탐욕법(Greedy Algorithm)</title>
      <link>https://dl137584.github.io/2022/02/05/012-greedy-algorithm/</link>
      <guid>https://dl137584.github.io/2022/02/05/012-greedy-algorithm/</guid>
      <pubDate>Sat, 05 Feb 2022 11:40:31 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;탐욕법-Greedy-Algorithm-이란&quot;&gt;&lt;a href=&quot;#탐욕법-Greedy-Algorithm-이란&quot; class=&quot;headerlink&quot; title=&quot;탐욕법(Greedy Algorithm)이란?&quot;&gt;&lt;/a&gt;탐욕법(Greedy Algor</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="탐욕법-Greedy-Algorithm-이란"><a href="#탐욕법-Greedy-Algorithm-이란" class="headerlink" title="탐욕법(Greedy Algorithm)이란?"></a>탐욕법(Greedy Algorithm)이란?</h1><p>미래를 고려하지 않고 각 단계에서 최적의 해를 찾아 모든 단계를 진행할 경우 최선의 결과에 도달한다고 생각하는 알고리즘.</p><p><img src="/assets/images/012-01.png"></p><ul><li>참고: <a href="https://brilliant.org/wiki/greedy-algorithm/">Greedy Algorithms | Brilliant Math &amp; Science Wiki</a></li></ul><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>전체적인 최적해를 보장할 수 없다.</li><li>선택한 것을 번복하지 않는다.</li><li>직관적</li></ul><h2 id="예시-최소-신장-트리"><a href="#예시-최소-신장-트리" class="headerlink" title="예시, 최소 신장 트리"></a>예시, 최소 신장 트리</h2><ul><li>참고: <a href="https://adrian0220.tistory.com/57">14. 탐욕 알고리즘 (Greedy Algorithm) - 1</a></li></ul><h2 id="예시-거스름돈-최소-개수-반환"><a href="#예시-거스름돈-최소-개수-반환" class="headerlink" title="예시, 거스름돈 최소 개수 반환"></a>예시, 거스름돈 최소 개수 반환</h2><p>거슬러줄 돈(w)에서 동전(10, 50, 100, 500)을 뺐을 때 그 값이 <strong>가장 작은</strong> 경우의 동전을 우선 반환한다.</p><p>여기서 “뺀 값이 가장 작은 경우가 최적의 해”라는 게 이 문제에서 가장 근본적인 명제이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 거스름돈 최소 개수 반환</span></span><br><span class="line"><span class="keyword">int</span> change = w; <span class="comment">//입력: 거슬러줄 돈</span></span><br><span class="line"><span class="keyword">int</span> n500, n100, n50, n10 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(change &gt;= <span class="number">500</span>) &#123;</span><br><span class="line">    change -= <span class="number">500</span>; n500++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(change &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">    change -= <span class="number">100</span>; n100++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(change &gt;= <span class="number">50</span>) &#123;</span><br><span class="line">    change -= <span class="number">50</span>; n50++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(change &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">    change -= <span class="number">10</span>; n10++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n500 + n100 + n50 + n10;</span><br></pre></td></tr></table></figure><p>단, 200원에 대해 동전이 위의 네 가지 밖에 없다면 최종해는 100*2로 “2”겠지만, 160원짜리 동전이 만들어진다면  160*1 + 10*4로 “5”가 나오기 때문에 탐욕법으로 최적해를 찾을 수 없게 된다. 이처럼 모든 상황에서 최적해를 찾을 수 있는 유연한 방법이 아니다.</p><h1 id="동적-계획법과-비교된다"><a href="#동적-계획법과-비교된다" class="headerlink" title="동적 계획법과 비교된다."></a>동적 계획법과 비교된다.</h1><blockquote><p>동적 계획법(Dynamic Programming)이란, 전체를 바라보고 그것을 여러 개의 하위 문제들로 나누어 각 하위 문제들의 답을 이용해 최종 답을 내는 것이다.(복잡한 문제를 간단한 여러 개의 문제로 나누어 푸는 방법)</p></blockquote><h2 id="동적-계획법-특징"><a href="#동적-계획법-특징" class="headerlink" title="동적 계획법 특징"></a>동적 계획법 특징</h2><ul><li>큰 문제 안에 작은 문제가 중첩되어 있는 문제를 해결하는 데 사용. 예를 들어, 피보나치 수열.</li><li>중첩되는 데이터라면 저장하고, 지속적으로 데이터를 참조한다.</li></ul><p>피보나치 수열을 간단하게 코드화하면 아래와 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이때, fib(5)를 구하려고 하면 fib(2)의 계산은 여러번 중복된다. 이로 인한 계산 속도의 저하를 막기 위해 fib(2)와 같이 중복되는 값은 배열에 저장하여 필요할 때 배열에 접근해서 값을 가져오는 방식이다.</p><p>중복계산이 줄어들기 때문에 시간 복잡도는 O(n)가 된다.</p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Algorithm/">Algorithm</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/05/012-greedy-algorithm/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] 메모리 캐시와 디스크 캐시</title>
      <link>https://dl137584.github.io/2022/02/05/010-memory-cache-and-disk-cache/</link>
      <guid>https://dl137584.github.io/2022/02/05/010-memory-cache-and-disk-cache/</guid>
      <pubDate>Sat, 05 Feb 2022 11:30:11 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;브라우저에서의-메모리-디스크-캐시&quot;&gt;&lt;a href=&quot;#브라우저에서의-메모리-디스크-캐시&quot; class=&quot;headerlink&quot; title=&quot;브라우저에서의 메모리/디스크 캐시&quot;&gt;&lt;/a&gt;&lt;strong&gt;브라우저에서의 메모리/디스크 캐시&lt;/stro</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="브라우저에서의-메모리-디스크-캐시"><a href="#브라우저에서의-메모리-디스크-캐시" class="headerlink" title="브라우저에서의 메모리/디스크 캐시"></a><strong>브라우저에서의 메모리/디스크 캐시</strong></h1><p><a href="https://mygumi.tistory.com/275">메모리 캐시 vs 디스크 캐시 :: 마이구미</a> (정리잘되어있음)</p><p>아래는 해당 링크의 요약본이다.</p><h2 id="브라우저-측면이-아닌-하드웨어-측면에서-보면"><a href="#브라우저-측면이-아닌-하드웨어-측면에서-보면" class="headerlink" title="브라우저 측면이 아닌 하드웨어 측면에서 보면,"></a>브라우저 측면이 아닌 하드웨어 측면에서 보면,</h2><ul><li>관련설명 잘 되어있는 추천영상: [bRd 3D] CPU는 어떻게 작동할까? <a href="https://youtu.be/Fg00LN30Ezg">유투브링크</a></li><li>디스크 캐시는 하드디스크에 접근하는 시간을 개선하기 위해 RAM에 저장하는 기법이다.</li><li>캐시 메모리는 램에 접근하지 않고 더 빠른 시간으로 접근할 수 있는 CPU 칩 안에 있는 작지만 빠른 메모리이다.(L1, L2, L3)</li></ul><p><img src="/assets/images/010-01.png"></p><h2 id="브라우저-측면에서-보면"><a href="#브라우저-측면에서-보면" class="headerlink" title="브라우저 측면에서 보면,"></a>브라우저 측면에서 보면,</h2><p>기본적으로 캐시 데이터는 하드디스크에 저장되는데(즉, 디스크 캐시), 재사용 및 I/O 최소화 등의 이점이 있으나 더 빠른 처리를 위해 I/O 없이 웹코어 내부로 바로 접근하여 데이터를 가져오는 메모리 캐시가 존재한다.</p><h1 id="앱-비트맵-캐싱"><a href="#앱-비트맵-캐싱" class="headerlink" title="앱, 비트맵 캐싱"></a><strong>앱, 비트맵 캐싱</strong></h1><ul><li>참고 문서<ul><li>안드로이드 공식 문서 - 비트맵 캐싱</li></ul>  <a href="https://developer.android.com/topic/performance/graphics/cache-bitmap?hl=ko"></a><ul><li>찰스의 안드로이드 - LruCache 에 대하여</li></ul>  <a href="https://www.charlezz.com/?p=44551">안드로이드에서 LruCache를 파헤치기</a></li></ul><blockquote><p>비트맵 캐싱은 LruCache를 사용하는 대표적인 예다.</p></blockquote><p>디스크 캐시 및 메모리 캐시에 대해 구분하고자 한 계기는 Glide다. Glide에서는 비트맵 풀 설정을 재정의할 때 다음과 같이 사용한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> bitmapPoolSizeBytes = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">30</span>; <span class="comment">// 30mb</span></span><br><span class="line">builder.setBitmapPool(<span class="keyword">new</span> LruBitmapPool(bitmapPoolSizeBytes));</span><br></pre></td></tr></table></figure><p>(참고로 기존에 사용하던 UIL의 설정 중 하나는 <code>.memoryCache(new LruMemoryCache(2 * 1024 * 1024))</code>였다.)</p><p>또한, 메모리 캐시를 사용하지 않거나 디스크 캐시를 어떻게 사용할지 Strategy(전략)을 설정할 수 있도록 하였다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.skipMemoryCache(<span class="keyword">true</span>) <span class="comment">// default is false</span></span><br><span class="line">.diskCacheStrategy(DiskCacheStrategy.NONE) <span class="comment">// default is AUTO</span></span><br></pre></td></tr></table></figure><p>그렇다면 왜 이 둘은 나뉘어져 있고, 왜 Lru를 사용할까.</p><h2 id="비트맵-캐싱-측면에서-보는-메모리-캐시와-디스크-캐시"><a href="#비트맵-캐싱-측면에서-보는-메모리-캐시와-디스크-캐시" class="headerlink" title="비트맵 캐싱 측면에서 보는 메모리 캐시와 디스크 캐시"></a>비트맵 캐싱 측면에서 보는 메모리 캐시와 디스크 캐시</h2><blockquote><p>메모리 캐시는 “중요한 애플리케이션 메모리”를 사용하는 대신 비트맵에 빠르게 액세스할 수 있다. (인용 출처: 공식문서)</p></blockquote><blockquote><p>주석 &gt; <a href="https://stackoverflow.com/questions/9916829/how-do-i-view-android-application-specific-cache">링크</a> “중요한 애플리케이션 메모리”는 View &gt; Tool Windows &gt; Device File Explorer 로 들어가서 data/data 하위 폴더에서 확인할 수 있다.</p></blockquote><p>하지만 애플리케이션이 종료되면 메모리 캐시는 사라지기 때문에, 일부 데이터는 “유지”될 필요가 있다.</p><blockquote><p>이러한 경우 디스크 캐시를 사용하여 처리된 비트맵을 “유지”하고 메모리 캐시에서 이미지가 더 이상 사용 가능하지 않을 때 로드 시간을 줄일 수 있습니다.</p></blockquote><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>즉, 메모리 캐시는 빠르다. 앱 자체에서 가장 빠르게 도달할 수 있는 메모리에 저장되기 때문이다. 하지만 그 용량이 작아 이미지 로딩이 많은 경우 문제가 될 수 있으므로 디스크 캐시를 함께 사용하게된다.</p><p>디스크 캐시는 메모리 캐시에 비해서는 느리다. 따라서 여기에서 이미지를 불러올 경우 백그라운드에서 로딩이 되도록 비동기 처리를 함께 해줘야하는 대신 용량이 크다.</p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/05/010-memory-cache-and-disk-cache/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android / Glide] 이미지 URL을 읽어 JPG 포맷파일로 변환하기</title>
      <link>https://dl137584.github.io/2022/02/05/011-convert-remote-url-to-jpg-file/</link>
      <guid>https://dl137584.github.io/2022/02/05/011-convert-remote-url-to-jpg-file/</guid>
      <pubDate>Sat, 05 Feb 2022 11:19:11 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;1-remote-url의-이미지를-비트맵-형식으로-가져온다&quot;&gt;&lt;a href=&quot;#1-remote-url의-이미지를-비트맵-형식으로-가져온다&quot; class=&quot;headerlink&quot; title=&quot;1. remote url의 이미지를 비트맵 형식으로</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-remote-url의-이미지를-비트맵-형식으로-가져온다"><a href="#1-remote-url의-이미지를-비트맵-형식으로-가져온다" class="headerlink" title="1. remote url의 이미지를 비트맵 형식으로 가져온다."></a>1. remote url의 이미지를 비트맵 형식으로 가져온다.</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">loadBitmapImage</span><span class="params">(context: Context, url: String?, listener: RequestListener&lt;Bitmap?&gt;?)</span> </span>&#123;</span><br><span class="line">    GlideApp.with(context)</span><br><span class="line">        .asBitmap()</span><br><span class="line">        .load(url)</span><br><span class="line">        .listener(listener)</span><br><span class="line">        .preload() <span class="comment">//submit()으로 하면 Activity destroy 시점에서 오류</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Glide를 사용해 listener를 통해 onResourceReady에서 비트맵 리소스를 받아 처리한다.</p><blockquote><p>Glide를 쓰지 않고 가령, 갤러리에 저장된 이미지를 가져와 3번으로 넘어갈 경우, imageView에 비트맵을 저장하게 되는데, 이때 Bitmap의 recycle state를 관리해줘야할 수 있다. (참고: <a href="https://dl137584.github.io/2022/02/01/004-the-way-bitmap-gc-in-glide/">Glide에서 비트맵 이미지가 GC되는 과정</a>)<br>이런 이유로 <a href="https://developer.android.com/topic/performance/graphics/manage-memory?hl=ko">Android Developer 공식 문서</a>에서는 <code>대부분의 경우 Glide 라이브러리를 사용하여 앱에서 비트맵을 가져오고 디코딩하고 표시하는 것을 추천</code>한다고 나와있다.</p></blockquote><h1 id="2-비트맵을-JPG-포맷으로-압축-저장한다"><a href="#2-비트맵을-JPG-포맷으로-압축-저장한다" class="headerlink" title="2. 비트맵을 JPG 포맷으로 압축, 저장한다."></a>2. 비트맵을 JPG 포맷으로 압축, 저장한다.</h1><ul><li>Bitmap.compress <a href="https://developer.android.com/reference/android/graphics/Bitmap#compress(android.graphics.Bitmap.CompressFormat,%20int,%20java.io.OutputStream)">명세</a></li><li>참고 <a href="https://m.blog.naver.com/PostView.nhn?blogId=luku756&logNo=221214604097&proxyReferer=https://www.google.co.kr/">Bitmap 컨트롤하기</a></li></ul><p>이제 받아온 비트맵을 remoteTemp.jpg 라는 이름의 파일에 JPG 포맷으로 저장할 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mRemoteImageUri = Uri.fromFile(getReviewTempImageFile(context</span><br><span class="line">        , <span class="string">&quot;remoteTemp.jpg&quot;</span>));</span><br><span class="line">File bitmapFile = <span class="keyword">new</span> File(mRemoteImageUri.getPath());</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(bitmapFile);</span><br><span class="line">    bitmap.compress(Bitmap.CompressFormat.JPEG, <span class="number">100</span>, outputStream);</span><br><span class="line"></span><br><span class="line">    outputStream.flush();</span><br><span class="line">    outputStream.close();</span><br><span class="line"></span><br><span class="line">    setPickedImage(mRemoteImageUri);</span><br><span class="line">&#125;  <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>먼저 저장할 파일의 Uri를 만들었다. Uri를 생성하는 이유는 3번에서 파일의 사이즈를 얻어오기 위함이다. 자세히는 해당 번호 참조.</p><p>compress의 두 번째 인자값은 <a href="https://developer.android.com/reference/android/graphics/Bitmap.CompressFormat">CompressFormat</a>에 대한 압축률이며 0(minimum) ~ 100(maximum)으로 설정할 수 있다.</p><blockquote><p>bitmap.compress(CompressFormat.PNG, 0, filestream)<br>위와 같이 PNG로 압축하여 출력할 경우 두 번째 인자값은 무시한다. PNG 파일의 특성이 손실률 없는 포맷에 해당하기 때문이다.</p></blockquote><blockquote><p>위의 코드에서는 FileOutputStream 객체를 사용하여 JPG로 압축한 비트맵이 파일에 저장되었으나 이를 파일로 저장하지 않고 처리하려면 <a href="https://hello-bryan.tistory.com/69">ByteArrayOutputStream</a>를 사용할 수 있다.</p></blockquote><ul><li>코드 세부사항  파일에 저장하는 코드 상에서 사용한 getReviewTempImageFile 메소드는 아래와 같다.  여기서 ‣ 주의할 것.  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getReviewTempImageFile</span><span class="params">(Context context, String imageName)</span> </span>&#123;</span><br><span class="line">    String imgDirName = <span class="string">&quot;/TestDir&quot;</span>;</span><br><span class="line">    String dirPath = context.getExternalFilesDir(<span class="keyword">null</span>) + imgDirName;</span><br><span class="line">    File saveDir = <span class="keyword">new</span> File(dirPath);</span><br><span class="line">    <span class="keyword">if</span> (!saveDir.exists()) &#123;</span><br><span class="line">        saveDir.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String nomediaFilePath = dirPath + <span class="string">&quot;/.nomedia&quot;</span>;</span><br><span class="line">    File nomediaFile = <span class="keyword">new</span> File(nomediaFilePath);</span><br><span class="line">    <span class="keyword">if</span> (!nomediaFile.exists()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nomediaFile.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String filePath = dirPath + <span class="string">&quot;/&quot;</span> + imageName;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> File(filePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  getExternalFilesDir()을 사용하기 때문에 미리 WRITE_EXTERNAL_STORAGE 퍼미션 처리를 해주어야 한다. crop을 수행하는 Activity에 진입하기 전에 체크해주는 게 가장 좋다. 해당 퍼미션을 체크하는 코드는 다음과 같다.  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doImageSearch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (permissionCheck(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</span><br><span class="line">        <span class="comment">// start CropActivity</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mRequestPermission = Manifest.permission.WRITE_EXTERNAL_STORAGE;</span><br><span class="line">        requestPermission(<span class="keyword">this</span>, PermissionConstants.REQUEST_STORAGE_CODE, Manifest.permission.WRITE_EXTERNAL_STORAGE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">permissionCheck</span><span class="params">(Context context, String permission)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M</span><br><span class="line">        || (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M</span><br><span class="line">        &amp;&amp; ActivityCompat.checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">requestPermission</span><span class="params">(Context context, <span class="keyword">int</span> requestCode, String permission)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//shouldShowRequestPermissionRationale - 사용자가 권한 요청을 한번 거절 했을 경우 True</span></span><br><span class="line">    <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale((Activity) context, permission)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)</span><br><span class="line">                .setData(Uri.parse(<span class="string">&quot;package:&quot;</span> + context.getPackageName()));</span><br><span class="line">            ((Activity) context).startActivityForResult(intent, PermissionConstants.REQ_CODE_REQUEST_SETTING);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ActivityNotFoundException e) &#123;&#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 처음 권한 요청 및 다시 보지 않기를 선택하였을 경우 false</span></span><br><span class="line">        ActivityCompat.requestPermissions((Activity) context, <span class="keyword">new</span> String[]&#123;permission&#125;, requestCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-이미지-파일을-적절한-사이즈로-변경하여-재저장"><a href="#3-이미지-파일을-적절한-사이즈로-변경하여-재저장" class="headerlink" title="3. 이미지 파일을 적절한 사이즈로 변경하여 재저장"></a>3. 이미지 파일을 적절한 사이즈로 변경하여 재저장</h1><p>crop을 준비하기 위해서는 디바이스의 한 화면에 적절한 크기로 이미지를 노출해야한다. 위의 코드에서 setPickedImage 메소드가 이 기능을 담당한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPickedImage</span><span class="params">(<span class="meta">@Nullable</span> Uri rawBitmap)</span> </span>&#123;</span><br><span class="line">    mImageCaptureUri = Uri.fromFile(getReviewTempImageFile(context, <span class="string">&quot;originTemp.jpg&quot;</span>));</span><br><span class="line">    File bitmapFile = <span class="keyword">new</span> File(mImageCaptureUri.getPath());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Uri bitmapUri = mImageCaptureUri;</span><br><span class="line">        <span class="keyword">if</span>(rawBitmap != <span class="keyword">null</span>)</span><br><span class="line">            bitmapUri = rawBitmap;</span><br><span class="line"></span><br><span class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        options.inSampleSize = calculateBitmapSampleSize(<span class="keyword">this</span>, bitmapUri);</span><br><span class="line">        options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        InputStream is = getContentResolver().openInputStream(bitmapUri);</span><br><span class="line">        Bitmap bitmap = BitmapFactory.decodeStream(is, <span class="keyword">null</span>, options);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        String uriPath = getRealPathFromURI(context, bitmapUri);</span><br><span class="line">        <span class="keyword">if</span>(TextUtils.isEmpty(uriPath))</span><br><span class="line">            uriPath = bitmapUri.getPath();</span><br><span class="line">        ExifInterface exif = <span class="keyword">new</span> ExifInterface(uriPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> exifOrientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);</span><br><span class="line">        <span class="keyword">int</span> exifDegree = exifOrientationToDegrees(exifOrientation);</span><br><span class="line">        bitmap = rotate(bitmap, exifDegree);</span><br><span class="line">        FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(bitmapFile);</span><br><span class="line">        bitmap.compress(Bitmap.CompressFormat.JPEG, <span class="number">100</span>, outputStream);</span><br><span class="line"></span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        startCrop(bitmap);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mImageCaptureUri != <span class="keyword">null</span>)</span><br><span class="line">        deleteTempImageFile(mImageCaptureUri);</span><br><span class="line">    <span class="keyword">if</span>(mRemoteImageUri != <span class="keyword">null</span>)</span><br><span class="line">        deleteTempImageFile(mRemoteImageUri);</span><br><span class="line">    mCropImage.setImageBitmap(<span class="keyword">null</span>); <span class="comment">// clear bitmap in imageView</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.finish();</span><br><span class="line">    overridePendingTransition(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/05/011-convert-remote-url-to-jpg-file/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android / Glide] GlideApp 생성절차</title>
      <link>https://dl137584.github.io/2022/02/05/009-the-way-to-create-glideapp/</link>
      <guid>https://dl137584.github.io/2022/02/05/009-the-way-to-create-glideapp/</guid>
      <pubDate>Sat, 05 Feb 2022 04:01:33 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;아래 방식은 4.x.x 버전에서 유효하다. 3.x.x 버전의 Glide에서는 Manifest.xml에 meta-data를 추가하는 방식으로 진행된다.&lt;br&gt;참고) 3.x.x는 아래 링크가 더 도움이 될 것 같다. 3.x.x</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>아래 방식은 4.x.x 버전에서 유효하다. 3.x.x 버전의 Glide에서는 Manifest.xml에 meta-data를 추가하는 방식으로 진행된다.<br>참고) 3.x.x는 아래 링크가 더 도움이 될 것 같다. 3.x.x에서는 <code>AppGlideModule</code>이 아닌 <code>GlideModule</code>을 상속받는 클래스를 만들어야 한다.<br><a href="https://medium.com/@PaulinaSadowska/adding-headers-to-image-request-in-glide-dc9640ca9b12">https://medium.com/@PaulinaSadowska/adding-headers-to-image-request-in-glide-dc9640ca9b12</a></p></blockquote><h1 id="1-app-build-gradle에-dependencies-추가"><a href="#1-app-build-gradle에-dependencies-추가" class="headerlink" title="1. app/build.gradle에 dependencies 추가"></a>1. app/build.gradle에 dependencies 추가</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;kotlin-android&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;kotlin-kapt&#x27;</span></span><br><span class="line">...</span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    implementation <span class="string">&#x27;com.github.bumptech.glide:glide:4.11.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&quot;com.github.bumptech.glide:okhttp3-integration:4.11.0&quot;</span></span><br><span class="line">    kapt <span class="string">&#x27;com.github.bumptech.glide:compiler:4.11.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 코틀린을 쓰고 있다면, glide:compiler dependencies를 kapt로 추가해줘야한다.<br>이를 위해 선행작업으로 gradle.build의 최상단에 <code>kotlin-kapt</code> 도 필요하다.</p></blockquote><ul><li>glide:glide는 기본적으로 Glide 라이브러리를 사용하기 위해 추가됨.</li><li>okhttp3-integration는 CustomGlideModule에서 사용하기 위함.</li><li>glide:compiler는 GeneratedAppGlideModuleImpl를 생성하기 위함.<br>이후 proguard-rules.pro에서 GeneratedAppGlideModuleImpl를 keep 해주는데 이는 GlideApp을 사용하기 위해 CustomGlideModule과 같은 패키지(<code>net.common.utils.GlideApp</code>)에 만들어진다.(<em>4번 절차 참조</em>)</li></ul><h1 id="2-UserAgentInterceptor-생성"><a href="#2-UserAgentInterceptor-생성" class="headerlink" title="2. UserAgentInterceptor 생성"></a>2. UserAgentInterceptor 생성</h1><ul><li>참조 문서  <a href="https://github.com/bumptech/glide/issues/3692">Using OkHttp Interceptor: Redundant User Agents · Issue #3692 · bumptech/glide</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Interceptor;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Request;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAgentInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserAgentInterceptor</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = chain.request()</span><br><span class="line">                .newBuilder()</span><br><span class="line">                .header(<span class="string">&quot;User-Agent&quot;</span>, getUserAgent(mContext))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> chain.proceed(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-CustomGlideModule-생성"><a href="#3-CustomGlideModule-생성" class="headerlink" title="3. CustomGlideModule 생성"></a>3. CustomGlideModule 생성</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.Glide;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.GlideBuilder;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.Registry;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.annotation.GlideModule;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.load.model.GlideUrl;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.<span class="keyword">module</span>.AppGlideModule;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.integration.okhttp3.OkHttpUrlLoader.Factory;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GlideModule</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomGlideModule</span> <span class="keyword">extends</span> <span class="title">AppGlideModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyOptions</span><span class="params">(<span class="meta">@NonNull</span> Context context,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> GlideBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 아무 것도 수정하지 않지만 오버라이드 해줘야함</span></span><br><span class="line">        <span class="keyword">super</span>.applyOptions(context, builder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerComponents</span><span class="params">(<span class="meta">@NonNull</span> Context context,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> Glide glide, <span class="meta">@NonNull</span> Registry registry)</span> </span>&#123;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">                .addInterceptor(<span class="keyword">new</span> UserAgentInterceptor(context))</span><br><span class="line">                .build();</span><br><span class="line">        registry.replace(GlideUrl.class, InputStream.class, <span class="keyword">new</span> Factory(client));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@GlideModule 어노테이션 선언 꼭 잊지 말 것.</li><li>3.x.x와는 다르게 AppGlideModule을 상속받아 커스텀 클래스를 만들어준다.</li><li>registerComponents에서 OkHttpClient를 통해 커스텀 인터셉터를 추가해준다.</li></ul><h2 id="AppGlideModule과-LibraryGlideModule"><a href="#AppGlideModule과-LibraryGlideModule" class="headerlink" title="AppGlideModule과 LibraryGlideModule"></a>AppGlideModule과 LibraryGlideModule</h2><p>AppGlideModule(을 상속받은 CustomAppGM)은 애플리케이션 단에, LibraryGlideModule(을 상속받은 ~ 생략)은 공통 라이브러리 단에 구현하면 된다.</p><p>이때 GlideModule을 커스텀할 경우, CustomAppGM의 구현은 필수적이나 CustomLibraryGM의 구현은 선택적이어서, CustomLibraryGM만 구현해선 안 된다.</p><p>그리고 공통 라이브러리에 정의한 모든 CustomLibraryGM은 CustomAppGM에서 통합적으로 추가된다.</p><h1 id="4-재빌드"><a href="#4-재빌드" class="headerlink" title="4. 재빌드"></a>4. 재빌드</h1><ul><li>참고 문서<ul><li><em>GeneratedAppGlideModuleImpl location</em></li></ul>  <a href="https://github.com/bumptech/glide/issues/2393">How to use Glide 4 generated API correctly both in app module and library module? · Issue #2393 · bumptech/glide</a>  <a href="https://github.com/bumptech/glide/issues/1945">cannot resolve symbol ‘GlideApp’ (GlideApp was not generated) · Issue #1945 · bumptech/glide</a></li></ul><p>3번까지 진행 후 재빌드(Build&gt;Make Project) 하자.</p><ul><li><code>app/build/generated/source/kapt/appDebug/com.bumptech.glide.GeneratedAppGlideModuleImpl</code></li><li><code>app/build/generated/source/kapt/appDebug/net.common.utils.GlideApp</code></li></ul><p>위와 같은 로케이션에 <code>GeneratedAppGlideModuleImpl</code>와 <code>GlideApp</code>이 생성되는 것을 확인할 수 있다. 이렇게 되면 이제 GlideApp을 사용할 준비가 된 것.</p><ul><li><p>GlideApp은 CustomGlideModule을 정의한 패키지 내에 만들어진다.</p></li><li><p>위의 두 파일이 만약 생성되지 않는다면</p><ul><li>build.gradle의 kapt를 확인할 것</li><li>@GlideModule 어노테이션 넣었는지 확인할 것</li></ul></li></ul><h1 id="5-app-proguard-rules-pro-편집"><a href="#5-app-proguard-rules-pro-편집" class="headerlink" title="5. app/proguard-rules.pro 편집"></a>5. app/proguard-rules.pro 편집</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-keep public class * extends com.bumptech.glide.module.AppGlideModule</span><br><span class="line">-keep class com.bumptech.glide.GeneratedAppGlideModuleImpl</span><br></pre></td></tr></table></figure><p>위와 같은 keep을 추가해줘야한다. </p><p>첫번째 라인(* extends AppGlideModule)은 CustomAppGlideModule을 위해서 쓰임.</p><p>두번째 라인(GeneratedAppGlideModuleImpl)은 빨간줄로 오류표시가 날 수 있는데, 4번에서 말한 것처럼 kapt로 추가된 의존성에 의해 빌드 후 생성되는 파일이라서이다. 빌드 후 generated에 생성되는 게 GeneratedAppGM과 GlideApp인 것으로 보아 GlideApp을 사용하기 위해서 쓰이는 걸로 보인다.</p><p>(참고로 app/proguard-rules.pro 파일에서 #으로 시작되는 라인은 주석에 해당함.)</p><h1 id="6-GlideApp-사용예"><a href="#6-GlideApp-사용예" class="headerlink" title="6. GlideApp 사용예"></a>6. GlideApp 사용예</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GlideApp.with(context)</span><br><span class="line">    .load(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    .apply(options)</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><p>GlideApp을 통해 이미지를 로드해야지만이 CustomGlideModule에서 정의한 설정을 따른다.</p><p>기본적으로 Glide와 사용에 지장이 있을 정도로 방식이 다르지 않다.</p><p>단, GlideApp은 Glide와는 다르게 일부 RequestOptions를 통해서만 호출할 수 있었던 속성들을 다이렉트로 컨트롤할 수 있게 된다. 이는 공식문서에서 일부 예제들을 통해 비교할 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/05/009-the-way-to-create-glideapp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android / Glide] Glide v4 적용</title>
      <link>https://dl137584.github.io/2022/02/05/008-glide-v4/</link>
      <guid>https://dl137584.github.io/2022/02/05/008-glide-v4/</guid>
      <pubDate>Sat, 05 Feb 2022 03:52:02 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;1-시작하기&quot;&gt;&lt;a href=&quot;#1-시작하기&quot; class=&quot;headerlink&quot; title=&quot;1. 시작하기&quot;&gt;&lt;/a&gt;1. 시작하기&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://bumptech.github.io/glide/</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-시작하기"><a href="#1-시작하기" class="headerlink" title="1. 시작하기"></a>1. 시작하기</h1><ul><li><em><a href="https://bumptech.github.io/glide/doc/configuration.html">Glide v4 공식 문서</a>(영어)</em></li><li><em>찰스의 안드로이드 - <a href="https://www.charlezz.com/wordpress/wp-content/uploads/2020/10/www.charlezz.com-glide-v4-glide-v4--by-charlezz.pdf">Glide v4</a> 한글 번역</em></li><li>*(주: 2016년 자료) 장범석님의 개발일지 - <a href="http://dktfrmaster.blogspot.com/2016/09/glide.html">Glide 사용법*</a> (feat. 메모리/디스크 캐시 설명)</li></ul><h2 id="안드로이드-SDK-요구사항"><a href="#안드로이드-SDK-요구사항" class="headerlink" title="안드로이드 SDK 요구사항"></a>안드로이드 SDK 요구사항</h2><ul><li>최소 SDK 버전 - Ice Cream Sandwich, 14 이상</li><li>컴파일 SDK 버전 - Oreo MR1, 27 이상</li></ul><h2 id="권한"><a href="#권한" class="headerlink" title="권한"></a>권한</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// Glide가 연결 상태를 감시하고 실패한 요청을 재시작하는 것을 허용</span></span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// ExternalPreferredCacheDiskCacheFactory를 사용하여 Glide의 캐시를 공개 sdcard에 저장하기 위해</span></span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h2 id="의존성"><a href="#의존성" class="headerlink" title="의존성"></a>의존성</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    kapt <span class="string">&#x27;com.github.bumptech.glide:glide:4.11.0&#x27;</span> <span class="comment">// 코틀린을 쓸 경우 kapt여야함.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em><a href="https://epro.tistory.com/236">dependencies의 implementation, api 차이점</a>에 관하여</em></li></ul><h1 id="2-기본-형태"><a href="#2-기본-형태" class="headerlink" title="2. 기본 형태"></a>2. 기본 형태</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RequestOptions options = <span class="keyword">new</span> RequestOptions()</span><br><span class="line">.bitmapTransform(<span class="keyword">new</span> RoundedCorners(<span class="number">20</span>)) <span class="comment">//radius</span></span><br><span class="line">.placeholder(R.drawable.loading) <span class="comment">// 이미지 로딩 중</span></span><br><span class="line">.error(R.drawable.loading); <span class="comment">// 이미지를 불러오지 못할 경우</span></span><br><span class="line"></span><br><span class="line">Glide.with(context) <span class="comment">// RequestManager 형태로 반환</span></span><br><span class="line">    .load(<span class="string">&quot;url&quot;</span>) <span class="comment">// RequestBuilder&lt;Drawable&gt; 형태로 반환 (이하 apply, into 동일하게 반환)</span></span><br><span class="line">    .apply(options)</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><blockquote><p>ImageView의 setDrawableResource(resource)를 부르는 것으로 보임.</p></blockquote><ul><li>apply에 if문을 적용한 사례  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(<span class="keyword">this</span>)</span><br><span class="line">.load(url)</span><br><span class="line">.transition(DrawableTransitionOptions.withCrossFade(factory))</span><br><span class="line">.diskCacheStrategy(DiskCacheStrategy.ALL)</span><br><span class="line">.apply &#123;</span><br><span class="line"><span class="keyword">if</span> (corner = <span class="number">0</span>) transfoem(CenterInside(), RoundedCorners(corner.fromDpToPx()))</span><br><span class="line">&#125;</span><br><span class="line">.into(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-Glide-커스텀을-위한-GlideApp-사용을-위한-AppGlideModule"><a href="#3-Glide-커스텀을-위한-GlideApp-사용을-위한-AppGlideModule" class="headerlink" title="3. Glide 커스텀을 위한(=GlideApp 사용을 위한) AppGlideModule"></a>3. Glide 커스텀을 위한(=GlideApp 사용을 위한) AppGlideModule</h1><ul><li>관련 링크<ul><li>Glide 공식 API 문서 - <a href="https://bumptech.github.io/glide/javadocs/400/com/bumptech/glide/module/AppGlideModule.html">AppGildeModule API</a></li><li><a href="http://sunphiz.me/wp/archives/3546">Glide Builder 옵션 설명</a></li></ul></li></ul><h2 id="Header에-User-Agent-property-삽입"><a href="#Header에-User-Agent-property-삽입" class="headerlink" title="Header에 User-Agent property 삽입"></a>Header에 User-Agent property 삽입</h2><p><a href="https://dl137584.github.io/2022/02/05/009-the-way-to-create-glideapp/">GlideApp 생성절차</a> 링크를 따를 것.</p><h1 id="4-비트맵-관련-설정-RequestOptions"><a href="#4-비트맵-관련-설정-RequestOptions" class="headerlink" title="4. 비트맵 관련 설정 - RequestOptions"></a>4. 비트맵 관련 설정 - RequestOptions</h1><ul><li>Glide 공식 API 문서 - <a href="https://kofboy2000.github.io/glide-doc-kr/javadocs/400/com/bumptech/glide/request/RequestOptions.html#fallback-int-">RequestOptions API</a></li></ul><h2 id="1-주요-옵션"><a href="#1-주요-옵션" class="headerlink" title="(1) 주요 옵션"></a>(1) 주요 옵션</h2><ul><li>placeholder(resourceId): 이미지 로딩하는 중에 보여지는 대체 이미지.</li><li>error(resourceId): 이미지를 불러오지 못할 경우 대체 이미지.</li><li>skipMemoryCache(boolean): true 설정 시 캐시를 통하지 않고 이미지 로드.</li><li>override(int width, int height): target의 너비, 높이를 세팅. 이미지 리사이징.</li><li>centerCrop: <code>default type</code>. 외에 FitCenter, CircleCrop도 있음.</li></ul><blockquote><p> Glide에서 RequestOptions를 Glide.apply()했을 때와 안 했을 때의 이미지 transformation default 값이 다르다. <em>(아래 예시: v4 공식문서 발췌)</em></p><p>→ RequestOptions을 적용하지 않았을 경우 default 값<br>  Glide.with(context)<br>      .load(url)<br>      .<strong>fitCenter</strong>() // default<br>      .into(imageView);</p><p>→ RequestOptions을 적용 시 default 값<br>  Glide.with(context)<br>      .load(url)<br>      .apply(new RequestOptions().<strong>centerCrop</strong>())<br>      .into(imageView);</p></blockquote><p>→ xml에서 scaleType지정하면 그걸로 적용될 것 같은데, 만약 ImageView인데 scaleType을 지정하지 않았을 경우 AUIL와 Glide(RequestOptions적용한 것), Glide(RO 적용 안 한 것) 세 개의 작동이 다를 수 있음.</p><h2 id="2-참고-옵션"><a href="#2-참고-옵션" class="headerlink" title="(2) 참고 옵션"></a>(2) 참고 옵션</h2><ul><li>diskCacheStrategy: 디스크 캐시 전략. 이미지 로드에 사용할 캐시 설정  ALL - DATA와 RESOURCE를 사용하여 원격 데이터를 캐시하고 RESOURCE만 사용하여 로컬 데이터를 캐싱  AUTO - defualt value.  NONE - 디스크캐시 사용안함.</li><li>priority: 로드되는 이미지의 우선순위 결정  HIGH, IMMEDIATE, LOW, NORMAL</li><li>fallback: load할 url이 null일 경우 보여줄 대체 이미지. 이게 정의되어있지 않으면 error 이미지를, error 이미지도 없다면 placeholder 이미지로 대체됨.</li></ul><h2 id="3-예제-DisplayImageOptions와-대응되는-RequestOptions"><a href="#3-예제-DisplayImageOptions와-대응되는-RequestOptions" class="headerlink" title="(3) 예제. DisplayImageOptions와 대응되는 RequestOptions"></a>(3) 예제. DisplayImageOptions와 <strong>대응되는</strong> RequestOptions</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> DisplayImageOptions mPlaceHolderOption = <span class="keyword">new</span> DisplayImageOptions.Builder()</span><br><span class="line">        .resetViewBeforeLoading(<span class="keyword">true</span>)  <span class="comment">// default</span></span><br><span class="line">        .cacheInMemory(<span class="keyword">true</span>) <span class="comment">// default</span></span><br><span class="line">        .cacheOnDisk(<span class="keyword">true</span>) <span class="comment">// default</span></span><br><span class="line">        .imageScaleType(ImageScaleType.EXACTLY) <span class="comment">// default</span></span><br><span class="line">        .bitmapConfig(Bitmap.Config.RGB_565) <span class="comment">// default</span></span><br><span class="line">        .showImageOnLoading(R.drawable.ic_loading) <span class="comment">// loading place holder resource</span></span><br><span class="line">        .showImageOnFail(R.drawable.ic_loading) <span class="comment">// failed place holder resource</span></span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><ul><li>resetViewBeforeLoading(true)</li><li>cacheInMemory(true)  → RequestOptions.skipMemoryCache(false)</li><li>cacheOnDisk  → RequestOptions.diskCacheStrategy</li><li>imageScaleType.EXACTLY: 뷰 사이즈에 맞춰서 이미지가 작아짐.</li><li>bitmapConfig  → RequestOptions.format(DecodeFormat.PREFER_RGB_565)<pre><code>  RequestOptions.format(DecodeFormat.PREFER_ARGB_8888)</code></pre>  Glide’s default: RGB_565</li><li>showImageOnLoading / showImageOnFail  → RequestOptions.placeholder(drawable) / RequestOptions.error(drawable)</li></ul><h1 id="5-Clear"><a href="#5-Clear" class="headerlink" title="5. Clear"></a>5. Clear</h1><h2 id="1-memory-캐시-삭제"><a href="#1-memory-캐시-삭제" class="headerlink" title="(1) memory 캐시 삭제"></a>(1) memory 캐시 삭제</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이 메소드는 메인 스레드에서 호출되어야 한다.</span></span><br><span class="line">Glide.get(context).clearMemory();</span><br></pre></td></tr></table></figure><p>Glide의 캐시 메모리 영역과 BitmapPool을 정리한다.</p><p>단, 모든 메모리를 삭제하는 것은 특히 효율적이지 않으며 버벅거림과 로드 시간 증가를 방지하기 위해 가능한 한 피해야 한다.</p><h2 id="2-disk-캐시-삭제"><a href="#2-disk-캐시-삭제" class="headerlink" title="(2) disk 캐시 삭제"></a>(2) disk 캐시 삭제</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> isMainThread = Looper.myLooper() == Looper.getMainLooper()</span><br><span class="line">just&lt;String&gt;(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  .subscribeOn(<span class="keyword">if</span> (isMainThread) Schedulers.io() <span class="keyword">else</span> Schedulers.immediate())</span><br><span class="line">  .subscribe &#123;</span><br><span class="line">    <span class="comment">// 이는 background 스레드에서 실행되어야 한다.</span></span><br><span class="line">    Glide.<span class="keyword">get</span>(<span class="keyword">this</span><span class="symbol">@SomethingActivity</span>).clearDiskCache()</span><br><span class="line">    Log.d(<span class="string">&quot;Deleted image memory cache and disk cache.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>디스크 캐시의 모든 항목을 지운다.</p><p>앱에서 실제로 테스트 해보니 캐시메모리의 디폴트 사이즈인 250MB를 채운 후 clearDiskCache()를 호출했을 때 변화는 다음과 같았다.</p><p>(Glide 외의 다른 캐시 데이터로 인해 왼쪽 before 사진에서는 250MB보다 약간 오버된 상태이다.)</p><p><img src="/assets/images/008-01.png"></p><h1 id="6-전환-Transitions"><a href="#6-전환-Transitions" class="headerlink" title="6. 전환 - Transitions"></a>6. 전환 - Transitions</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions.withCrossFade;</span><br><span class="line"></span><br><span class="line">Glide.with(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .transition(withCrossFade()) <span class="comment">// optional</span></span><br><span class="line">    .into(view);</span><br></pre></td></tr></table></figure><p><code>Glide v4 does NOT apply a cross fade or any other transition by default.</code></p><p>Glide v4 부터는 어떤 transitions 이벤트도 기본값으로 들어가있지 않으므로 필요할 떄 추가할 수 있다. (v3에서는 기본값이 cross fade였음)</p><h1 id="7-리스너-RequestListener"><a href="#7-리스너-RequestListener" class="headerlink" title="7. 리스너 - RequestListener"></a>7. 리스너 - RequestListener</h1><ul><li>Glide 공식 API 문서 -<a href="https://kofboy2000.github.io/glide-doc-kr/javadocs/400/com/bumptech/glide/request/RequestListener.html#fallback-int-">RequestListener API</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .listener(<span class="keyword">new</span> RequestListener&lt;Drawable&gt;() &#123; <span class="comment">// load() 다음에 추가할 것</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">onLoadFailed</span><span class="params">(<span class="meta">@Nullable</span> GlideException e, Object model,</span></span></span><br><span class="line"><span class="params"><span class="function">                Target&lt;Drawable&gt; target, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 여기서 GlideException 로그 출력</span></span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Load failed: &quot;</span> + e.printBlrBlr());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// Target에서 onLoadFailed가 호출되는 것을 허용한다.</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          resource: 로드된 이미지.</span></span><br><span class="line"><span class="comment">          model: 이미지를 로드하는 데 사용된 모델.</span></span><br><span class="line"><span class="comment">          dataSource: 이미지 출처. DATA_DISK_CACHE, LOCAL, MEMORY_CACHE, REMOTE와 같은 값.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">onResourceReady</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">                Drawable resource,</span></span></span><br><span class="line"><span class="params"><span class="function">                Object model,</span></span></span><br><span class="line"><span class="params"><span class="function">                Target&lt;Drawable&gt; target,</span></span></span><br><span class="line"><span class="params"><span class="function">                DataSource dataSource,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 성공 로그를 출력하거나 DataSource를 사용해 캐시적중을 추적할 수 있다.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// Target에서 onResourceReady가 호출되는 것을 허용한다.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><h2 id="만약-Bitmap으로-로딩된-이미지를-얻고자-한다면"><a href="#만약-Bitmap으로-로딩된-이미지를-얻고자-한다면" class="headerlink" title="만약 Bitmap으로 로딩된 이미지를 얻고자 한다면,"></a>만약 Bitmap으로 로딩된 이미지를 얻고자 한다면,</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Bitmap loadedImage = Glide.with(context)</span><br><span class="line">        .asBitmap()</span><br><span class="line">        .load(url)</span><br><span class="line">        .listener(<span class="keyword">new</span> RequestListener&lt;Bitmap&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLoadFailed</span><span class="params">(<span class="meta">@Nullable</span> GlideException e, Object o, </span></span></span><br><span class="line"><span class="params"><span class="function">                    Target&lt;Bitmap&gt; target, <span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onResourceReady</span><span class="params">(**Bitmap bitmap**, Object o, </span></span></span><br><span class="line"><span class="params"><span class="function">                    Target&lt;Bitmap&gt; target, DataSource dataSource, <span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">                image.setImage(ImageSource.bitmap(bitmap));</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .submit(<span class="number">100</span>, <span class="number">100</span>) <span class="comment">// width, height: RequestBuilder API 참조</span></span><br><span class="line">        .get();</span><br></pre></td></tr></table></figure><h1 id="8-placeholder와-error의-scaleType만-변경하기-위하여"><a href="#8-placeholder와-error의-scaleType만-변경하기-위하여" class="headerlink" title="8. placeholder와 error의 scaleType만 변경하기 위하여"></a>8. placeholder와 error의 scaleType만 변경하기 위하여</h1><p><a href="https://github.com/bumptech/glide/issues/368">Allow a different scale type for placeholder images · Issue #368 · bumptech/glide</a></p><p>→ ImageViewTarget를 상속받는 클래스를 만들어서 placeholder는 onLoadStarted, error는 onLoadFailed에 각각 정의할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScaleLoadingImageViewTarget</span> <span class="keyword">extends</span> <span class="title">DrawableImageViewTarget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ImageView.ScaleType mLoadingScaleType;</span><br><span class="line">    <span class="keyword">private</span> ImageView.ScaleType mReadyScaleType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RequestOptions에서 정의해둔 scale은 fitCenter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScaleLoadingImageViewTarget</span><span class="params">(ImageView view, ImageView.ScaleType scaleType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(view);</span><br><span class="line">        <span class="comment">// loadingCenter()에서 받아온 scale</span></span><br><span class="line">        mLoadingScaleType = scaleType;</span><br><span class="line">        <span class="comment">// xml에서 정의해둔 scale</span></span><br><span class="line">        <span class="comment">// (따로 정의되지 않았다면 여기에 RequestOptions scaleType인 fitCenter가 들어옴</span></span><br><span class="line">        mReadyScaleType = view.getScaleType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadStarted</span><span class="params">(<span class="meta">@Nullable</span> Drawable placeholder)</span> </span>&#123;</span><br><span class="line">        ImageView imageView = getView();</span><br><span class="line">        imageView.setScaleType(mLoadingScaleType);</span><br><span class="line">        <span class="keyword">super</span>.onLoadStarted(placeholder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(<span class="meta">@Nullable</span> Drawable errorDrawable)</span> </span>&#123;</span><br><span class="line">        ImageView imageView = getView();</span><br><span class="line">        imageView.setScaleType(mLoadingScaleType);</span><br><span class="line">        <span class="keyword">super</span>.onLoadFailed(errorDrawable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(<span class="meta">@NonNull</span> Drawable resource, </span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Nullable</span> Transition&lt;? <span class="keyword">super</span> Drawable&gt; transition)</span> </span>&#123;</span><br><span class="line">        ImageView imageView = getView();</span><br><span class="line">imageView.setImageResource(<span class="number">0</span>); <span class="comment">// 로딩 이미지가 보여지고 있을 때 scaleType이 바뀌면서 이미지가 덜그럭 거리는 이슈 방어</span></span><br><span class="line">        imageView.setScaleType(mReadyScaleType);</span><br><span class="line">        <span class="keyword">super</span>.onResourceReady(resource, transition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ScaleLoadingImageViewTarget **loadingCenter**(ImageView imageView) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ScaleLoadingImageViewTarget(imageView, ImageView.ScaleType.CENTER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .listener(listener)</span><br><span class="line">    .apply(options)</span><br><span class="line">    .into(**ScaleLoadingImageViewTarget.loadingCenter**(imageView));</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/05/008-glide-v4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>구글 검색엔진 최적화(SEO;Search Engine Optimization) 적용</title>
      <link>https://dl137584.github.io/2022/02/04/007-blog-apply-seo/</link>
      <guid>https://dl137584.github.io/2022/02/04/007-blog-apply-seo/</guid>
      <pubDate>Fri, 04 Feb 2022 13:30:30 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;이카루스에서 세팅하는 방법 - &lt;a href=&quot;https://alleyful.github.io/2019/08/10/tools/hexo/hexo-guide-03/&quot;&gt;링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;구 이카루스에서 ejs를 사용하다가</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>이카루스에서 세팅하는 방법 - <a href="https://alleyful.github.io/2019/08/10/tools/hexo/hexo-guide-03/">링크</a></li></ul><p>구 이카루스에서 ejs를 사용하다가 jsx로 바뀌어 위의 방법이 통하지 않았음.(<a href="https://aaronryu.github.io/2021/02/02/how-to-migrate-hexo-and-icarus-to-the-newest-version/">링크</a>)</p><p><a href="https://chinsun9.github.io/2020/09/23/%EB%82%B4-github-blog-%EA%B8%80%EC%9D%B4-%EA%B5%AC%EA%B8%80-%EA%B2%80%EC%83%89%EC%97%90-%EB%82%98%EC%98%A4%EB%8A%94-%EB%B2%95/#%ED%8C%81">링크</a>에 따르면 구버전에 비해 React를 사용해 만든 기존 이카루스에서는 표준링크를 자동으로 생성하기 때문에 <code>hexo-auto-canonical</code>를 따로 설치하지 않아도 된다.(그런데 설치해버려서 npm uninstall 로 삭제.)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-autonofollow</span><br><span class="line">npm i hexo-generator-feed</span><br><span class="line">npm i hexo-generator-seo-friendly-sitemap</span><br><span class="line">npm i hexo-generator-robotstxt</span><br></pre></td></tr></table></figure><p>결국 설치하는 건 위의 4개.</p><h2 id="1-검색-엔진-등록-구글-서치-콘솔"><a href="#1-검색-엔진-등록-구글-서치-콘솔" class="headerlink" title="[1] 검색 엔진 등록: 구글 서치 콘솔"></a><strong>[1] 검색 엔진 등록: 구글 서치 콘솔</strong></h2><p>이 단락에서는 [사이트맵 생성]과 [색인 생성]방법을 알아볼 건데, 우선 규모가 작은 웹사이트의 경우 아래와 같이 <a href="https://developers.google.com/search/docs/advanced/sitemaps/overview?hl=ko">구글서치콘솔 가이드</a>에서 사이트맵이 필요하지 않을 수도 있다고 나와있다.</p><p><img src="/assets/images/007-01.png"></p><p>나는 아래에도 나와있지만 사이트맵 생성에 오류가 있어 일단 사이트맵 대신 페이지마다 [색인 생성]을 하는 방법으로 각 페이지를 구글검색에 걸리도록 하였다. (현재 페이지가 4개 정도밖에 없음)</p><p>그렇다고 사이트맵을 생성하지 말아야하는 것은 아니다.</p><p><img src="/assets/images/007-02.png"></p><h3 id="1-사이트맵-생성-아직도-안됨"><a href="#1-사이트맵-생성-아직도-안됨" class="headerlink" title="(1) 사이트맵 생성: 아직도 안됨"></a><strong>(1) 사이트맵 생성: 아직도 안됨</strong></h3><p><a href="https://search.google.com/search-console/welcome?utm_source=about-page">Google Search Console</a>에서 URL 접두어를 이용하여 도메인을 등록한다.</p><p><img src="/assets/images/007-03.png"></p><p>[계속]을 눌렀을 때 나오는 파일을 다운로드하여 [프로젝트]/public/ 에 해당 파일을 옮겨 넣는다. 그리고 배포 후 조금 기다리면 아래와 같이 초록색이 뜬다.</p><p><img src="/assets/images/007-04.png"></p><p>소유권이 확인되면 [속성으로 이동] 또는 왼쪽 위 URL 드롭다운을 클릭하여 Search Console을 이용할 수 있다.</p><p>지금은 검색 엔진을 사용하기 위해 사이트맵을 rss2.xml과 sitemap.xml을 등록해준다.</p><p><img src="/assets/images/007-05.png"></p><ul><li>“가져올 수 없음”에 관한 <a href="https://julynine2.tistory.com/entry/Google-Search-Console-Sitemap-couldnt-fetch">포스팅</a></li></ul><p>그런데 “가져올 수 없음”이라고 실패/성공도 아닌 것이 뜬다. 사이트맵 입력 시 슬래시를 붙여서 “/sitemap.xml”으로 하면 잘 된다는 말이 있어서 해보았으나 다르지 않음. 아마 현재 설연휴라서 이게 처리가 늦어지는 것으로 보고 일단 보류하고 다른 방법을 찾아보았다.</p><h3 id="2-색인-생성-1-2일-소요"><a href="#2-색인-생성-1-2일-소요" class="headerlink" title="(2) 색인 생성: 1-2일 소요"></a><strong>(2) 색인 생성: 1-2일 소요</strong></h3><blockquote><p>주의 &gt; 색인 생성은 일일 할당량(10개 아래, 정확하지 않음)이 있어 이를 초과하면 더이상 색인 생성을 요청할 수 없다.</p></blockquote><p>색인 생성 방법은 다음과 같다.</p><p><img src="/assets/images/007-06.png"></p><ul><li>참고: 구글 서치 콘솔에서 색인 생성하는 방법 <a href="https://julynine2.tistory.com/entry/%EA%B5%AC%EA%B8%80-%EC%84%9C%EC%B9%98-%EC%BD%98%EC%86%94Google-Search-Console%EC%97%90%EC%84%9C-%EC%83%89%EC%9D%B8-%EC%83%9D%EC%84%B1-%EC%9A%94%EC%B2%AD%ED%95%98%EA%B8%B0">링크</a></li></ul><p>상단 URL 검사란에 포스팅 주소(<a href="https://dl137584.github.io/2022/01/31/JCenter-%EC%A7%80%EC%9B%90%EC%A2%85%EB%A3%8C/">https://dl137584.github.io/2022/01/31/JCenter-지원종료/</a>)를 붙여넣고 아래 [색인 생성 요청]을 누른다.</p><p><img src="/assets/images/007-07.png"></p><p>요청이 완료되면 아래와 같은 문구가 뜬다.</p><p><img src="/assets/images/007-08.png"></p><p>사이드바 [색인생성범위]에서 아래 [유효]를 클릭하면 초록색으로 변하면서 그래프에도 유효 카운트가 표시되고 그 아래에 상세정보가 뜬다.</p><p><img src="/assets/images/007-09.png"></p><p><img src="/assets/images/007-10.png" alt="유효 색인 상세정보"></p><p>색인을 생성한 url을 확인할 수 있으나 여기서 삭제는 할 수 없어 보인다.(해당 페이지는 내가 md 파일명을 변경하여 주소가 변경되었는데도 그대로 남아있다.)</p><p><img src="/assets/images/007-11.png"></p><h3 id="3-색인-생성된-url-삭제-6시간-내로-됨"><a href="#3-색인-생성된-url-삭제-6시간-내로-됨" class="headerlink" title="(3) 색인 생성된 url 삭제: 6시간 내로 됨"></a><strong>(3) 색인 생성된 url 삭제: 6시간 내로 됨</strong></h3><p>url이 바뀌어 올렸던 것을 삭제해야 한다면 사이드바의 [삭제]로 이동한다.</p><p><img src="/assets/images/007-12.png"></p><p>그리고[임시 삭제 항목]&gt;[새 요청]에서 삭제하고자하는 url을 기입하여 요청할 수 있다.</p><p><img src="/assets/images/007-13.png" alt="1"></p><p><img src="/assets/images/007-14.png" alt="2"></p><p><img src="/assets/images/007-15.png" alt="3"></p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Etc/">Etc</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/04/007-blog-apply-seo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>기술 블로그 만들기 - Github-pages, Hexo</title>
      <link>https://dl137584.github.io/2022/02/04/006-create-personal-blog-with-githubpages-and-hexo/</link>
      <guid>https://dl137584.github.io/2022/02/04/006-create-personal-blog-with-githubpages-and-hexo/</guid>
      <pubDate>Fri, 04 Feb 2022 13:04:27 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;1-노션을-사용하는-것에-대한-불편함&quot;&gt;&lt;a href=&quot;#1-노션을-사용하는-것에-대한-불편함&quot; class=&quot;headerlink&quot; title=&quot;1. 노션을 사용하는 것에 대한 불편함&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. 노션을 사용하는 것에 대한</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-노션을-사용하는-것에-대한-불편함"><a href="#1-노션을-사용하는-것에-대한-불편함" class="headerlink" title="1. 노션을 사용하는 것에 대한 불편함"></a><strong>1. 노션을 사용하는 것에 대한 불편함</strong></h1><ul><li>참고: <a href="https://www.cv-learn.com/20201124-Notion-blog-to-Github-blog/">링크</a></li></ul><h2 id="1-노션의-단점"><a href="#1-노션의-단점" class="headerlink" title="(1) 노션의 단점"></a><strong>(1) 노션의 단점</strong></h2><ul><li><p>읽기 어려운 URL + 제목을 수정하면 같이 변경되는 URL</p><p>  → 해보니 Hexo도 비슷한 이슈가 있음. 하지만 노션이 공유하기 어려운 것도 사실임.. 블로그로서 만들기가 어려움.</p></li><li><p>페이지 로딩이 느림</p><p>  → Hexo는 기본적으로 정적사이트를 생성해주기 때문에 이 부분은 해결이 됨.</p><p>  정적 웹사이트란, 서버에서 배포하기 전까지는 이미 올려진 데이터만을 보여주기 때문에 페이지 내에서 글 수정이 불가능하며 그렇기 때문에 가볍다는 장점이 있다. 페이지를 로드한 후에는 서버와 통신할 필요가 없으니까.</p></li></ul><p>덧붙여,</p><ul><li><p>목차를 한 눈에 볼 수 없음.</p><p>  → Hexo(이카루스 테마)로 해보니 목차(toc)를 노출시킬 수 있게됨. 사이드바에 노출하여 사이드바를 고정(sticky)시켜두니 정말 편해졌다.</p><p>  <img src="/assets/images/006-01.png" alt="목차(toc)"></p></li><li><p>목차를 만들었을 때 그 목차 지점으로 가는 URL을 생성할 수 없음.</p><p>  → 목차(toc)를 노출시킬 경우 URL에 앵커(#)으로 어떤 제목으로 가는 링크가 제공됨.</p><p>  <a href="https://dl137584.github.io/2022/02/01/004-the-way-bitmap-gc-in-glide/#Glide%EB%8A%94-%EB%B9%84%ED%8A%B8%EB%A7%B5%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B3%A0-%EC%9E%88%EB%8A%94%EA%B0%80">https://dl137584.github.io/2022/02/01/004-the-way-bitmap-gc-in-glide/#Glide는-비트맵의-메모리를-어떻게-관리하고-있는가</a></p></li><li><p>방문자 통계를 내기 어려움.</p><p>  → Google Analytics 사용하여 통계낼 수 있게 됨.</p></li></ul><h2 id="2-대체-플랫폼"><a href="#2-대체-플랫폼" class="headerlink" title="(2) 대체 플랫폼"></a><strong>(2) 대체 플랫폼</strong></h2><ul><li><p>Notion + Cloudflare</p></li><li><p>Tistory</p></li><li><p>Velog</p></li><li><p>Github-pages</p><p>  → 내가 지금까지 해본 건 Tistory/Notion(오직 노션)/Github(레포지토리를 DB 삼아 md 파일 만듦. 사이트를 따로 생성하지 않음.)/Jekyll(페이지 껍데기만 만듦) 였다.</p><p>  그 중 고유한 Url을 생성할 수 있고 디자인을 코드단으로 만질 수 있는 Jekyll이 제일 재밌었는데 그래서 Github-pages를 사용하기로 함.</p><p>  단, Jekyll은 제외하고.(왠지 한 번 만들고 실패해서 손이 안 감.)</p></li></ul><h2 id="3-Github-pages-적용에-필요한-것"><a href="#3-Github-pages-적용에-필요한-것" class="headerlink" title="(3) Github-pages 적용에 필요한 것"></a><strong>(3) <a href="https://pages.github.com/">Github-pages</a> 적용에 필요한 것</strong></h2><ul><li>정적 사이트 생성기(Static Site Generator): <a href="https://hualiceov.github.io/">Jekyll</a>(ruby), Hugo(Go), Hexo(Node.js), Gatsby 등<ul><li>정적 웹 사이트 생성기: DB 통신 등을 해서 서버에서 HTML 페이지를 실시간으로 만들던 동적 사이트 방식이 아닌, 완성된 HTML 파일을 바로 전달.</li></ul></li></ul><p>고민은 길지 않았다. 서버 문외한인 내가 가장 많이 들어본 Node.js 기반 Hexo를 사용하기로 결정했다.</p><h2 id="4-Hexo-적용-후-불편했던-점"><a href="#4-Hexo-적용-후-불편했던-점" class="headerlink" title="(4) Hexo 적용 후 불편했던 점"></a><strong>(4) Hexo 적용 후 불편했던 점</strong></h2><p>하는 김에 hexo를 이용하면서 불편했던 점도 적어봄. 위에 나열된 노션의 단점은 모두 커버되었으나 일부 사용하기 어려운 점이 있었다.</p><ul><li><p>페이지를 업데이트하려면 코드를 수정해서 배포해야하기 때문에 바로 수정된 걸 볼 수 없다.(hexo에서 제공하는 draft 기능을 사용하는 데에도 동일한 문제있음)</p><p>  → 노션의 이용을 병행하여 draft(초안)은 노션에 작성하기로 함. (일단 나는 편해짐.)</p></li><li><p>여러 PC에서 배포를 할 수 있는 수월한 방법을 찾지 못함.</p><ul><li>방법(<a href="https://chinsun9.github.io/2020/09/18/%EC%97%AC%EB%9F%AC-%EC%BB%B4%ED%93%A8%ED%84%B0%EC%97%90%EC%84%9C-%EB%B8%94%EB%A1%9C%EA%B9%85%ED%95%98%EA%B8%B0/">링크</a>)은 찾았는데 기존 <code>.deploy_git</code>을 다른 PC에 동기화해줘야(동일하게 옮겨줘야) 하는 번거로움때문에 시도 안 하는 중..</li><li>Github에 올린 코드를 받아서 hexo-cli만 설치하여 올리려고 보니 hexo server 명령어가 기능을 잘 안 하고(기존 작업하던 PC OS는 윈도우, 새로 시도한 PC는 맥), 커밋 안 한 다른 PC에서 수정하던 게 마음에 걸려서 골치아파지더라.</li></ul></li><li><p>목차 생성 시 h1 아래에 h2가 아닌 h3으로 하위헤더를 바로 생성할 경우, 아래 이미지와 같이 일부가 생략된다.</p><p>  <img src="/assets/images/006-03.png"></p></li></ul><h2 id="5-노션의-장점"><a href="#5-노션의-장점" class="headerlink" title="(5) 노션의 장점"></a><strong>(5) 노션의 장점</strong></h2><p>노션의 이용을 병행하려고 보니 장점을 빼놓을 수가 없다.</p><ul><li><p>접근성이 좋다. 웹, 앱 어디서든 편집할 수 있다.</p></li><li><p>동기화가 잘 된다. 엄청 잘 된다! 처음 노션을 고른 이유가 동기화였다.</p></li><li><p>편리한 단축키. ctrl + x로 한 행을 삭제하거나 슬래시(/)로 페이지를 만들 수 있게 하거나 여러가지로 잘 사용중.</p></li><li><p>편집이 편하고 예쁘다! (잘 쓰진 않지만 수정된 내용은 히스토리로 남아서 혹시모를 상황에 대비가 가능하다.</p><ul><li>드래그앤드랍으로 행 옮기거나 블록처리 가능한 점.</li><li>어디서든 특정 부분을 하이라이트 하기 좋음. md는 코드 내에서는 볼드체가 불가능하거나 불편한 점이 있음. 이것도 따로 방법을 찾아봐야 할듯.</li><li>폰트가 읽기 좋음. md는 바꾸기 귀찮아서 디폴트로 사용중인데 영어는 거의 잘 나오는데 PC에서 한국어가 픽셀 깨지듯이(예민) 나옴.</li><li>헤더를 만들었을 때 딱 읽기 좋은 형태로(상하단 여백, 텍스트 강조) 노출됨. md는 가끔 h1 쓰는데도 읽으면서 가독성 떨어져서 일일이 bold 넣어줘야함.</li></ul></li></ul><h1 id="2-Hexo-환경설정"><a href="#2-Hexo-환경설정" class="headerlink" title="2. Hexo 환경설정"></a><strong>2. Hexo 환경설정</strong></h1><ul><li>Hexo Guide <a href="https://hexo.io/ko/docs/">link</a></li></ul><h2 id="1-node-js-및-npm-버전-확인"><a href="#1-node-js-및-npm-버전-확인" class="headerlink" title="(1) node.js 및 npm 버전 확인"></a><strong>(1) node.js 및 npm 버전 확인</strong></h2><p>내 경우 <a href="https://www.notion.so/React-js-55af5c6144744069affde55518925452">React.js 시작하기</a> 에서 node.js와 npm이 설치된 상태여서 Hexo에 필요한 버전만 확인했다.</p><ul><li>Mac에서 node.js 및 npm설치  homebrew는 Mac에서 패키지 관리를 용이하게 하기 위한 툴이다. 이걸 먼저 설치.  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>  그리고 node.js를 설치하면 npm도 함께 설치되기 때문에 아래 명령어로 node.js를 설치.  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; node -v</span><br><span class="line">v14.15.5</span><br><span class="line">&gt; npm -v</span><br><span class="line">6.14.11</span><br></pre></td></tr></table></figure><p>Hexo를 사용하기 위해서는 node.js는 v12이상을 권하고 있다.(최소 v10.13)</p><h2 id="2-Hexo-설치"><a href="#2-Hexo-설치" class="headerlink" title="(2) Hexo 설치"></a><strong>(2) Hexo 설치</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="3-Hexo-초기화"><a href="#3-Hexo-초기화" class="headerlink" title="(3) Hexo 초기화"></a><strong>(3) Hexo 초기화</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; hexo init testBlog</span><br></pre></td></tr></table></figure><p>위 명령어로 초기화하면 아래와 같은 파일구조로 기본 설정파일들이 생성된다.</p><h2 id="4-파일구조"><a href="#4-파일구조" class="headerlink" title="(4) 파일구조"></a><strong>(4) 파일구조</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><ul><li>_config.yml: 환경설정(사이트 설정;웹사이트 제목, URL 설정, include 설정 등 가능)</li><li>package.json: 데이터 파일. EJS, Stylus, Markdown 렌더러들은 기본으로 설치됨.</li><li>scaffolds: 새 포스트/페이지를 생성했을 때 기본으로 만들어질 레이아웃을 정의.</li></ul><h2 id="5-명령어"><a href="#5-명령어" class="headerlink" title="(5) 명령어"></a><strong>(5) 명령어</strong></h2><ul><li>서버 실행: <code>hexo s</code> (server)</li><li>정적파일 생성: <code>hexo g</code> (generate)</li><li>배포: <code>hexo d</code> (deploy)</li><li>생성 및 배포: <code>hexo d -g</code> (hexo deploy -generate)</li><li>클린: <code>hexo c</code> (clean)</li></ul><h1 id="3-커스텀"><a href="#3-커스텀" class="headerlink" title="3. 커스텀"></a><strong>3. 커스텀</strong></h1><h2 id="1-사이드바"><a href="#1-사이드바" class="headerlink" title="(1) 사이드바"></a><strong>(1) 사이드바</strong></h2><p>_config.icarus.yml 편집</p><h1 id="4-포스팅-이카루스-테마-사용"><a href="#4-포스팅-이카루스-테마-사용" class="headerlink" title="4. 포스팅 - 이카루스 테마 사용"></a><strong>4. 포스팅 - 이카루스 테마 사용</strong></h1><ul><li>밍피디 <a href="https://mingpd.github.io/2019/04/14/github-blog-with-hexo-2/">링크</a></li></ul><h2 id="1-새-포스트-생성"><a href="#1-새-포스트-생성" class="headerlink" title="(1) 새 포스트 생성"></a><strong>(1) 새 포스트 생성</strong></h2><p>흔히 알고 있는 하나의 포스팅을 쓸 때 사용한다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;title&quot;</span><br></pre></td></tr></table></figure><h2 id="2-이미지-폴더-생성"><a href="#2-이미지-폴더-생성" class="headerlink" title="(2) 이미지 폴더 생성"></a><strong>(2) 이미지 폴더 생성</strong></h2><blockquote><p>주의 &gt; 파일명은 대소구분을 한다. “png”와 “PNG”는 다르다.</p></blockquote><p><code>public/</code>에 <code>assets/images</code> 폴더를 만들어 그 아래에 이미지 파일을 넣는다.</p><p>이렇게 되면 <code>![](/assets/images/image01.png)</code>와 같이 접근할 수 있다.</p><blockquote><p>주의 &gt; <code>_config.yml</code>에서 post_asset_folder 속성을 true로 하고 생성되는 폴더에 이미지 파일을 넣는 방식은 <code>![](./image01.png)</code>처럼 상대경로를 사용할 수 있다.</p><p>그런데 테스트하다보니 포스팅을 클릭하여 나타난 페이지에서는 정상적으로 이미지가 노출되었으나 사이드메뉴의 카테고리 중 하나를 클릭했을 때 페이지에서 상대경로가 맞지 않아 이미지가 깨지는 현상이 발견되었다.</p><p>따라서 icarus 테마를 사용하면 절대경로를 사용해야할 것으로 보인다.</p></blockquote><h2 id="3-새-페이지-생성"><a href="#3-새-페이지-생성" class="headerlink" title="(3) 새 페이지 생성"></a><strong>(3) 새 페이지 생성</strong></h2><p>페이지는 생성할 경우 해당 페이지명으로 된 폴더와 하위에 index.html 파일이 생성되며 포스트와 다르게 상단 탭에 연결할 수 있는 것으로 보임. 따라서 category와 tag는 사용할 수 없고 about처럼 상단에 추가할 수 있다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;page&quot;</span><br></pre></td></tr></table></figure><h2 id="4-Scaffolds-머리말-속성"><a href="#4-Scaffolds-머리말-속성" class="headerlink" title="(4) Scaffolds(머리말) 속성"></a><strong>(4) Scaffolds(머리말) 속성</strong></h2><p><img src="/assets/images/006-02.png"></p><ul><li>title  대괄호가 잘 안 들어가서 이스케이프문자를 넣어야하나했는데 그냥 큰따옴표로 묶어서 해결해버림.</li><li>date  내가 지정해주지 않아도 자동으로 DB에 발행일이 들어가는가 보더라. 딱히 그럴 일이 없어서 이게 수정이 되는지는 확인 안해봄.</li><li>categories, tags  categories, tags는 여러개 지정할 수 있는데, 다음과 같이 두 가지 방법이 있다.  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - ctg1</span><br><span class="line">  - ctg2</span><br><span class="line">tags: [tag1, tag2]</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-toc-띄우기"><a href="#5-toc-띄우기" class="headerlink" title="(5) toc 띄우기"></a><strong>(5) toc 띄우기</strong></h2><p>이카루스 default 테마에서는 toc 속성이 false로 되어있는지 처음에는 나타나지 않으나 아래와 같이 true로 명시해주면 바로 [카탈로그]라고 뜬다. 사이드에 위치하는데 position 옵션에서 left/right를 지정할 수 있다.</p><p>창의 너비가 작아지면 우선적으로 보이는게 left라서 나는 left로 해두고 left sidebar의 sticky 옵션을 true로 바꾸었다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">toc: true</span><br><span class="line">widgets:</span><br><span class="line">-</span><br><span class="line">position: left</span><br><span class="line">type: toc</span><br><span class="line">index: true</span><br><span class="line">collapsed: true</span><br><span class="line">depth: 3</span><br></pre></td></tr></table></figure><h2 id="6-로컬-테스트"><a href="#6-로컬-테스트" class="headerlink" title="(6) 로컬 테스트"></a><strong>(6) 로컬 테스트</strong></h2><p><a href="http://localhost:4000/">http://localhost:4000/</a>에서 확인한다.</p><p>로컬 테스트는 배포 전 로컬의 파일 변경만으로 확인할 수 있는데, 아래 케이스에 해당한다.</p><ul><li>configuration이 변경된 경우<ul><li>서버를 내렸다가(<code>ctrl + C</code>) 다시 올려야(<code>hexo s</code>) 적용이 된다.</li></ul></li></ul><p>로컬에서 테스트가 끝나면 아래 명령어로 배포 후 1-2분 후 적용되었는지 <a href="https://dl137584.github.io/">https://dl137584.github.io/</a>에서 확인할 수 있다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h2 id="7-about-페이지-생성"><a href="#7-about-페이지-생성" class="headerlink" title="(7) about 페이지 생성"></a><strong>(7) about 페이지 생성</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>(public에 about 폴더를 만들고 별짓을 다했는데 그냥 new page하면 되는 거였어..)</p><p>page 명이 “about”인 이유는 <code>_config.icarus.yml</code>에서 navbar:menu:About에 설정한 이름을 따라간 것.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Page top navigation bar configurations</span><br><span class="line">navbar:</span><br><span class="line">    # Navigation menu items</span><br><span class="line">    menu:</span><br><span class="line">        Home: /</span><br><span class="line">        Archives: /archives</span><br><span class="line">        # Categories: /categories</span><br><span class="line">        # Tags: /tags</span><br><span class="line">        About: /about</span><br></pre></td></tr></table></figure><h2 id="8-초안-작성"><a href="#8-초안-작성" class="headerlink" title="(8) 초안 작성"></a><strong>(8) 초안 작성</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft title</span><br></pre></td></tr></table></figure><p>이렇게 생성된 포스트는 <code>_posts/</code>가 아닌 <code>_draft/</code>에 위치하게 된다. 작성은 했는데 바로 배포하고 싶을 때 md 파일을 _draft 폴더로 옮기면 배포해도 포스팅이 노출되지 않기 때문에 편하게 쓸 수 있다.</p><p>만약 테스트 시 draft 파일도 보이도록 하고자한다면 서버를 올릴 때 –draft 옵션을 붙여주면 된다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Etc/">Etc</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/04/006-create-personal-blog-with-githubpages-and-hexo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[번역: Async Basics with Rust] 동시성 VS 병렬성(Concurrent vs Parallel)</title>
      <link>https://dl137584.github.io/2022/02/04/005-the-difference-between-concurrency-and-parallelism-in-rust/</link>
      <guid>https://dl137584.github.io/2022/02/04/005-the-difference-between-concurrency-and-parallelism-in-rust/</guid>
      <pubDate>Fri, 04 Feb 2022 12:29:58 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;이 포스팅은 &lt;a href=&quot;https://cfsamson.github.io/book-exploring-async-basics/introduction.html&quot;&gt;Async Basics with Rust&lt;/a&gt;의 글을 번역한</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>이 포스팅은 <a href="https://cfsamson.github.io/book-exploring-async-basics/introduction.html">Async Basics with Rust</a>의 글을 번역한 것입니다. 오역, 의역, 생략이 있으니 감안하여 읽어주십시오.</p></blockquote><h3 id="동시성과-병렬성의-차이는-무엇인가"><a href="#동시성과-병렬성의-차이는-무엇인가" class="headerlink" title="동시성과 병렬성의 차이는 무엇인가?"></a><strong>동시성과 병렬성의 차이는 무엇인가?</strong></h3><p>이 주제에 대해 곧바로 동시성이 무엇인지 정의함으로써 파헤쳐보자. 병렬 상의 동시성과 쉽게 헷갈릴 수 있어서 시작부터 두 가지를 명확히 구분해둘 것이다.</p><p><code>동시 실행(Concurrency)이란 동시에 많은 것을 **처리하는** 걸 말한다.</code></p><p><code>병행(Parallelism)이란 동시에 많은 일을 **수행하는** 걸 말한다.</code></p><p>우리는 <code>멀티태스킹</code>을 동시에 여러 개의 작업을 진행한다는 개념으로 쓴다. 이러한 다중 작업에는 두 가지 방법이 있다.</p><p>하나는 작업을 동시에(;함께; 겸임) 진행하지만, 실제 같은 시간에 하지는 않는 것이며,</p><p><img src="/assets/images/005-01.png" alt="그림1 - Concurrent"></p><p>또 다른 방법은 병렬적으로 실제 같은 시간에 여러 작업을 진행하는 것이다.</p><p><img src="/assets/images/005-02.png" alt="그림2 - Parallel"></p><h3 id="몇-가지를-정의해보자"><a href="#몇-가지를-정의해보자" class="headerlink" title="몇 가지를 정의해보자."></a><strong>몇 가지를 정의해보자.</strong></h3><ul><li><p>리소스(Resource)</p><p>  작업을 진행하는 데에 필요한 것. 리소스는 제한되어있다.</p><p>  한 예로 CPU의 시간이나 메모리를 들 수 있다.</p></li><li><p>작업(Task)</p><p>  진행하면서 어떤 종류의 리소스를 필요로하는 기능 집합(A set of operations)이다.</p><p>  하나의 작업은 몇 개의 sub-operations로 구성된다.</p></li><li><p>병렬성(Parallel)</p><p>  <strong>정확히 같은 시간</strong>에 독립적으로 일어나는 일.</p></li><li><p>동시성(Concurrent)</p><p>  동시에 <code>진행중(in progress)</code>인 작업들을 말하지만, 반드시 같은 시간에 진행되는 것은 아니다.</p><p>  이는 중요한 차이점이다. 만약 두 작업이 동시에 실행됐지만 병렬적이지는 않을 때, 그 작업들은 stop(멈춤)하거나 resume(재시작)할 수 있어야 한다.</p></li></ul><blockquote><p>주석 &gt; 왜냐하면 병렬적이지 않은 것은 위의 [그림2 - Parallel]과 같이 한 작업이 계속해서 CPU를 붙잡고 항상 <code>진행중</code> 상태에 있지 않기 때문이다. 멈추고 재시작하기를 반복한다.</p></blockquote><p>따라서 동시 실행 속성을 가지고 있다면 interruptable(끼어들 수 있는)하다고 말한다.</p><h3 id="내가-사용하는-심상모형-mental-model"><a href="#내가-사용하는-심상모형-mental-model" class="headerlink" title="내가 사용하는 심상모형(mental model)"></a><strong>내가 사용하는 심상모형(mental model)</strong></h3><p>나는 우리가 병렬성이나 동시성을 가진 프로그램을 만들 떄 어려워하는 이유가 일상에서 일어나는 사건들을 모델링하는 방법에서 기인한다고 생각한다. 우리는 대게 잘못된 직관으로 대략적인 정의를 내리는 경향이 있기 때문이다.</p><p><code>concurrent의 사전적 정의는 parallel과의 차이를 인지하는 데에 도움을 주지 않는다.</code></p><p>나로 말할 것 같으면, 병렬성과 동시성의 차이점이 <strong>왜</strong> 필요한지를 떠올린 게 시작이었다.</p><p>이들이 필요한 <strong>이유</strong>는 리소스의 활용도와 효율성과 관련된 모든 것에 있다.</p><p><code>효율성이란 어떤 일을 하면서, 또는 바라는 결과를 내는 데에 쓰이는 자원, 에너지, 노력, 돈, 그리고 시간을 낭비하지 않는 (대게 측정할 수 있는) 능력을 말한다.</code></p><ul><li><p>병행(Parallelism)</p><p>  작업을 수행하면서 리소스를 계속해서 늘린다. 이는 효율성을 고려하지 않는다.</p></li><li><p>동시 실행(Concurrency)</p><p>  효율성과 리소스 활용도 모두를 고려한다. 동시 진행은 절대 단 하나의 작업을 더 빠르게 만들 수는 없다. 대신 리소스를 더 효율적으로 운용하고, 그럼으로써 작업들의 집합(a set of tasks)이 더 빠르게 끝나도록 한다.</p></li></ul><h3 id="경제학에서-몇-가지-유사점을-찾아보자"><a href="#경제학에서-몇-가지-유사점을-찾아보자" class="headerlink" title="경제학에서 몇 가지 유사점을 찾아보자."></a><strong>경제학에서 몇 가지 유사점을 찾아보자.</strong></h3><p>상품 제조 사업에서는 린(LEAN)이 대표적이다.</p><p>린 이라는 기술을 사용함에 있어 가장 이점은 <strong>기다리는 시간과 가치없는 작업을 제거하는 것</strong>이다.</p><p><code>프로그래밍에서 말할 것 같으면, blocking과 polling을 피한다고 말할 수 있다.</code></p><h3 id="동시성-및-I-O와의-관계"><a href="#동시성-및-I-O와의-관계" class="headerlink" title="동시성 및 I/O와의 관계"></a><strong>동시성 및 I/O와의 관계</strong></h3><p>지금까지 말한 걸 보면, 비동기 코드를 작성하는 데 리소스를 최적으로 사용할 때야 비로소 의미가 있다.</p><p>프로그램을 짤 때 동시성이 도움이 되지 않는 경우도 있다. 병렬로 작업할 파트들로 나눌 수 있다면 더 많은 리소스를 할당하는 식으로 문제를 해결할 수 있다.</p><p><strong>동시성에 관한 두 가지 주요 이용 사례가 있다:</strong></p><ol><li>입출력이 수행되는 중에 일부 외부 이벤트가 발생할 때까지 기다리는 상황.</li><li>여러 가지에 집중해야할 때 한 가지에만 너무 오래 기다리는 걸 방지해야하는 상황.</li></ol><p>첫 번째는 기본적인 입출력 예제이다: 당신이 한 가지 작업을 진행하기 전에 네트워크 호출이나 DB 쿼리 등이 발생할 때까지 기다려야하는 상황이다. 그러나 지금 다른 할 일도 많기 때문에 다른 작업을 계속하다가 작업(네트워크 호출 등)이 준비가 됐는지 정기적으로 확인하거나 준비가 됐을 떄 알림을 받아야 한다.</p><p>두 번째는 UI 단에서 자주 일어나는 일이다. 당신이 한 개의 코어만 가지고 있다고 하자. 그럼 CPU에서 집중적으로 작업을 수행하고 있는데 대체 어떤 UI가 무반응을 피할 수 있을까?</p><p>음, 당신이 지금 하고 있는 작업이 뭐든간에 <strong>멈추고</strong>, “UI 갱신”을 하고, 그 후에 하려고 했던 일을 <strong>재시작</strong>할 수도 있다. 이렇게하면 작업을 1초에 60번 중지/재시작 해야한다. 그러면 당신은 결국 대략 60Hz의 새로고침 빈도를 반응하는 UI를 가지게 될 것이다.</p><h3 id="OS에서-제공하는-스레드에-관하여"><a href="#OS에서-제공하는-스레드에-관하여" class="headerlink" title="OS에서 제공하는 스레드에 관하여"></a><strong>OS에서 제공하는 스레드에 관하여</strong></h3><p>I/O 처리 전략에 관해 이야기하면서 스레드에 대해 좀 더 다룰 거지만 여기서도 언급하겠다. OS 스레드를 사용할 때 한 가지 문제는 코어에 매핑되는 것처럼 보인다는 것이다. 대부분의 운영 체제가 스레드 수가 코어 수와 같을 때까지 하나의 스레드를 하나의 코어에 매핑하려고 시도하더라도 이게 반드시 올바른 심상 모델은 아니다.</p><p>코어보다 많은 스레드를 생성하면, OS는 스레드간에 스위치를 수행하고 각 스레드에 실행시간을 제공하는 스케줄러를 사용하여 각 스레드를 동시에 진행하도록 할 것이다. 그리고 시스템에서 프로그램은 겨우 하나만 실행되지 않는다는 걸 명심해야한다. 다른 프로그램도 여러 개의 스레드를 생성할 수 있고, 이는 CPU에 있는 코어보다 더 많은 스레드가 있음을 의미한다.</p><p>그러므로, 스레드는 병렬적으로 작업을 수행하도록 하는 수단이 된다. 이는 동시성을 달성하는 수단이기도 하다.</p><p>이건 동시성에 관한 마지막 파트로 이어진다. 이제 일종의 참조 프레임을 정의해야 한다.</p><h3 id="참조-프레임-바꾸기"><a href="#참조-프레임-바꾸기" class="headerlink" title="참조 프레임 바꾸기"></a><strong>참조 프레임 바꾸기</strong></h3><p>당신의 관점에서 봤을 때 완벽하게 동기적인 코드를 짰다고 하자. 잠시 멈춰서 운영 체제 관점에서 이게 어떻게 보일지 생각해봐라.</p><p>운영 체제는 당신의 코드를 처음부터 끝까지 실행하지 않을 수 있다. 매순간 프로세스를 멈추고 다시 시작하길 반복할 것이다. CPU는 당신이 보기에 이 작업에만 집중하고 있다고 생각하는 동안에도 멈추고 일부 입력을 처리하고 있을지도 모른다.</p><p>그러니 동기적 실행은 그저 환상이다. 하지만 프로그래머로서 당신의 관점에서, 그렇지만도 않다. 이게 요점이다:</p><p><strong>다른 맥락 없이 동시성을 말할 때, 당신은 프로그래머이며 당신의 코드는 참조 프레임이 된다. 만약 이를 염두에 두지 않고 동시성에 대해 이해하려한다면 혼란스러울 수 있다.</strong></p><p>즉, 참조 프레임을 염두에 둬야 한다.</p><p>아직 복잡하게 들릴 수 있다. 이후 비동기 코드와 함께 작업하면서 이를 계속 상기해낸다면 복잡함은 점점 덜게 될 것이라 약속한다.</p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Translation/">Translation</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/04/005-the-difference-between-concurrency-and-parallelism-in-rust/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] Glide에서 비트맵 이미지가 GC되는 과정</title>
      <link>https://dl137584.github.io/2022/02/01/004-the-way-bitmap-gc-in-glide/</link>
      <guid>https://dl137584.github.io/2022/02/01/004-the-way-bitmap-gc-in-glide/</guid>
      <pubDate>Tue, 01 Feb 2022 08:26:47 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;p&gt;위의 공식 문서에서 나와있는 바와 같이 기본적으로 Glide로 비트맵을 관리하는 걸 추천하고 있다.&lt;/p&gt;
&lt;p&gt;&lt;img sr</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>위의 공식 문서에서 나와있는 바와 같이 기본적으로 Glide로 비트맵을 관리하는 걸 추천하고 있다.</p><p><img src="/assets/images/004-01.png"></p><p>이를 관리해줘야 하는 이유는 다음과 같다.</p><blockquote><p>앱에서 대량의 비트맵 데이터를 표시하면 OutOfMemoryError 오류가 발생할 수 있습니다.</p></blockquote><p>OutOfMemory 오류를 방지하기 위하여 안드로이드에서는 <a href="https://developer.android.com/reference/android/graphics/Bitmap?hl=ko#recycle()">recycle()</a> 기능을 제공하는데, 이 메소드를 실행하면 비트맵에 사용한 메모리를 회수할 수 있다. 즉, 이 메소드를 호출함으로써 해당 비트맵은 GC의 대상이 된다. 당연히 해당 비트맵을 더이상 사용하지 않을 거라고 확정된 시점에 호출해야한다.</p><h1 id="Glide는-비트맵의-메모리를-어떻게-관리하고-있는가"><a href="#Glide는-비트맵의-메모리를-어떻게-관리하고-있는가" class="headerlink" title="Glide는 비트맵의 메모리를 어떻게 관리하고 있는가?"></a>Glide는 비트맵의 메모리를 어떻게 관리하고 있는가?</h1><p>위와 같은 방법으로 오류를 해결하긴 했으나 정확히 Glide에서 Bitmap의 메모리 관리를 어떻게 하는지 감이 안 잡혔더랬다. 그래서 참고삼아 다음 내용을 같이 살펴보면 좋을 것 같다.</p><p>잘 살펴보면 위의 오류 내용을 담은 스샷에서 LruResourceCache 와 같은 단어를 볼 수 있다. <a href="https://www.notion.so/vs-afbdf4b7739647969997e16fd79e7507">메모리 캐시 vs 디스크 캐시</a> 의 내용에 따르면 <code>비트맵 캐싱은 LruCache를 사용하는 대표적인 예</code>다. 여기서 힌트를 얻어서 Glide를 적용하면서 설정했던 BitmapPool 사이즈 디폴트값을 보자. 관련 코드는 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 비트맵 풀: The default size is based on the screen size and density of the device</span></span><br><span class="line"><span class="keyword">int</span> bitmapPoolSizeBytes = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">30</span>; <span class="comment">// 30mb</span></span><br><span class="line">builder.setBitmapPool(<span class="keyword">new</span> LruBitmapPool(bitmapPoolSizeBytes));</span><br></pre></td></tr></table></figure><p>BitmapPool 사이즈는 단말의 스크린사이즈와 density 값에 따라 달라진다고 나와있다.</p><h1 id="Glide에서-비트맵의-라이프사이클-링크"><a href="#Glide에서-비트맵의-라이프사이클-링크" class="headerlink" title="Glide에서 비트맵의 라이프사이클 링크"></a>Glide에서 비트맵의 라이프사이클 <a href="https://github.com/bumptech/glide/issues/483#issuecomment-108193950">링크</a></h1><p>Glide에서 비트맵을 관리하는 데에 있어 일반적인 생명주기는 다음과 같다.</p><p><strong>InputStream -&gt; Bitmap -&gt; View -&gt; Memory Cache -&gt; Bitmap Pool -&gt; Recycle</strong></p><h2 id="해당-링크-해석본"><a href="#해당-링크-해석본" class="headerlink" title="해당 링크 해석본"></a>해당 링크 해석본</h2><p>비트맵은 메모리 캐시 또는 BitmapPool에서 View(또는 target) 및 Loop로 이동할 수도 있습니다. 디코딩 파이프 라인 (예 : 변환을 통해) 중에 리소스를 수동으로 재활용하는 경우 비트맵이 표시되지 않고 recycled state가 될 수도 있습니다. 그렇지 않으면 비트맵이 크기 제약으로 인해 제거될 때 메모리 캐시에서 BitmapPool로, BitmapPool에서 recycled state로 이동합니다.</p><p>“Cannot obtain size for recycled Bitmap” 오류는 Recycle state에 도달한 비트맵을 그리려고 할 때 발생합니다. 결코 발생해서는 안되지만 다음과 같은 몇 가지 시나리오에서 발생할 수 있습니다.</p><ol><li><p>변환 중에 디코딩 프로세스 중에 비트맵을 수동으로 recycle할 경우</p><p> 이 원인은 일반적이지 않은 브랜치에서 커스텀 변환을 하지 않는 한 이런 상황을 꽤 자주 볼 수 있습니다.</p></li><li><p>디코딩 프로세스 중, 변환 중에 두 번 이상 Pool에 비트맵을 반환한 경우</p><p> 이 경우 문제의 원인을 파악하기 쉽습니다. 비트맵이 Pool에서 제거되지 않고 Pool에 여러 번 추가되면 다른 이미지가 동시에 표시되어, 두 개의 이미지 중 하나는 올바르게 표시되고 다른 하나는 잘못 표시 될 수 있습니다. 게다가 다른 뷰에서 참조하는 동안 동시에 recycle 될 수도 있습니다.</p></li><li><p>onLoadCleared가 호출된 후에도 계속 리소스를 참조하거나, 또는 해당 Target이 지워진 후 Target에 로드된 리소스를 참조한 경우</p><p> 커스텀 target을 사용하는 경우 발생할 수 있습니다.</p></li></ol><p>안타깝게도 비트맵을 추적하기 위해 수동 참조 계산을 수행해야하므로 이러한 종류의 버그를 추적하는 것이 매우 어려울 수 있습니다.<br>BitmapPool의 크기를 크게 줄이거나 BitmapPoolAdapter를 사용하여 충돌이 더 자주 발생하는지 확인하십시오. 메모리 캐시의 크기를 줄일 수도 있습니다. 두 경우 모두 파이프 라인의 길이를 줄입니다. 이는 Bitmap이 Recycled state에 더 빨리 도달하여 오류가 더 자주 발생할 수 있음을 의미합니다. 또한 비트맵 렌더링 오류, 기록 된 GL 경고 또는 다른 이미지 대신 잘못된 이미지가 나타나는지 주시하십시오. 이 모든 것은 버그를 재현한 신호입니다.</p><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>따라서 Glide는 변환된 Bitmap을 내부적으로 recycle하기 때문에 <code>imageView.setRecycler()</code>하지 않아도 된다.</p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/01/004-the-way-bitmap-gc-in-glide/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] 웹뷰에서 동작하는 페이스북 로그인이 deprecated됨</title>
      <link>https://dl137584.github.io/2022/02/01/003-deprecated-facebook-login-in-android/</link>
      <guid>https://dl137584.github.io/2022/02/01/003-deprecated-facebook-login-in-android/</guid>
      <pubDate>Tue, 01 Feb 2022 05:59:31 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;1-공지-전문&quot;&gt;&lt;a href=&quot;#1-공지-전문&quot; class=&quot;headerlink&quot; title=&quot;1. 공지 전문&quot;&gt;&lt;/a&gt;1. 공지 전문&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/assets/images/003-01.png&quot;&gt;&lt;/p&gt;
&lt;h2 id</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-공지-전문"><a href="#1-공지-전문" class="headerlink" title="1. 공지 전문"></a>1. 공지 전문</h1><p><img src="/assets/images/003-01.png"></p><h2 id="1-관련-문의-및-공식답변-링크"><a href="#1-관련-문의-및-공식답변-링크" class="headerlink" title="(1) 관련 문의 및 공식답변 링크"></a>(1) 관련 문의 및 공식답변 <a href="https://developers.facebook.com/support/bugs/4703185519702331/?join_id=f2cb01cbae6d066">링크</a></h2><blockquote><p>안녕하세요 철구 님, 자세한 내용에 감사드립니다.<br>로그 파일에서 ‘PLATFORM__LOGIN_DISABLED_FROM_WEBVIEW_OLD_SDK_VERSION’ 오류 코드를 확인할 수 있습니다. Android 웹뷰를 통한 Facebook 로그인(<a href="https://developers.facebook.com/blog/post/2021/06/28/deprecating-support-fb-login-authentication-android-embedded-browsers/">https://developers.facebook.com/blog/post/2021/06/28/deprecating-support-fb-login-authentication-android-embedded-browsers/</a>)이 중단되었기 때문에 발생한 것으로 보입니다.<br>대신 이 <a href="https://developers.facebook.com/docs/facebook-login/android/deprecating-webviews">링크</a>를 통해 사용자 지정 탭을 적용하는 자세한 지침을 확인할 수 있습니다.<br>만약 문제가 지속된다면 사용 중인 SDK 버전과 영어로 표시된 오류 메시지 스크린숏과 함께 오류를 재현할 수 있도록 샘플 프로젝트를 제공 부탁드립니다.<br>감사합니다.</p></blockquote><h1 id="2-공식-해결-가이드"><a href="#2-공식-해결-가이드" class="headerlink" title="2. 공식 해결 가이드"></a>2. 공식 해결 가이드</h1><h2 id="1-페이스북-SDK-버전이-8-2-이상인지-확인"><a href="#1-페이스북-SDK-버전이-8-2-이상인지-확인" class="headerlink" title="(1) 페이스북 SDK 버전이 8.2 이상인지 확인"></a>(1) 페이스북 SDK 버전이 8.2 이상인지 확인</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;com.facebook.android:facebook-android=sdk:8.2.0&#x27;</span><br></pre></td></tr></table></figure><h2 id="2-수정사항"><a href="#2-수정사항" class="headerlink" title="(2) 수정사항"></a>(2) 수정사항</h2><p>앱 내부 웹뷰가 아닌 외부 브라우저를 통해 페이스북 로그인 진행하도록 변경</p><p>2021년 10월 5일부터 Facebook 로그인은 사용자 로그인에 Android 내장 브라우저(WebView) 사용을 더 이상 지원하지 않습니다. 사용자 경험이 중단되지 않도록 하려면 다음 체크리스트를 사용하여 대신 사용자 지정 탭을 사용하십시오.</p><h1 id="3-결론"><a href="#3-결론" class="headerlink" title="3. 결론"></a>3. 결론</h1><p>웹뷰를 통해 페이스북 로그인 페이지에 접근하면 안 되며, 외부 브라우저를 띄워 페이스북 로그인 페이지에 접근하도록 수정해야 한다.</p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/01/003-deprecated-facebook-login-in-android/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] JCenter 지원종료</title>
      <link>https://dl137584.github.io/2022/01/31/002-jcenter-shutdown/</link>
      <guid>https://dl137584.github.io/2022/01/31/002-jcenter-shutdown/</guid>
      <pubDate>Mon, 31 Jan 2022 06:30:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;현재-상황-2021년-후반&quot;&gt;&lt;a href=&quot;#현재-상황-2021년-후반&quot; class=&quot;headerlink&quot; title=&quot;현재 상황(2021년 후반)&quot;&gt;&lt;/a&gt;&lt;strong&gt;현재 상황(2021년 후반)&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;a </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="현재-상황-2021년-후반"><a href="#현재-상황-2021년-후반" class="headerlink" title="현재 상황(2021년 후반)"></a><strong>현재 상황(2021년 후반)</strong></h1><p><a href="https://blog.gradle.org/jcenter-shutdown">[Gradle] JCenter shutdown impact on Gradle builds</a>에 따르면 JFrog에서 아래와 같이 공지했다고 한다.</p><ul><li>JCenter는 read-only로 계속 제공될 것이나</li><li>더이상 새로운 버전의 패키지는 받을 수 없다.</li><li>모든 Bintray 서비스(JCenter에 배포하기 위한 플랫폼)는 중지되었다.</li></ul><hr><h2 id="JCenter-지원중단-시-상황-2021년-초중반"><a href="#JCenter-지원중단-시-상황-2021년-초중반" class="headerlink" title="JCenter 지원중단 시 상황(2021년 초중반)"></a>JCenter 지원중단 시 상황(2021년 초중반)</h2><ul><li><a href="https://news.hada.io/topic?id=3737">지원종료공지요약</a> (<a href="https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/">공지원문</a>)</li></ul><blockquote><p>JFrog에서 운영하는 JCenter, GoCenter 및 ChartCenter가 운영을 중지할 예정이다.</p><p>2021년 2월 28일 : GoCenter, ChartCenter에 라이브러리 등록 서비스 중지</p><p>2021년 3월 31일 : JCenter에 라이브러리 등록 서비스 중지</p><p>2021년 5월 1일 : GoCenter, ChartCenter에서 라이브러리 다운로드 서비스 중지</p><p>2022년 2월 1일 : JCenter에서 라이브러리 다운로드 서비스 중지</p></blockquote><p>이유는 위의 요약링크에서 토론에서 말하기를</p><p><a href="https://github.com/google/ExoPlayer/issues/5246#issuecomment-748687665">ExoPlayer의 issue</a>에서 언급되기를, JCenter에서 악성코드가 포함된 라이브러리 패키지가 등록된 사고가 있었다고 하며, 이러한 사고방지 대책을 세우지 못하고 서비스를 닫는 것으로 보인다.</p><p>안드로이드 라이브러리는 JCenter에 의존한 게 많은데 따라서 대책을 세워야 한다. JCenter는 아래와 같이 레포지토리에 등록되어있다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    google()</span><br><span class="line">    mavenCentral()</span><br><span class="line">    jcenter()</span><br><span class="line">    maven &#123; url &#x27;https://maven.fabric.io/public&#x27; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 이 JCenter 지원 종료에 대한 안드로이드 공식 입장은 다음과 같다.</p><blockquote><p>2022년 2월 1일까지 JCenter에서 기존 아티팩트를 다운로드할 수 있습니다. - <a href="https://developer.android.com/studio/build/jcenter-migration?hl=ko">공식 문서</a></p></blockquote><p>이에 관하여 추후에 또다른 공지가 올라올 예정이다.</p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/01/31/002-jcenter-shutdown/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://dl137584.github.io/2022/01/31/hello-world/</link>
      <guid>https://dl137584.github.io/2022/01/31/hello-world/</guid>
      <pubDate>Mon, 31 Jan 2022 04:54:56 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://dl137584.github.io/2022/01/31/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
