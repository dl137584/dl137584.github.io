<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>leejs&#39;s blog</title>
    <link>https://dl137584.github.io/</link>
    
    <atom:link href="https://dl137584.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 14 Jun 2022 15:17:04 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>기사 스크랩</title>
      <link>https://dl137584.github.io/2022/06/14/026-reading-any-awesome-article/</link>
      <guid>https://dl137584.github.io/2022/06/14/026-reading-any-awesome-article/</guid>
      <pubDate>Tue, 14 Jun 2022 14:34:05 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;2022-2023년-Kotlin-팀의-계획-주요-프로젝트-및-생산성-기능&quot;&gt;&lt;a href=&quot;#2022-2023년-Kotlin-팀의-계획-주요-프로젝트-및-생산성-기능&quot; class=&quot;headerlink&quot; title=&quot;2022~2023년 K</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="2022-2023년-Kotlin-팀의-계획-주요-프로젝트-및-생산성-기능"><a href="#2022-2023년-Kotlin-팀의-계획-주요-프로젝트-및-생산성-기능" class="headerlink" title="2022~2023년 Kotlin 팀의 계획: 주요 프로젝트 및 생산성 기능"></a><strong>2022~2023년 Kotlin 팀의 계획: 주요 프로젝트 및 생산성 기능</strong></h3><ul><li>2022.06.13</li><li><a href="https://blog.jetbrains.com/ko/kotlin/2022/06/what-to-expect-from-the-kotlin-team-in-202223/">JetBrains</a></li></ul><blockquote><p>2022~2023년 핵심 프로젝트는 다음과 같습니다.</p><ul><li>Kotlin 릴리스의 품질과 안정성 개선</li><li><strong>K2 컴파일러의 베타 버전</strong> 출시</li><li>Kotlin Multiplatform Mobile의 안정화 버전 출시</li><li>K2 지원 플러그인을 포함한 Kotlin IntelliJ IDEA 플러그인의 알파 버전 출시</li><li>Kotlin/JS IR 백엔드의 안정화 버전 출시</li></ul></blockquote><h3 id="2022-구글-I-O-키노트-총정리-안드로이드-13-픽셀-6a-픽셀-워치-픽셀-버즈-프로-보안-검색"><a href="#2022-구글-I-O-키노트-총정리-안드로이드-13-픽셀-6a-픽셀-워치-픽셀-버즈-프로-보안-검색" class="headerlink" title="2022 구글 I/O 키노트 총정리, 안드로이드 13, 픽셀 6a, 픽셀 워치, 픽셀 버즈 프로, 보안, 검색"></a><strong>2022 구글 I/O 키노트 총정리, 안드로이드 13, 픽셀 6a, 픽셀 워치, 픽셀 버즈 프로, 보안, 검색</strong></h3><ul><li>2022.05.12</li><li><a href="https://byline.network/2022/05/12-167/">바이라인 네트워크</a></li></ul><p>구글 어시스턴트</p><blockquote><ul><li>Nest Hub Look and Talk을 통해 ‘헤이 구글’을 부르지 않고 검색을 바로 실행할 수 있다. 얼굴 인식과 음성 인식이 함께 동작한다. 6개의 머신 러닝 모델을 함께 사용한다.</li><li>새로운 언어 모델로는 PaLM을 제시한다. 5400억개 매개변수로 훈련해 언어를 ‘생각의 연결 고리(chain-of-thought prompting)으로 연결하며, 수학 질문을 하거나 농담을 주고받을 수 있다.</li></ul></blockquote><p>Privacy</p><blockquote><ul><li>2단계 인증을 편하게 할 수 있도록 한다. 미래에는 비밀번호를 전혀 사용하지 않도록 준비 중이다. 개인 정보 보호를 위해 올여름부터 가상 카드 번호를 구글이 생성해준다.</li><li>데이터를 축소하고 암호화하는 등 프로텍티트 컴퓨팅 솔루션을 제공한다.</li><li>데이터를 타 회사에서 판매하지 않는다고 한다.</li></ul></blockquote><p>Android 13</p><blockquote><ul><li>종단간 암호화와 RCS가 적용된 메시지 앱은 5억 기기에 적용됐다. 안드로이드 13에서는 업그레이드 RCS가 적용된다.</li><li>wear OS가 스마트폰과 높은 수준의 통합을 이루었던 것처럼 올해는 안드로이드 태블릿 OS가 스마트폰 안드로이드 OS와 통합된다.</li></ul></blockquote><h3 id="안드로이드-버전-점유율-statistics"><a href="#안드로이드-버전-점유율-statistics" class="headerlink" title="안드로이드 버전 점유율(statistics)"></a><strong>안드로이드 버전 점유율(statistics)</strong></h3><ul><li>2021.11.21</li><li><a href="https://9to5google.com/2021/11/22/android-2021-distribution-numbers/">android-2021-distribution-numbers</a></li></ul><p><img src="/2022/06/14/026-reading-any-awesome-article/026-01.PNG"></p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/ARTICLE/">/ARTICLE</category>
      
      
      
      <comments>https://dl137584.github.io/2022/06/14/026-reading-any-awesome-article/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>읽는다, 책</title>
      <link>https://dl137584.github.io/2022/06/14/025-reading-a-delicious-book/</link>
      <guid>https://dl137584.github.io/2022/06/14/025-reading-a-delicious-book/</guid>
      <pubDate>Tue, 14 Jun 2022 14:28:09 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;실무에-바로-적용하는-안드로이드-프로그래밍&quot;&gt;&lt;a href=&quot;#실무에-바로-적용하는-안드로이드-프로그래밍&quot; class=&quot;headerlink&quot; title=&quot;실무에 바로 적용하는 안드로이드 프로그래밍&quot;&gt;&lt;/a&gt;&lt;strong&gt;실무에 바로 적용</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="실무에-바로-적용하는-안드로이드-프로그래밍"><a href="#실무에-바로-적용하는-안드로이드-프로그래밍" class="headerlink" title="실무에 바로 적용하는 안드로이드 프로그래밍"></a><strong>실무에 바로 적용하는 안드로이드 프로그래밍</strong></h3><ul><li>2022.05.03</li><li>저자: 크리스틴 마시케노, 브라이언 가드너, 빌 필립스, 크리스 스튜어트</li></ul><p>액티비티의 생명주기를 State를 기준으로 표현한 다이어그램은 기존 <a href="https://developer.android.com/guide/components/activities/activity-lifecycle?hl=ko#alc">Android Developer</a>에 있는 것보다 훨씬 보기 좋더라.</p><p><img src="/2022/06/14/025-reading-a-delicious-book/025-01.png"></p><p>전체적으로 약간 딥한 부분까지 설명이 잘 되어있었는데도 동시에 이해하기 쉽게 쓰여있었다.<br>예를 들어, onSaveInstanceState를 액티비티 레코드와 같이 설명해주거나, MVVM 뷰모델 vs Jetpack ViewModel의 차이를 설명해주는 등 상세하고 최신 내용이 잘 반영되어있다. 예제 코드가 모두 코틀린으로 되어있는 점이 그렇다.</p><p>안드로이드를 공부하는 사람이라면 기본서 다음 두 번째 책으로 적절할 것 같다. 안드로이드/자바/코틀린의 기초 문법을 설명해주지는 않아서.</p><p>외부 라이브러리를 사용한 예제는 테스팅 코드를 제외하고는 없다. 700페이지쯤 되니 이 이상 넣을 수 없었던 것으로 보임..</p><p>그리고 이북은 PDF 사진 정도는 저장할 수 있게 해줬으면 좋겠다.</p><h3 id="코틀린-완벽-가이드"><a href="#코틀린-완벽-가이드" class="headerlink" title="코틀린 완벽 가이드"></a><strong>코틀린 완벽 가이드</strong></h3><ul><li>2022.04.01</li><li>저자: 알렉세이 세두노프</li></ul><p>코틀린에 대해 하나부터 열까지 상세한 코드 예제와 함께 설명이 수록되어있어 읽는데 막힘 없이 읽을 수 있어 코틀린 입문에 좋을 것으로 보인다.</p><p>구체적으로는 아래 항목이 있다.</p><ol><li>데이터 타입 다루는 법</li><li>각종 클래스의 특징</li><li>제네릭</li><li><strong>자바와의 상호 운용성</strong> (아주 친절한 설명!)</li><li>동시성</li><li>테스팅</li></ol><p>기본을 탄탄히 하는 데는 <a href="https://kotlinlang.org/docs/home.html">Kotlin Guide</a>보다 한국어라는 점에서 책을 보는 게 더 나을 것 같다. 코틀린에 관해 원하는 것은 대부분 이 책에서 얻을 수 있으리라..</p><p>덧붙여 이 책은 Kotlin 1.6을 기준으로 쓰였으며 어느 하위 버전에서 어떤 업데이트가 있었는지도 중요한 부분은 설명이 되어있다.</p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/BOOK/">/BOOK</category>
      
      
      
      <comments>https://dl137584.github.io/2022/06/14/025-reading-a-delicious-book/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android / Glide] Glide 이미지 로딩 중 다른 scaleType 적용하기</title>
      <link>https://dl137584.github.io/2022/05/02/024-allow-the-different-scaletype-when-loading-image-in-glide/</link>
      <guid>https://dl137584.github.io/2022/05/02/024-allow-the-different-scaletype-when-loading-image-in-glide/</guid>
      <pubDate>Mon, 02 May 2022 12:41:14 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Glide 동작을 테스트하면서 아래와 같은 상황이 발생하였다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;기존에 사용하던 로딩이미지의 ScaleType은 CENTER를 사용해야 한다.&lt;/li&gt;
&lt;li&gt;Glide로 로드한 이미지는 로딩이미지와는 다른 각자의 Scale</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Glide 동작을 테스트하면서 아래와 같은 상황이 발생하였다.</p><ol><li>기존에 사용하던 로딩이미지의 ScaleType은 CENTER를 사용해야 한다.</li><li>Glide로 로드한 이미지는 로딩이미지와는 다른 각자의 ScaleType을 가지고 있다.</li></ol><p>따라서 loadingImage와 loadedImage의 ScaleType을 외부에서 설정만 해주면 내부에서 자동으로 바꿔서 보여주도록 만들고자 했다.</p><p>이 작업을 위해 Glide에서는 이미지 로딩 중 placeholder 노출, 리소스 로드 등의 동작을 확장 구현할 수 있도록 Target을 제공한다는 점을 먼저 말해두겠다. 이 Target은 into()를 통해 전달할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Target&lt;Drawable&gt; target =</span><br><span class="line">  Glide.with(fragment)</span><br><span class="line">    .load(url)</span><br><span class="line">    .into(<span class="keyword">new</span> Target&lt;Drawable&gt;() &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>이러한 Target를 상속받는 클래스를 만들어서 placeholder는 onLoadStarted, error는 onLoadFailed에 각각 정의하려고 한다. 이때 로딩이미지는 drawable 리소스로 앱에 저장되어있기 때문에 DrawableImageViewTarget을 상속받아 만든 게 아래와 같다.</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScaleLoadingImageViewTarget</span> <span class="keyword">extends</span> <span class="title">DrawableImageViewTarget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ImageView.ScaleType mLoadingScaleType;</span><br><span class="line">    <span class="keyword">private</span> ImageView.ScaleType mReadyScaleType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RequestOptions에서 정의해둔 scale은 fitCenter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScaleLoadingImageViewTarget</span><span class="params">(ImageView view, ImageView.ScaleType scaleType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(view);</span><br><span class="line">        <span class="comment">// loadingCenter()에서 받아온 scale</span></span><br><span class="line">        mLoadingScaleType = scaleType;</span><br><span class="line">        <span class="comment">// xml에서 정의해둔 scale</span></span><br><span class="line">        <span class="comment">// (따로 정의되지 않았다면 여기에 RequestOptions scaleType인 fitCenter가 들어옴</span></span><br><span class="line">        mReadyScaleType = view.getScaleType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadStarted</span><span class="params">(<span class="meta">@Nullable</span> Drawable placeholder)</span> </span>&#123;</span><br><span class="line">        ImageView imageView = getView();</span><br><span class="line">        imageView.setScaleType(mLoadingScaleType);</span><br><span class="line">        <span class="keyword">super</span>.onLoadStarted(placeholder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(<span class="meta">@Nullable</span> Drawable errorDrawable)</span> </span>&#123;</span><br><span class="line">        ImageView imageView = getView();</span><br><span class="line">        imageView.setScaleType(mLoadingScaleType);</span><br><span class="line">        <span class="keyword">super</span>.onLoadFailed(errorDrawable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(<span class="meta">@NonNull</span> Drawable resource, <span class="meta">@Nullable</span> Transition&lt;? <span class="keyword">super</span> Drawable&gt; transition)</span> </span>&#123;</span><br><span class="line">        ImageView imageView = getView();</span><br><span class="line">imageView.setImageResource(<span class="number">0</span>); <span class="comment">// 로딩 이미지가 보여지고 있을 때 scaleType이 바뀌면서 이미지가 덜그럭 거리는 이슈 방어</span></span><br><span class="line">        imageView.setScaleType(mReadyScaleType);</span><br><span class="line">        <span class="keyword">super</span>.onResourceReady(resource, transition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScaleLoadingImageViewTarget <span class="title">loadingCenter</span><span class="params">(ImageView imageView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ScaleLoadingImageViewTarget(imageView, ImageView.ScaleType.CENTER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>loadingCenter</code> 메소드를 통해 위에 새롭게 정의된 Target에 접근할 수 있도록 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .listener(listener)</span><br><span class="line">    .apply(options)</span><br><span class="line">    .into(ScaleLoadingImageViewTarget.loadingCenter(imageView));</span><br></pre></td></tr></table></figure><blockquote><p><strong>참고링크</strong></p><ul><li><a href="https://github.com/bumptech/glide/issues/368">Allow a different scale type for placeholder images · Issue #368 · bumptech/glide</a></li></ul></blockquote><p>그러나 이 방식을 적용한 ImageView가 담긴 RecyclerView를 구현하게 되면, RecyclerView 각 아이템이 재사용되면서 ScaleLoadingImageViewTarget의 생성자에서 호출하는 <code>view.getScaleType()</code>의 값이 기대한 대로 나오지 않는 경우가 있어 문제가 될 수 있다.</p><p>따라서 이를 아래와 같이 view의 ScaleType을 명시적으로 받도록 변경하였다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .listener(listener)</span><br><span class="line">    .apply(options)</span><br><span class="line">    .into(ScaleLoadingImageViewTarget.loadingCenter(imageView, ScaleType.FIT_CENTER));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScaleLoadingImageViewTarget</span><span class="params">(ImageView view, ImageView.ScaleType originScaleType, ImageView.ScaleType loadingScaleType)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(view);</span><br><span class="line">  mLoadingScaleType = loadingScaleType;</span><br><span class="line">  mReadyScaleType = originScaleType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScaleLoadingImageViewTarget <span class="title">loadingCenter</span><span class="params">(ImageView imageView, ImageView.ScaleType originScaleType)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ScaleLoadingImageViewTarget(imageView, originScaleType, ImageView.ScaleType.CENTER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/05/02/024-allow-the-different-scaletype-when-loading-image-in-glide/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Kotlin] Ticker(티커) 모드 차이(TickerMode.FIXED_PERIOD, FIXED_DELAY)</title>
      <link>https://dl137584.github.io/2022/04/30/023-ticker-in-coroutines-library/</link>
      <guid>https://dl137584.github.io/2022/04/30/023-ticker-in-coroutines-library/</guid>
      <pubDate>Sat, 30 Apr 2022 08:12:06 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;개발 환경: Kotlin 1.6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;coroutines 라이브러리에는 **티커(ticker)**라고 하는 특별한 랑데부 채널이 있다. 이 채널은 &lt;strong&gt;Unit 값을 계속 발생시키되</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>개발 환경: Kotlin 1.6</p></blockquote><p>coroutines 라이브러리에는 **티커(ticker)**라고 하는 특별한 랑데부 채널이 있다. 이 채널은 <strong>Unit 값을 계속 발생시키되 한 원소와 다음 원소의 발생 시점이 주어진 지연 시간만큼 떨어져 있는 스트림</strong>을 만든다.</p><p>여기서 <strong>랑데부 채널</strong>이란 내부 버퍼가 없어 이 채널에서의 send() 호출은 다른 어떤 코루틴이 receive()를 호출할 때까지 항상 <strong>일시 중단</strong>된다. 마찬가지로 receive() 호출은 다른 어떤 코루틴이 send()를 호출할 때까지 일시 중단되는 특성을 가진다.<br>즉, 랑데부 채널은 생산자와 소비자 코루틴이 교대로 활성화되도록 보장한다.</p><p>티커 채널을 만들려면 ticker()라는 함수를 사용한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.channels.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> ticker = ticker(<span class="number">100</span>) <span class="comment">// TickerMode.FIXED_PERIOD</span></span><br><span class="line">println(withTimeoutOrNull(<span class="number">50</span>) &#123; ticker.receive() &#125;)</span><br><span class="line">println(withTimeoutOrNull(<span class="number">60</span>) &#123; ticker.receive() &#125;)</span><br><span class="line">delay(<span class="number">250</span>)</span><br><span class="line">println(withTimeoutOrNull(<span class="number">1</span>) &#123; ticker.receive() &#125;)</span><br><span class="line">println(withTimeoutOrNull(<span class="number">60</span>) &#123; ticker.receive() &#125;)</span><br><span class="line">println(withTimeoutOrNull(<span class="number">60</span>) &#123; ticker.receive() &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">null</span><br><span class="line">kotlin.Unit</span><br><span class="line">kotlin.Unit</span><br><span class="line">kotlin.Unit</span><br><span class="line">null</span><br></pre></td></tr></table></figure><p><img src="/2022/04/30/023-ticker-in-coroutines-library/023-01.PNG" alt="TickerMode.FIXED_PERIOD"></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><ol><li><p>0ms ~ 50ms(타임아웃): 50ms(밀리초) 내에 티커 신호를 받으려고 시도하나, 티커 지연 시간이 100ms이므로 withTimeoutOtNull()은 신호를 받지 못하고 타임아웃이 걸려 널을 반환한다.</p></li><li><p>50ms ~ 100ms: 타임아웃이 1회 난 후 다음 60ms 안에 신호를 받으려고 시도한다. 그리고 이번에는 50 + 60ms가 100ms 보다 길기 때문에 결괏값을 얻는다. receive()가 호출되면 티커가 재개된다.</p><p> 2_1. 100ms ~ 350ms: 이때 소비자 코루틴이 약 250ms 동안 일시 중단된다. 일시 중단으로부터 <strong>100ms 후에 티커는 다른 신호를 보내고 신호가 수신될 때까지 일시 중단된다.</strong> 그리고 소비자 코루틴과 티커 코루틴 모두 150ms 동안 일시 중단 상태로 남는다.</p></li><li><p>350ms: 소비자 코루틴이 재개되고 신호를 요청하려고 시도한다. 신호가 이미 보내졌기 때문에 receive()는 즉시 결과를 반환한다.</p><p> 3_1. 이제 티커는 마지막 신호를 보내고 나서 얼마나 시간이 지났는지 검사하고(250ms), <strong>지연 시간을 50ms로 줄인다.</strong></p></li><li><p>350ms ~ 400ms: 소비자는 50ms 타임아웃 안에 신호를 받으려고 시도한다. 다음 신호가 50ms 이전에 보내졌기 때문에 이 시도는 거의 확실히 성공할 것이다.</p></li><li><p>400ms ~ 460ms(타임아웃): 마지막으로, 신호를 받으려는 receive() 호출이 거의 즉시 일어난다. 따라서 티커는 전체 지연 시간(100ms)를 다시 기다린다. 그 결과, 마지막 receive() 호출은 60ms 타임아웃 안에 티커로부터 신호를 받지 못하기 때문에 널을 받는다.</p></li></ol><p>티커 모드를 FIXED_DELAY로 고정하면 결과가 다음과 같이 바뀐다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">null</span><br><span class="line">kotlin.Unit</span><br><span class="line">kotlin.Unit</span><br><span class="line">null</span><br><span class="line">kotlin.Unit</span><br></pre></td></tr></table></figure><p><img src="/2022/04/30/023-ticker-in-coroutines-library/023-02.PNG" alt="TickerMode.FIXED_DELAY"></p><p>초반부는 앞의 예제와 비슷하게 진행된다. 하지만 250밀리초의 긴 지연 이후 소비자 코루틴이 재개될 때부터는 동작이 달라진다.</p><ol start="3"><li><p>350ms: 소비자 코루틴이 재개되고 신호를 요청하려고 시도한다. 신호가 이미 보내졌기 때문에 receive()는 즉시 결과를 반환한다.</p><p> 3_1. receive()로 결과를 넘긴 시점에서 티커는 <strong>현재시간을 고려하지 않고 여기서부터 100ms를 다시 기다린다.</strong></p></li><li><p>350ms ~ 410ms(타임아웃): 티커가 신호를 보내려면 40ms 남았으므로 널을 받는다.</p></li><li><p>410ms ~ 450ms: 3_1에서 티커가 재개된 시간으로부터 100ms가 지났으므로 결과를 무사히 반환받는다.</p></li></ol><blockquote><p><b>참고</b><br>알렉세이 세두노프 &lt;코틀린 완벽 가이드&gt;</p></blockquote><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Kotlin/">Kotlin</category>
      
      
      
      <comments>https://dl137584.github.io/2022/04/30/023-ticker-in-coroutines-library/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] 상하 스크롤 중 내부 RecyclerView의 좌우 스크롤 유지</title>
      <link>https://dl137584.github.io/2022/04/20/022-keep-horizontal-scroll-when-scrolling-vertically-other-recyclerview/</link>
      <guid>https://dl137584.github.io/2022/04/20/022-keep-horizontal-scroll-when-scrolling-vertically-other-recyclerview/</guid>
      <pubDate>Wed, 20 Apr 2022 12:08:42 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;1-상황&quot;&gt;&lt;a href=&quot;#1-상황&quot; class=&quot;headerlink&quot; title=&quot;1. 상황&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. 상황&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;현재 한 Activity가 상하 스크롤이 되는 RecyclerView로 구성되</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="1-상황"><a href="#1-상황" class="headerlink" title="1. 상황"></a><strong>1. 상황</strong></h3><p>현재 한 Activity가 상하 스크롤이 되는 RecyclerView로 구성되어 있고, 그 아이템 중 하나가 좌우 스크롤 RecyclerView를 가지고 있다.</p><p><img src="/2022/04/20/022-keep-horizontal-scroll-when-scrolling-vertically-other-recyclerview/022-01.PNG" alt="Activity 구성"></p><p>RecyclerView는 View를 재사용하기 때문에 item1, item2, …의 뷰를 그릴 때 item1에서 사용한 뷰를 n번째 item에서 재사용할 수 있다. 따라서 다시 item1을 그릴 때 View를 초기화하게 되므로 item 내의 RecyclerView 스크롤이 초기화된다.</p><p>즉, item1의 좌우 스크롤을 움직인 후 아래로 스크롤링하고 item1 위치로 다시 돌아왔을 때 그 좌우 스크롤이 처음으로 되돌아가있는 이슈가 발견되었다.</p><h3 id="2-해결"><a href="#2-해결" class="headerlink" title="2. 해결"></a><strong>2. 해결</strong></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> pos = (rv.layoutManager <span class="keyword">as</span> LinearLayoutManager?)?.findFirstCompletelyVisibleItemPosition() ?: -<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> (pos != -<span class="number">1</span> &amp;&amp; scrollInfo?.scrollPos != pos) &#123;</span><br><span class="line">  scrollInfo?.scrollPos = pos</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 하면 일단 현재 보고있는 item의 position을 얻어와 저장할 수 있다. 이 동작을 사용하여 아래와 같이 OnScrollListener에서 scrollPos와 scrollOffset을 저장한다.</p><p>scrollOffset은 scrollPos만으로는 해당 item의 맨 앞부분으로 스크롤이 움직이기 때문에 이를 현재 스크롤하던 위치로 옮겨주기 위함이다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rv.addOnScrollListener(<span class="keyword">object</span> : RecyclerView.OnScrollListener() &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onScrolled</span><span class="params">(recyclerView: <span class="type">RecyclerView</span>, dx: <span class="type">Int</span>, dy: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onScrolled(recyclerView, dx, dy)</span><br><span class="line">    <span class="keyword">val</span> pos = (rv.layoutManager <span class="keyword">as</span> LinearLayoutManager?)?.findFirstCompletelyVisibleItemPosition() ?: -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (pos != -<span class="number">1</span> &amp;&amp; scrollInfo?.scrollPos != pos) &#123;</span><br><span class="line">      scrollInfo?.scrollPos = pos</span><br><span class="line">    &#125;</span><br><span class="line">    scrollInfo?.scrollOffset = rv.computeHorizontalScrollOffset()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>그리고 저장한 scrollOffset을 사용하여 스크롤을 유지할 수 있는 함수는 아래와 같이 구성하였다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">keepScroll</span><span class="params">(scrollInfo: <span class="type">ScrollInfo</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> offset = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (scrollInfo.scrollPos &lt; goodsList.size - <span class="number">2</span>) &#123;</span><br><span class="line">    offset = scrollInfo.scrollOffset</span><br><span class="line">    <span class="keyword">while</span> (offset &gt; itemWidth) &#123;</span><br><span class="line">      offset -= itemWidth</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  (rv.layoutManager <span class="keyword">as</span> LinearLayoutManager).scrollToPositionWithOffset(scrollInfo.scrollPos, offset)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="3-번외"><a href="#3-번외" class="headerlink" title="3. 번외"></a><strong>3. 번외</strong></h3><p>scrollToPositionWithOffset이 position과 offset 값을 받는 걸 이용하여, position은 0으로 고정하고 offset을 <code>rv.computeHorizontalScrollOffset()</code>을 저장한 값으로 넘겨주면 될 거라고 생각했으나 <strong>기대한대로 동작하지 않았다.</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(rv.layoutManager <span class="keyword">as</span> LinearLayoutManager).scrollToPositionWithOffset(<span class="number">0</span>, offset)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/04/20/022-keep-horizontal-scroll-when-scrolling-vertically-other-recyclerview/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>자바와 코틀린에서의 동등성 비교(==, ===, equals())</title>
      <link>https://dl137584.github.io/2022/04/18/021-kotlin-equality-and-identity/</link>
      <guid>https://dl137584.github.io/2022/04/18/021-kotlin-equality-and-identity/</guid>
      <pubDate>Mon, 18 Apr 2022 12:48:18 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;동일성(Identity): 참조 주소를 비교&lt;/li&gt;
&lt;li&gt;동등성(Equality): 내용 기반 비교&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;자바에서의-참조타입-동작&quot;&gt;&lt;a href=&quot;#자바에서의-참조타입-동작&quot; class=&quot;headerl</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>동일성(Identity): 참조 주소를 비교</li><li>동등성(Equality): 내용 기반 비교</li></ul><h3 id="자바에서의-참조타입-동작"><a href="#자바에서의-참조타입-동작" class="headerlink" title="자바에서의 참조타입 동작"></a><strong>자바에서의 참조타입 동작</strong></h3><p>==와 != 연산자는 참조 동등성을 뜻하며, 내용을 기반으로 하는 동등성은 equals() 호출을 통해 구현한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String[] arr1 = &#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line">    String[] arr2 = &#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line">    System.out.println(<span class="string">&quot;arr1 address: &quot;</span> + arr1 + <span class="string">&quot; / arr2 address: &quot;</span>+ arr2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr1 == arr1) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;array Identity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr1.equals(arr2)) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;array Equality&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Data d1 = <span class="keyword">new</span> Data(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">    Data d2 = <span class="keyword">new</span> Data(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">    ArrayList&lt;Data&gt; list1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list1.add(d1);</span><br><span class="line">    list1.add(d2);</span><br><span class="line">    ArrayList&lt;Data&gt; list2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list2.add(d1);</span><br><span class="line">    list2.add(d2);</span><br><span class="line">    System.out.println(<span class="string">&quot;list1 address: &quot;</span> + list1 + <span class="string">&quot; / list2 address: &quot;</span>+ list2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (list1 == list2) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;list Identity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list1.equals(list2)) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;list Equality&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  Data(String a) &#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> String a = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 출력</span></span><br><span class="line"><span class="comment">  array Identity</span></span><br><span class="line"><span class="comment">  list Equality</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>참고로 <code>new ArrayList()</code>로 리스트 객체를 생성하는 게 아니라 list를 대입하게 되면 주소값이 동일해진다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list1 = list2;</span><br><span class="line"><span class="keyword">if</span> (list1 == list2) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;list Identity&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (list1.equals(list2)) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;list Equality&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 출력</span></span><br><span class="line"><span class="comment">  list Identity</span></span><br><span class="line"><span class="comment">  list Equality</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="반면-코틀린에서의-참조타입-동작"><a href="#반면-코틀린에서의-참조타입-동작" class="headerlink" title="반면, 코틀린에서의 참조타입 동작"></a><strong>반면, 코틀린에서의 참조타입 동작</strong></h3><p>연산자 형태(== 또는 !=)로 호출하는 경우 equals()를 호출하기 때문에 두 방식은 같은 결과가 나온다.<br>참조 동등성을 비교하려면 === 또는 !== 연산자를 사용하면 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> dataclass1: DataClass = DataClass()</span><br><span class="line">  <span class="keyword">val</span> dataclass2: DataClass = DataClass()</span><br><span class="line">  <span class="keyword">val</span> list1: List&lt;DataClass&gt; = listOf(dataclass1, dataclass2)</span><br><span class="line">  <span class="keyword">val</span> list2: List&lt;DataClass&gt; = listOf(dataclass1, dataclass2)</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> (list1 == list2)      println(<span class="string">&quot;list used data class == Equality&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (list1.equals(list2)) println(<span class="string">&quot;list used data class equals() Equality&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (list1 === list2)     println(<span class="string">&quot;list used data class Identity&quot;</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">val</span> data1: Data = Data()</span><br><span class="line">  <span class="keyword">val</span> data2: Data = Data()</span><br><span class="line">  <span class="keyword">val</span> list3: List&lt;Data&gt; = listOf(data1, data2)</span><br><span class="line">  <span class="keyword">val</span> list4: List&lt;Data&gt; = listOf(data1, data2)</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> (list3 == list4)      println(<span class="string">&quot;list used class == Equality&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (list3.equals(list4)) println(<span class="string">&quot;list used class equals() Equality&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (list3 === list4)     println(<span class="string">&quot;list used class Identity&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">DataClass</span></span>(<span class="keyword">val</span> x: String = <span class="string">&quot;x&quot;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>(<span class="keyword">val</span> y: String = <span class="string">&quot;y&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 출력</span></span><br><span class="line"><span class="comment">  list used data class == Equality</span></span><br><span class="line"><span class="comment">  list used data class equals() Equality</span></span><br><span class="line"><span class="comment">  list used class == Equality</span></span><br><span class="line"><span class="comment">  list used class equals() Equality</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="String-변수의-동작"><a href="#String-변수의-동작" class="headerlink" title="String 변수의 동작"></a><strong>String 변수의 동작</strong></h3><p>변수 타입은 기본형(Primitive type)과 참조형(Reference type)이 있다. 그 중 String은 참조형이지만 기본형처럼 쓰이는데 위의 예제와 동작이 약간 다르다. 자바에서는 <code>String str1 = &quot;a&quot;</code>와 같이 일반적인 대입 방식으로 값을 초기화하면 <code>String str2 = &quot;a&quot;</code>처럼 같은 값(“a”)을 가진 변수는 같은 주소를 참조하게 된다. 따라서 아래 예제에서 ==와 equals 동작이 동일하게 true로 출력된다.<br>그리고 같은 값이라도 이 참조 주소를 다르게 설정하고자 <code>new String()</code>으로 객체를 생성하게 되는 경우 참조 동등성(==)을 비교하면 false가 반환된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (str1 == str2)      System.out.println(<span class="string">&quot;string Identity&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (str1.equals(str2)) System.out.println(<span class="string">&quot;string Equality&quot;</span>);</span><br><span class="line"></span><br><span class="line">String strNew1 = <span class="keyword">new</span> String(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">String strNew2 = <span class="keyword">new</span> String(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (strNew1 == strNew2)      System.out.println(<span class="string">&quot;stringNew Identity&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (strNew1.equals(strNew2)) System.out.println(<span class="string">&quot;stringNew Equality&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 출력</span></span><br><span class="line"><span class="comment">  string Identity</span></span><br><span class="line"><span class="comment">  string Equality</span></span><br><span class="line"><span class="comment">  stringNew Equality</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>코틀린에서는 new 키워드가 없어 다음 세 가지를 비교하면 이러하다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> str1: String = <span class="string">&quot;a&quot;</span></span><br><span class="line">  <span class="keyword">val</span> str2: String = <span class="string">&quot;a&quot;</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> (str1 == str2)      println(<span class="string">&quot;string == Equality&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (str1.equals(str2)) println(<span class="string">&quot;string equals() Equality&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (str1 === str2)     println(<span class="string">&quot;string Identity&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 출력</span></span><br><span class="line"><span class="comment">  string == Equality</span></span><br><span class="line"><span class="comment">  string equals() Equality</span></span><br><span class="line"><span class="comment">  string Identity</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Nullable-값"><a href="#Nullable-값" class="headerlink" title="Nullable 값"></a><strong>Nullable 값</strong></h3><p>자바에서는 NPE를 방지하기 위해 equals()에서도 수신 객체가 널인 경우 악명높은 NPE(Null Point Exception) 오류가 나기 때문에 null이 아님을 보장하기 위해 <code>obj != null</code>과 같이 조건문을 추가해 주어야 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String obj = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (obj.equals(something)) &#123;&#125; <span class="comment">// NPE</span></span><br></pre></td></tr></table></figure><p>반면, 코틀린에서는 ==와 != 두 연산자로 비교하는 값이 null이라도 오류가 나지 않는다. 연산자의 왼쪽 피연산자가 null인 경우에는 참조 동등성을 사용해 널과 비교하면 된다.</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><blockquote><p><b>참고</b><br>알렉세이 세두노프 &lt;코틀린 완벽 가이드&gt;</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Kotlin/">Kotlin</category>
      
      
      
      <comments>https://dl137584.github.io/2022/04/18/021-kotlin-equality-and-identity/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>기술 블로그 - AdSense 광고 적용</title>
      <link>https://dl137584.github.io/2022/02/19/019-blog-apply-adsense/</link>
      <guid>https://dl137584.github.io/2022/02/19/019-blog-apply-adsense/</guid>
      <pubDate>Sat, 19 Feb 2022 03:20:19 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;광고 게재 승인을 기다리는 와중에 기존에 사용하던 티스토리 블로그를 정리하려고 갔는데 우연치않게 [수익]란을 보게 되었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/02/19/019-blog-apply-adsense/019-01.png&quot;&gt;&lt;/p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>광고 게재 승인을 기다리는 와중에 기존에 사용하던 티스토리 블로그를 정리하려고 갔는데 우연치않게 [수익]란을 보게 되었다.</p><p><img src="/2022/02/19/019-blog-apply-adsense/019-01.png"></p><p>현재 운영중이진 않아서 3개월 내 공개 발행글이 없는데 AdSense의 승인이 지연되는 이유가 발행글이 10 아래여서 인 것 같아서 포스팅을 늘리면서 기다려보기로 함. 20개 포스팅이 넘으면 다시 확인해볼 예정.</p><h2 id="Google-AdSense-15일-소요-2022-02-01-02-15-중-포스팅-16개-작성"><a href="#Google-AdSense-15일-소요-2022-02-01-02-15-중-포스팅-16개-작성" class="headerlink" title="Google AdSense: 15일 소요(2022.02.01 - 02.15 중 포스팅 16개 작성)"></a><a href="https://www.google.com/adsense/new/u/0/pub-8868044834754772/myads/sites">Google AdSense</a>: 15일 소요(2022.02.01 - 02.15 중 포스팅 16개 작성)</h2><p>이카루스 테마에서는 사이드바에 광고를 넣을 수 있도록 제공되는데, 여기에 광고를 넣으려면 _config.icarus.yml에서 client_id와 slot_id를 기입해주면 된다.</p><p><img src="/2022/02/19/019-blog-apply-adsense/019-02.png"></p><p>아래 작업을 하려면 우선 Google AdSense 내에서 계정을 검토하는 과정을 거쳐야하는데, 이게 2주까지 걸릴 수도 있다고 하더니 내 경우 15일 걸렸다. 막 만든 사이트고(2월 1일 신청당시 포스팅 3개), 검토 요청을 한 2월 1-2일이 설연휴라 더 늦어졌을지도 모르겠다.</p><p>승인이 나면 승인되었다는 메일이 오고, Adsense 페이지에 들어가면 다음과 같이 [준비됨]이라고 바뀌어있다.</p><p><img src="/2022/02/19/019-blog-apply-adsense/019-03.png"></p><h3 id="1-ads-txt-삽입"><a href="#1-ads-txt-삽입" class="headerlink" title="(1) ads.txt 삽입"></a>(1) ads.txt 삽입</h3><p>아래 나오는대로 ads.txt 파일을 다운받아 루트(source/)에 넣고 <code>hexo clean</code> 후 <code>hexo g</code> 하면 public/ 하위에 생성된 것을 볼 수 있을 것이다.</p><p>이 문제는 확인되어 해결되는 데까지 며칠 걸리는 것 같지만 광고 노출 자체는 승인 후 하루 지나서 바로 되어 문제삼지 않았다. (저 빨간 “수익 손실 위험” 팝업은 광고가 노출 되어도 계속 떠있었다.)</p><p><img src="/2022/02/19/019-blog-apply-adsense/019-04.png"></p><h3 id="2-신규-광고-단위-만들기-사이드-메뉴에-광고-넣기"><a href="#2-신규-광고-단위-만들기-사이드-메뉴에-광고-넣기" class="headerlink" title="(2) 신규 광고 단위 만들기: 사이드 메뉴에 광고 넣기"></a>(2) 신규 광고 단위 만들기: 사이드 메뉴에 광고 넣기</h3><p>우선 AdSense 사이드 메뉴의 [개요]에서 상단 탭의 [광고 단위 기준]으로 이동하면 디스플레이/인피드/콘텐츠 내 광고 중 타입을 골라서 단위를 생성할 수 있다.</p><p><img src="/2022/02/19/019-blog-apply-adsense/019-05.png"></p><p>이카루스 테마에서는 <code>_config.icarus.yml</code> 설정파일에서 위젯으로 제공하기 때문에 여기에 넣을 client ID와 unit ID만 만들어주면 된다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">widgets:</span></span><br><span class="line">    <span class="bullet">-</span></span><br><span class="line">        <span class="comment"># Where should the widget be placed, left sidebar or right sidebar</span></span><br><span class="line">        <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">adsense</span></span><br><span class="line">        <span class="comment"># AdSense client ID</span></span><br><span class="line">        <span class="attr">client_id:</span> <span class="string">&#x27;ca-pub-0&#x27;</span></span><br><span class="line">        <span class="comment"># AdSense AD unit ID</span></span><br><span class="line">        <span class="attr">slot_id:</span> <span class="string">&#x27;0000000000&#x27;</span></span><br></pre></td></tr></table></figure><p>내 경우 디스플레이 타입으로 생성하여 만들어진 코드에서 data-ad-client, data-ad-slot 속성값을 각각 client_id, slot_id로 붙여넣었다.</p><h3 id="3-콘텐츠-내에-광고-삽입"><a href="#3-콘텐츠-내에-광고-삽입" class="headerlink" title="(3) 콘텐츠 내에 광고 삽입"></a>(3) 콘텐츠 내에 광고 삽입</h3><p>콘텐츠 내에 광고는 포스팅 내에 광고 삽입을 말한다. 이 경우 [광고 단위 기준]의 콘텐츠 내 타입으로 생성하였는데 사이드 메뉴에 넣을 디스플레이 타입과는 다르게 아래와 같이 생성된 스크립트 코드를 직접 포스팅 내에 삽입해주어야 한다.</p><p><img src="/2022/02/19/019-blog-apply-adsense/019-06.png"></p><p>광고 단위가 처음 만들어져 게시되는 경우 1시간 내외로 시간이 걸릴 수 있다.</p><p>콘텐츠 내 타입 광고는 아래와 같이 나타나게 된다!</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p>-</p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Etc/">Etc</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/19/019-blog-apply-adsense/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] Android 12 변경사항 일부 요약</title>
      <link>https://dl137584.github.io/2022/02/17/018-android12-summary/</link>
      <guid>https://dl137584.github.io/2022/02/17/018-android12-summary/</guid>
      <pubDate>Thu, 17 Feb 2022 11:00:01 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/about/versions/12/overview#timeline&quot;&gt;2021.12월&lt;/a&gt; 출시예정&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.a</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://developer.android.com/about/versions/12/overview#timeline">2021.12월</a> 출시예정</li><li><a href="https://developer.android.com/about/versions/12?hl=ko">Android 12 개발자 프리뷰</a> (2021.05.18)</li><li>[바이라인 네트워크] <a href="https://byline.network/2021/05/19-150/">구글 I/O 2021 키노트 총정리</a></li><li>Google Developer Korea - <a href="https://developers-kr.googleblog.com/2021/06/android-12-beta-2-update.html">Android 12 Beta 2 업데이트를 확인하세요</a> (2021.07.01)</li></ul><p>이하는 보편적으로 크게 영향있을 것 같은 것만 추렸다. Android 12 업데이트 관련하여 따로 targetSDK를 바꾸어 대응하지 않았기 때문에 간략하게만 요약하였다.</p><h1 id="Android-Developer-동작-변경사항-모든-앱"><a href="#Android-Developer-동작-변경사항-모든-앱" class="headerlink" title="Android Developer - 동작 변경사항: 모든 앱"></a>Android Developer - <a href="https://developer.android.com/about/versions/12/behavior-changes-all">동작 변경사항: 모든 앱</a></h1><h2 id="신뢰할-수-없는-터치-이벤트가-차단됨"><a href="#신뢰할-수-없는-터치-이벤트가-차단됨" class="headerlink" title="신뢰할 수 없는 터치 이벤트가 차단됨"></a>신뢰할 수 없는 터치 이벤트가 차단됨</h2><blockquote><p>이 변경사항은 FLAG_NOT_TOUCHABLE 플래그 등을 사용하여 터치가 창을 통과할 수 있도록 하는 앱에 영향을 줍니다.</p></blockquote><p>어떤 오브젝트가 화면을 가리고 있는데 그 아래에 위치된 오브젝트를 터치하고자 할 때 이 터치를 허용할지에 관한 내용이다..</p><h1 id="동작-변경사항-Android-12를-타겟팅하는-앱에만-영향"><a href="#동작-변경사항-Android-12를-타겟팅하는-앱에만-영향" class="headerlink" title="동작 변경사항: Android 12를 타겟팅하는 앱에만 영향"></a><a href="https://developer.android.com/about/versions/12/behavior-changes-12">동작 변경사항: Android 12를 타겟팅하는 앱에만 영향</a></h1><blockquote><p>앱이 Android 12를 타겟팅하고 인텐트 필터를 사용하는 활동이나 서비스, broadcast receiver를 포함하면 이러한 앱 구성요소의 <code>android:exported</code> 속성을 명시적으로 선언해야 합니다.</p></blockquote><p>예를 들자면 아래와 같다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.app.backgroundService&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.app.START_BACKGROUND&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/17/018-android12-summary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] Android 11 대응 - 2. 범위 지정 저장소 적용</title>
      <link>https://dl137584.github.io/2022/02/16/017-android11-scoped-storage/</link>
      <guid>https://dl137584.github.io/2022/02/16/017-android11-scoped-storage/</guid>
      <pubDate>Wed, 16 Feb 2022 09:43:30 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/about/versions/11/behavior-changes-11?hl=ko&quot;&gt;동작 변경사항: Android 11을 타겟팅하는 앱&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;bl</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://developer.android.com/about/versions/11/behavior-changes-11?hl=ko">동작 변경사항: Android 11을 타겟팅하는 앱</a></li></ul><blockquote><p>이 글은 실제로는 2021.01에 작성되어 일부 업데이트된 내용이 누락되었을 수 있음을 미리 밝힙니다.</p></blockquote><h1 id="1-내부-저장소와-외부-저장소"><a href="#1-내부-저장소와-외부-저장소" class="headerlink" title="1. 내부 저장소와 외부 저장소"></a><strong>1. 내부 저장소와 외부 저장소</strong></h1><p>내부 저장소에 저장된 파일은 애플리케이션 전용이며 다른 애플리케이션에서는 액세스 할 수 없다. 내부 저장소는 /data/data/com.example.testapp/ 이와 같은 경로를 말한다.</p><p>외부 저장소는 내부 저장소(UT) 또는 이동식 저장소의 어느 위치에나 있을 수 있다. 휴대전화의 OEM 및 Android OS 버전에 따라 달라질 수 있으므로 <strong>단말 기종마다 저장되는 위치가 다르</strong>다.</p><p>/sdcard 및 /storage/emulated/0 와 같은 형식의 패스는 외부 저장소를 가리킨다. 그러나 이것들은 /storage/sdcard0 대한 심볼릭 링크이기 때문에 (예전에는 된 것 같지만) 현재는 이와 같은 패스를 하드코딩하여 사용하지 않는 게 좋다.</p><h1 id="2-접근-권한"><a href="#2-접근-권한" class="headerlink" title="2. 접근 권한"></a><strong>2. 접근 권한</strong></h1><ul><li>READ_EXTERNAL_STORAGE</li><li>WRITE_EXTERNAL_STORAGE</li></ul><p>접근 권한은 위와 같이 잘 알려진 두 가지가 있으나 Android 11부터 WRITE_EXTERNAL_STORAGE만 권한허용을 해도 READ_EXTERNAL_STORAGE 권한은 자동으로 부여되도록 변경되었다.</p><blockquote><p>Any app that declares the WRITE_EXTERNAL_STORAGE permission is implicitly granted this permission.<br>역&gt; WRITE_EXTERNAL_STORAGE 권한을 허용한 앱은 내재적으로 READ_EXTERNAL_STORAGE 권한도 허용한다.</p></blockquote><h1 id="3-안드로이드-P이하에서의-저장소-링크"><a href="#3-안드로이드-P이하에서의-저장소-링크" class="headerlink" title="3. 안드로이드 P이하에서의 저장소 링크"></a><strong>3. 안드로이드 P이하에서의 저장소</strong> <a href="https://codechacha.com/ko/android-q-scoped-storage/">링크</a></h1><ul><li>앱 데이터 폴더 : /storage/Android/data/[앱의 package name]/</li><li>공용 폴더(DCIM, Pictures 등): /storage/[폴더 이름]</li></ul><h1 id="4-안드로이드-Q이상에서의-범위-지정-저장소-Scoped-Storage"><a href="#4-안드로이드-Q이상에서의-범위-지정-저장소-Scoped-Storage" class="headerlink" title="4. 안드로이드 Q이상에서의 범위 지정 저장소(Scoped Storage)"></a><strong>4. 안드로이드 Q이상에서의 범위 지정 저장소(Scoped Storage)</strong></h1><blockquote><p>Android 10(API 수준 29) 이상을 타겟팅하는 앱에는 기본적으로 외부 저장소로 범위가 지정된 액세스 권한 또는 범위 지정 저장소가 부여됩니다. - <a href="https://developer.android.com/training/data-storage?hl=ko#scoped-storage">범위지정 저장소</a></p></blockquote><p>Android 10에서는 선택적으로 범위지정 저장소를 사용하거나 사용하지 않을 수 있다.</p><p>Android 11(Q)이상부터는 강제로 바뀌는데, 범위지정 저장소는 아래와 같은 구조로 되어있다. 지칭하는 용어도 위치, 접근하는 방법(코드)도 완전히 바뀌기 때문에 Android 11 업데이트에서 가장 대응하기 난감했던 부분이다.</p><ul><li>앱 데이터 폴더(App specific directory)</li><li>미디어 파일들(MediaStore)</li><li>공용 파일들(Storage Access Framework)</li></ul><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h1 id="5-관련-이슈"><a href="#5-관련-이슈" class="headerlink" title="5. 관련 이슈"></a><strong>5. 관련 이슈</strong></h1><blockquote><p>java.io.FileNotFoundException: /storage/emulated/0/mediapicker/images/c.png: open failed: ENOENT (No such file or directory)</p></blockquote><p>기존에 사용하던 파일 접근 로직을 사용하는 중이라면 위와 같이 FileNotFoundException ENOENT error를 보게 된다. 원래 읽어오던 파일 또는 파일의 위치에 접근할 수 없어서 “찾을 수 없다”는 에러를 띄우는 것이다.</p><h1 id="6-변경-사항"><a href="#6-변경-사항" class="headerlink" title="6. 변경 사항"></a><strong>6. 변경 사항</strong></h1><p><img src="/2022/02/16/017-android11-scoped-storage/017-01.png" alt="Android Developer - Scoped Storage"></p><ul><li><strong>/sdcard 의 접근이 불가능</strong>해진다.</li><li>외부 저장소의 최상위 경로를 반환하는 Enviroment.getExternalStorageDirectory()는 Android 10(API 29)부터 deprecated 되었고, 위에서 말한 것처럼 Android 11에서는 더이상 사용할 수 없다.</li></ul><h1 id="7-Android-10-호환성을-위해-유지할-것"><a href="#7-Android-10-호환성을-위해-유지할-것" class="headerlink" title="7. Android 10 호환성을 위해 유지할 것"></a><strong>7. Android 10 호환성을 위해 유지할 것</strong></h1><p>Android 11에서는 해당 속성은 무시된다. 하지만 Android 10 호환성을 위해 requestLegacyExternalStorage=true 값을 유지해야 한다.</p><p><img src="/2022/02/16/017-android11-scoped-storage/017-02.png" alt="Android Developer - 범위 지정 저장소를 일시적으로 선택 해제"></p><h1 id="8-문제가-될만-한-호출-메소드"><a href="#8-문제가-될만-한-호출-메소드" class="headerlink" title="8. 문제가 될만 한 호출 메소드"></a><strong>8. 문제가 될만 한 호출 메소드</strong></h1><p>다음 두 개의 메소드는 Android 10(API 29)부터 deprecated 되니 Context#getExternalFilesDir() 또는 MediaStore, Intent#ACTION_OPEN_DOCUMENT로 대체해야 한다.</p><p><img src="/2022/02/16/017-android11-scoped-storage/017-03.png" alt="Android Developer"></p><h2 id="1-getExternalStorageDirectory"><a href="#1-getExternalStorageDirectory" class="headerlink" title="(1) getExternalStorageDirectory"></a><strong>(1) getExternalStorageDirectory</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> File Environment#getExternalStorageDirectory()</span><br></pre></td></tr></table></figure><p>Context#getExternalFilesDir()로 대체한다.</p><p>이 방식을 사용하는 건 다음 두 개를 만족하는 경우이다.</p><ol><li>앱이 삭제되면 같이 지워져도 된다.</li><li>외부에서 사용할 수 있도록 공공 저장소에 저장해도 된다.</li></ol><h2 id="2-getExternalStoragePublicDirectory"><a href="#2-getExternalStoragePublicDirectory" class="headerlink" title="(2) getExternalStoragePublicDirectory"></a><strong>(2) getExternalStoragePublicDirectory</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> File Environment#getExternalStoragePublicDirectory(String type)</span><br></pre></td></tr></table></figure><p>이는 사진 및 영화와 같이 잘 알려진 파일 유형을 저장하기 위한 중앙 집중식 장소이다. 이 디렉토리와 내용은 <strong>앱을 제거할 때 삭제되지 않는다</strong>.(ex 위치: DCIM)</p><p>MediaStore 또는 Intent#ACTION_OPEN_DOCUMENT 사용하여 대체</p><p>ACTION_OPEN_DOCUMENT는 파일을 선택할 수 있는 파일 탐색기가 뜨도록 유도할 수 있으며, MediaStore를 사용한 예는 아래와 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q) &#123;</span><br><span class="line">    SimpleDateFormat format1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd_HH:mm:ss&quot;</span>);</span><br><span class="line">    String fileName = format1.format(System.currentTimeMillis()) + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">    <span class="comment">// DCIM/ 또는 Pictures/ 이외의 장소에 접근하려고 하면 오류</span></span><br><span class="line">    values.put(MediaStore.Images.Media.RELATIVE_PATH, <span class="string">&quot;DCIM/&quot;</span> + CommConstants.FOLDER_DIRECTORY);</span><br><span class="line">    values.put(MediaStore.Images.Media.DISPLAY_NAME, fileName);</span><br><span class="line">    values.put(MediaStore.Images.Media.MIME_TYPE, <span class="string">&quot;image/*&quot;</span>);</span><br><span class="line">    values.put(MediaStore.Images.Media.IS_PENDING, <span class="number">1</span>); <span class="comment">// 파일을 write중이라면 다른곳에서 데이터요구를 무시</span></span><br><span class="line"></span><br><span class="line">    ContentResolver contentResolver = getContentResolver();</span><br><span class="line">    Uri collection = MediaStore.Images.Media.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY);</span><br><span class="line">    Uri item = contentResolver.insert(collection, values);</span><br><span class="line">    ParcelFileDescriptor imageFile = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Uri(item)의 위치에 파일을 생성해준다.</span></span><br><span class="line">        imageFile = contentResolver.openFileDescriptor(item, <span class="string">&quot;w&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (imageFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">            InputStream inputStream = getImageInputStream(bitmap);</span><br><span class="line">            <span class="keyword">byte</span>[] strToByte = getBytes(inputStream);</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(imageFile.getFileDescriptor());</span><br><span class="line">            fos.write(strToByte);</span><br><span class="line">            fos.close();</span><br><span class="line">            inputStream.close();</span><br><span class="line">            imageFile.close();</span><br><span class="line">            contentResolver.update(item, values, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (imageFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">        values.clear();</span><br><span class="line">        values.put(MediaStore.Images.Media.IS_PENDING, <span class="number">0</span>); <span class="comment">// 파일을 모두 write하고 다른곳에서 사용할 수 있도록 0으로 업데이트</span></span><br><span class="line">        contentResolver.update(item, values, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-MediaStore-MediaColumns-DATA-칼럼-접근-불가"><a href="#3-MediaStore-MediaColumns-DATA-칼럼-접근-불가" class="headerlink" title="(3) MediaStore.MediaColumns.DATA 칼럼 접근 불가"></a><strong>(3) MediaStore.MediaColumns.DATA 칼럼 접근 불가</strong></h2><blockquote><p>query issue: invalid column latitude</p></blockquote><p>MediaStore.MediaColumns.DATA 칼럼이 android 10부터 deprecated되어 접근할 수 없어서 발생하는 이슈이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRealPathFromURI</span><span class="params">(Context context, Uri contentUri)</span> <span class="keyword">throws</span> SecurityException </span>&#123;</span><br><span class="line">  String res = <span class="keyword">null</span>;</span><br><span class="line">  String[] proj = &#123;MediaStore.MediaColumns.DATA, MediaStore.MediaColumns.DISPLAY_NAME&#125;;</span><br><span class="line">  Cursor cursor = context.getContentResolver().query(contentUri, proj, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">  <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToFirst()) &#123;</span><br><span class="line">    <span class="keyword">int</span> columnIndex = (contentUri.toString().startsWith(<span class="string">&quot;content://com.google.android.gallery3d&quot;</span>)) ?</span><br><span class="line">        cursor.getColumnIndexOrThrow(MediaStore.MediaColumns.DISPLAY_NAME) :</span><br><span class="line">        cursor.getColumnIndexOrThrow(MediaStore.MediaColumns.DATA);</span><br><span class="line">    res = cursor.getString(columnIndex);</span><br><span class="line">    cursor.close();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (TextUtils.isEmpty(res)) &#123;</span><br><span class="line">    res = contentUri.getPath();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>따라서 이미지는 Q 미만일 때 위의 코드를 그대로 사용하면서, 비디오를 업로드할 경우는 아래의 코드를 통해 새로 카피본을 만들어 File을 받아 처리하도록 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getVideoFile</span><span class="params">(Context context, Uri contentUri)</span> <span class="keyword">throws</span> SecurityException </span>&#123;</span><br><span class="line">  ContentResolver contentResolver = context.getContentResolver();</span><br><span class="line">  String filePath = context.getApplicationInfo().dataDir + <span class="string">&quot;/&quot;</span> + UPLOAD_FILE_NAME_ORIGIN_VIDEO;</span><br><span class="line">  File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">  <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">    <span class="keyword">return</span> file;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    InputStream inputStream = contentResolver.openInputStream(contentUri);</span><br><span class="line">    OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">    <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((len = inputStream.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      outputStream.write(buf, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    outputStream.close();</span><br><span class="line">    inputStream.close();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h1 id="9-파일-저장-위치"><a href="#9-파일-저장-위치" class="headerlink" title="9. 파일 저장 위치"></a><strong>9. 파일 저장 위치</strong></h1><p>이미지의 경우, 사진 및 스크린샷을 포함하며 DCIM/ 및 Pictures/ 디렉터리에 저장된다. 시스템은 이러한 파일을 <a href="https://developer.android.com/reference/android/provider/MediaStore.Images?hl=ko">MediaStore.Images</a> 테이블에 추가한다. 즉, 파일 탐색기에서 Images 영역에 가면 저장한 파일을 확인할 수 있다.</p><p>만약 DCIM/ 또는 Pictures/ 이외의 장소에 접근하려고 하면 아래와 같은 에러가 뜬다.</p><blockquote><p>Caused by: java.lang.IllegalArgumentException: Primary directory TestDir not allowed for content://media/external_primary/images/media; allowed directories are [DCIM, Pictures]</p></blockquote><p><img src="/2022/02/16/017-android11-scoped-storage/017-04.png" alt="파일 탐색기 &gt; Images"></p><p>이미지 외의 파일 종류에 관해서는 <a href="https://developer.android.com/training/data-storage/shared/media?hl=ko">Android Developer - 공유 저장소의 미디어 파일에 액세스</a>를 참조할 것.</p><h1 id="10-Android-10-애뮬레이터-테스트"><a href="#10-Android-10-애뮬레이터-테스트" class="headerlink" title="10. Android 10 애뮬레이터 테스트"></a><strong>10. Android 10 애뮬레이터 테스트</strong></h1><blockquote><p>그런데 이 설정을 하지 않아도 Android 11 애뮬레이터로 처음 실행했을 때 관련 이슈는 바로 재현 가능했으니 참고 하시기.</p></blockquote><p>테스트를 위해 필요한 플래그는 다음의 두 가지이다.</p><ul><li>DEFAULT_SCOPED_STORAGE(기본적으로 모든 앱에 사용 설정됨)</li><li><a href="https://developer.android.com/about/versions/11/test-changes?hl=ko#force_enable_scoped_storage">FORCE_ENABLE_SCOPED_STORAGE</a>(기본적으로 모든 앱에 사용 중지됨)</li></ul><p>FORCE_ENABLE_SCOPED_STORAGE 플래그를 설정하기 위해 <strong>시스템 &gt; 고급 &gt; 개발자 옵션 &gt; 앱 호환성 변경사항 &gt; 앱 &gt;</strong> 에서 FORCE_ENABLE_SCOPED_STORAGE 항목을 찾아 on 시킨다.</p><p><img src="/2022/02/16/017-android11-scoped-storage/017-05.png"></p><p><img src="/2022/02/16/017-android11-scoped-storage/017-06.png" alt="개발자 옵션 &gt; 앱 호환성 변경사항"></p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/16/017-android11-scoped-storage/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] Android 11 대응 - 1. 패키지 공개 상태</title>
      <link>https://dl137584.github.io/2022/02/14/016-android11-package/</link>
      <guid>https://dl137584.github.io/2022/02/14/016-android11-package/</guid>
      <pubDate>Mon, 14 Feb 2022 12:45:40 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;변경사항-확인해보는-방법&quot;&gt;&lt;a href=&quot;#변경사항-확인해보는-방법&quot; class=&quot;headerlink&quot; title=&quot;변경사항 확인해보는 방법&quot;&gt;&lt;/a&gt;&lt;strong&gt;변경사항 확인해보는 방법&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="변경사항-확인해보는-방법"><a href="#변경사항-확인해보는-방법" class="headerlink" title="변경사항 확인해보는 방법"></a><strong>변경사항 확인해보는 방법</strong></h1><p><img src="/2022/02/14/016-android11-package/016-01.png" alt="Android Developer"></p><h1 id="문제가-될만-한-호출-메소드"><a href="#문제가-될만-한-호출-메소드" class="headerlink" title="문제가 될만 한 호출 메소드"></a><strong>문제가 될만 한 호출 메소드</strong></h1><ul><li><p><code>packageManager.getInstalledApplications()</code> 또는 <code>packageManager.getInstalledPackages()</code> </p></li><li><p><code>packageManager.resolveActivity(intent, 0)</code> </p></li><li><p><code>packageManager.queryIntentActivities(intent, flags)</code> </p></li><li><p><code>packageManager.getPackageInfo(&quot;packageName&quot;, flags)</code> </p></li><li><p><code>packageManager.getLaunchIntentForPackage(packageName)</code></p></li></ul><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h1 id="방법-1-QUERY-ALL-PACKAGES"><a href="#방법-1-QUERY-ALL-PACKAGES" class="headerlink" title="방법 1. QUERY_ALL_PACKAGES"></a><strong>방법 1. QUERY_ALL_PACKAGES</strong></h1><p>QUERY_ALL_PACKAGES 권한을 추가하면 모든 앱을 찾거나 실행할 수 있다. 이 퍼미션은 어떤 앱이든 받을 수 있는 Install permission이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.QUERY_ALL_PACKAGES&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h1 id="방법-2-lt-queries-gt-태그"><a href="#방법-2-lt-queries-gt-태그" class="headerlink" title="방법 2. &lt;queries&gt; 태그"></a><strong>방법 2. &lt;queries&gt; 태그</strong></h1><h2 id="gradle-version-확인하기"><a href="#gradle-version-확인하기" class="headerlink" title="gradle version 확인하기"></a><strong>gradle version 확인하기</strong></h2><p>queries 태그를 사용하기 위한 준비작업이다.</p><p><img src="/2022/02/14/016-android11-package/016-02.png" alt="Android developer"></p><p>좌측과 같은 버전을 사용하고 있다면 우측 이상에 해당하는 버전이 맞는지 확인해야 한다.</p><h2 id="queries-태그-사용"><a href="#queries-태그-사용" class="headerlink" title="queries 태그 사용"></a><strong>queries 태그 사용</strong></h2><p>이제 의존성을 가진 모든 앱의 패키지 정의를 queries 태그에 추가 적용한다.</p><ul><li><a href="https://developer.android.com/training/basics/intents/package-visibility-use-cases?hl=ko">사용 사례별로 패키지 공개상태 구성</a></li></ul><p>Android11에서는 기본적으로 자신의 앱이 아닌, 다른 패키지를 찾거나 다른 패키지의 액티비티를 실행할 수 없다. 따라서 자신의 앱 동작에 의존적인 패키지가 있다면 AndroidManifest에 <strong>&lt;queries&gt; 태그</strong>로 필요한 패키지를 정의해야 한다.</p><p>다시 말해, 자신의 앱에서 다른 앱을 찾거나(탐색), 다른 앱을 실행하는 동작이 필요할 경우 그 앱의 패키지를 미리 자신의 앱에 정의해두어야 한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- manifest 태그에 package 속성을 정의하는 것은 optional --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">package</span>=<span class="string">&quot;com.example.game&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">queries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.store&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.services&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.SEND&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">&quot;text/plain&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">queries</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/14/016-android11-package/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] ViewPager.addOnPageChangeListener</title>
      <link>https://dl137584.github.io/2022/02/11/015-viewpager-addonpagechangelistener/</link>
      <guid>https://dl137584.github.io/2022/02/11/015-viewpager-addonpagechangelistener/</guid>
      <pubDate>Fri, 11 Feb 2022 12:57:55 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://davinci505.tistory.com/entry/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-RecyclerView-%EC%8A%A4%ED%81%AC%EB%A1%A</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://davinci505.tistory.com/entry/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-RecyclerView-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EA%B0%90%EC%A7%80">onScrollStateChanged</a></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">loopViewPager.addOnPageChangeListener(<span class="keyword">object</span> : ViewPager.OnPageChangeListener &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPageSelected</span><span class="params">(position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    loopViewPager.currentItem = position</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPageScrolled</span><span class="params">(position: <span class="type">Int</span>, positionOffset: <span class="type">Float</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      positionOffsetPixels: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPageScrollStateChanged</span><span class="params">(state: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state == RecyclerView.SCROLL_STATE_DRAGGING) &#123;</span><br><span class="line">      <span class="comment">// 수동으로 스크롤 시에만 터치했을 때</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == RecyclerView.SCROLL_STATE_SETTLING)&#123;</span><br><span class="line">      <span class="comment">// 스크롤이 움직인 후 픽스되는 순간</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == RecyclerView.SCROLL_STATE_IDLE) &#123;</span><br><span class="line">      <span class="comment">// 아무것도 수행하지 않을 때</span></span><br><span class="line">      <span class="comment">// (즉, 스크롤이 움직이지 않고, 스크롤을 수동으로 잡고 있지 않음.)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h1 id="onPageSelected"><a href="#onPageSelected" class="headerlink" title="onPageSelected"></a>onPageSelected</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>페이지 인덱스가 변경되지 않는다면 이 메소드는 호출되지 않는다.  (수동으로 스크롤 하다가 뗐을 때 재현가능)</li><li>position: 스크롤 시 선택된 페이지의 인덱스</li></ul><h1 id="onPageScrolled"><a href="#onPageScrolled" class="headerlink" title="onPageScrolled"></a>onPageScrolled</h1><h2 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h2><ul><li>사용자의 터치 스크롤 &amp; smooth 스크롤 시에 호출된다.</li><li>position: <a href="https://kingorihouse.tumblr.com/post/87079690019/android-viewpageronpagechangelistener-%EC%9D%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A0%84%EB%8B%AC-%EC%88%9C%EC%84%9C">링크</a>에 따르면, “SETTLE 상태에서는 대상 페이지가 넘어오고, DRAGGING 상태에서는 출발 페이지가 넘어온다”고 한다. 따라서 이를 활용하기는 어려울 것 같아 사용하지 않음.</li><li>positionOffset: 0.0 ~ 1 사이의 값.  왼쪽으로 스크롤 시 1 -&gt; 0.0으로 감소하며, 오른쪽으로 스크롤 시 0.0 -&gt; 1로 증가한다.</li></ul><h1 id="onPageScrollStateChanged"><a href="#onPageScrollStateChanged" class="headerlink" title="onPageScrollStateChanged"></a>onPageScrollStateChanged</h1><h2 id="특징-2"><a href="#특징-2" class="headerlink" title="특징"></a>특징</h2><ul><li>페이지 인덱스가 변경될 경우, 변경되지 않을 경우 포함</li><li>상태가 변경될 경우 한 번씩 호출된다.</li></ul><h2 id="이벤트-전달-순서"><a href="#이벤트-전달-순서" class="headerlink" title="이벤트 전달 순서"></a>이벤트 전달 순서</h2><ul><li>수동으로 스크롤 시 페이지를 변경했을 때 순서  SCROLL_STATE_DRAGGING -&gt; SCROLL_STATE_SETTLING -&gt; onPageSelected SCROLL_STATE_IDLE</li><li>loopViewPager.setCurrentItem으로 스크롤될 경우 순서  SCROLL_STATE_SETTLING -&gt; onPageSelected -&gt; SCROLL_STATE_IDLE</li><li>수동으로 스크롤 시 페이지를 변경하지 않았을 경우 순서  SCROLL_STATE_DRAGGING -&gt; SCROLL_STATE_SETTLING -&gt; SCROLL_STATE_IDLE</li></ul>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/11/015-viewpager-addonpagechangelistener/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] Parcelable: Java와 Kotlin 구현 차이</title>
      <link>https://dl137584.github.io/2022/02/10/014-parcelable-in-java-and-kotlin/</link>
      <guid>https://dl137584.github.io/2022/02/10/014-parcelable-in-java-and-kotlin/</guid>
      <pubDate>Thu, 10 Feb 2022 10:37:39 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Parcelable을-상속받아-클래스-생성할-경우-CREATOR의-정의&quot;&gt;&lt;a href=&quot;#Parcelable을-상속받아-클래스-생성할-경우-CREATOR의-정의&quot; class=&quot;headerlink&quot; title=&quot;Parcelable을 상속</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Parcelable을-상속받아-클래스-생성할-경우-CREATOR의-정의"><a href="#Parcelable을-상속받아-클래스-생성할-경우-CREATOR의-정의" class="headerlink" title="Parcelable을 상속받아 클래스 생성할 경우 CREATOR의 정의"></a><strong>Parcelable을 상속받아 클래스 생성할 경우 CREATOR의 정의</strong></h2><blockquote><p>Parcelable protocol requires a Parcelable.Creator object called CREATOR</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;DataClass&gt; CREATOR = <span class="keyword">new</span> Creator&lt;DataClass&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SearchInfo <span class="title">createFromParcel</span><span class="params">(Parcel parcel)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DataClass(parcel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DataClass[] newArray(<span class="keyword">int</span> i) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DataClass[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이걸 코틀린 코드로 변환하면 다음과 같이 만들 수 있으나-</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JvmField</span> <span class="comment">// 프로젝트에 자바 클래스도 존재하는 경우 JvmField 어노테이션 누락에 주의할 것 </span></span><br><span class="line"><span class="keyword">val</span> CREATOR: Parcelable.Creator&lt;DataClass&gt; = <span class="keyword">object</span> : Parcelable.Creator&lt;DataClass&gt; &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">createFromParcel</span><span class="params">(parcel: <span class="type">Parcel</span>)</span></span>: DataClass &#123;</span><br><span class="line">    <span class="keyword">return</span> DataClass(parcel)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">newArray</span><span class="params">(i: <span class="type">Int</span>)</span></span>: Array&lt;DataClass?&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> arrayOfNulls&lt;DataClass?&gt;(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="코틀린-Parcelable-구현"><a href="#코틀린-Parcelable-구현" class="headerlink" title="[코틀린] Parcelable 구현"></a><strong>[코틀린] Parcelable 구현</strong></h2><p>-그러나 코틀린에서는 Parcelable 구현을 위해 <code>@Parcelize</code> 어노테이션을 제공하고 있기 때문에 꼭 필요한 경우가 아니면 자바와 같이 CREATOR를 만들 필요는 없다.</p><p>코틀린에서 구현한 Parcelable을 상속받은 Data Class는 다음과 같다. 이 코드는 이 자체만으로도 내부에서 CREATOR 기능을 수행한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Parcelable</span><br><span class="line"><span class="keyword">import</span> com.google.gson.annotations.SerializedName</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.parcel.Parcelize</span><br><span class="line"></span><br><span class="line"><span class="meta">@Parcelize</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">ParcelData</span></span>(<span class="meta">@SerializedName(<span class="meta-string">&quot;A&quot;</span>)</span> <span class="keyword">var</span> a: String? = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                      <span class="meta">@SerializedName(<span class="meta-string">&quot;B&quot;</span>)</span> <span class="keyword">var</span> b: String? = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                      <span class="meta">@SerializedName(<span class="meta-string">&quot;C&quot;</span>)</span> <span class="keyword">var</span> c: ArrayList&lt;AnyData&gt;? = arrayListOf()): Parcelable</span><br></pre></td></tr></table></figure><p>참고를 위해 Parcelize 어노테이션에 작성된 주석의 일부를 가져왔다.</p><blockquote><p>Instructs the Kotlin compiler to generate <code>writeToParcel()</code>, <code>describeContents()</code>[android.os.Parcelable] methods, as well as a <code>CREATOR</code> factory class automatically.</p></blockquote><p>이는 자바 코드(또는 코틀린 코드) 상에서 <code>putExtra</code>를 통해 전달할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ParcelData p = <span class="keyword">new</span> ParcelData();</span><br><span class="line">intent.putExtra(<span class="string">&quot;extra&quot;</span>, p);</span><br></pre></td></tr></table></figure><p>그리고 intent를 통해 이동한 액티비티에서는 <code>getParcelableExtra</code>로 데이터를 받아올 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/10/014-parcelable-in-java-and-kotlin/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] 다른 앱 위에 그리기 권한: TYPE_APPLICATION_OVERLAY</title>
      <link>https://dl137584.github.io/2022/02/09/013-type-application-overlay/</link>
      <guid>https://dl137584.github.io/2022/02/09/013-type-application-overlay/</guid>
      <pubDate>Wed, 09 Feb 2022 12:00:43 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;[다른 앱 위의 그리기]는 폰 설정 &amp;gt; 애플리케이션 &amp;gt; 앱 &amp;gt; 고급 [다른 앱 위에 표시되는 앱]에서 권한 설정할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/02/09/013-type-application-overlay/</description>
        
      
      
      
      <content:encoded><![CDATA[<p>[다른 앱 위의 그리기]는 폰 설정 &gt; 애플리케이션 &gt; 앱 &gt; 고급 [다른 앱 위에 표시되는 앱]에서 권한 설정할 수 있다.</p><p><img src="/2022/02/09/013-type-application-overlay/013-01.png"></p><h2 id="퍼미션"><a href="#퍼미션" class="headerlink" title="퍼미션"></a><strong>퍼미션</strong></h2><p>[다른 앱 위에 그리기] 설정을 추가하려면 Manifest에 이를 사용하겠다고 퍼미션을 추가해야하는데,</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="권한-다른-앱-위에-그리기-Draw-over-other-apps-Appear-on-top"><a href="#권한-다른-앱-위에-그리기-Draw-over-other-apps-Appear-on-top" class="headerlink" title="권한: 다른 앱 위에 그리기(Draw over other apps / Appear on top)"></a><strong>권한: 다른 앱 위에 그리기(Draw over other apps / Appear on top)</strong></h2><p>위 퍼미션을 추가하면 앱 설정(설정&gt;애플리케이션&gt;해당 앱)에 [다른 앱 위에 그리기] 정보가 뜬다. (안드로이드 버전마다 언어:영어일 때의 표시나 노출 위치는 다를 수 있다.)</p><p>중요한 것은 [다른 앱 위에 그리기]의 기본값이 버전마다 다르다는 건데,</p><ul><li><strong>API level 23(Android 6.0 Marshmallow)</strong> 미만에서는 true</li><li>그 이상에서는 false</li></ul><p>앱스토어에서 설치할 경우 기본적으로 위와 같이 설정되어 유저의 단말에 설치됨을 숙지하여 기능구현 프로세스를 짜야한다.</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="버전-체크-방법"><a href="#버전-체크-방법" class="headerlink" title="버전 체크 방법"></a><strong>버전 체크 방법</strong></h2><p><img src="/2022/02/09/013-type-application-overlay/013-02.png"></p><p>[다른 앱 위에 그리기] 기능이 필요할 경우 API level 23 이상에서는 버전 체크 처리를 해주어야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* REQ_CODE_OVERLAY_PERMISSION는 임의로 정한 상수</span></span><br><span class="line"><span class="comment">   onActivityResult(int requestCode, int resultCode, Intent data)에서 requestCode로 받을 때 사용함 */</span></span><br><span class="line"><span class="meta">@TargetApi(Build.VERSION_CODES.M)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onObtainingPermissionOverlayWindow</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(<span class="string">&quot;package:&quot;</span> + context.getPackageName());</span><br><span class="line">    ((Activity) context).startActivityForResult(intent, REQ_CODE_OVERLAY_PERMISSION);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>덧붙여 [다른 앱 위에 그리기] 설정값이 true인지 확인하는 방법은 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">alertPermissionCheck</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M</span><br><span class="line">&amp;&amp; !Settings.canDrawOverlays(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="주의-deprecated-된-WindowManager-LayoutParams의-플래그"><a href="#주의-deprecated-된-WindowManager-LayoutParams의-플래그" class="headerlink" title="주의: deprecated 된 WindowManager.LayoutParams의 플래그"></a><strong>주의: deprecated 된 WindowManager.LayoutParams의 플래그</strong></h2><ul><li>TYPE_PHONE</li><li>TYPE_PRIORITY_PHONE</li><li>TYPE_SYSTEM_ALERT</li><li>TYPE_SYSTEM_ERROR</li><li>TYPE_SYSTEM_OVERLAY</li><li>TYPE_TOAST</li></ul><p>위에 나열된 타입은 API level 26(Android 8.0 Oreo)에 deprecated 되어 아래와 같이 Android Developer 에서는 이것들 대신 <strong>TYPE_APPLICATION_OVERLAY</strong>를 쓰도록 가이드 하고 있다.</p><p><img src="/2022/02/09/013-type-application-overlay/013-03.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> param: WindowManager.LayoutParams</span><br><span class="line"><span class="keyword">val</span> flag = <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.Version_CODES.O) &#123;</span><br><span class="line">    WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY</span><br><span class="line">&#125;</span><br><span class="line">param = WindowManager.LayoutParams(width,</span><br><span class="line">    WindowManager.LayoutParams.WRAP_CONTENT,</span><br><span class="line">flag, ...);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/09/013-type-application-overlay/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>탐욕법(Greedy Algorithm)</title>
      <link>https://dl137584.github.io/2022/02/05/012-greedy-algorithm/</link>
      <guid>https://dl137584.github.io/2022/02/05/012-greedy-algorithm/</guid>
      <pubDate>Sat, 05 Feb 2022 11:40:31 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;탐욕법-Greedy-Algorithm-이란&quot;&gt;&lt;a href=&quot;#탐욕법-Greedy-Algorithm-이란&quot; class=&quot;headerlink&quot; title=&quot;탐욕법(Greedy Algorithm)이란?&quot;&gt;&lt;/a&gt;탐욕법(Greedy Algor</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="탐욕법-Greedy-Algorithm-이란"><a href="#탐욕법-Greedy-Algorithm-이란" class="headerlink" title="탐욕법(Greedy Algorithm)이란?"></a>탐욕법(Greedy Algorithm)이란?</h1><p>미래를 고려하지 않고 각 단계에서 최적의 해를 찾아 모든 단계를 진행할 경우 최선의 결과에 도달한다고 생각하는 알고리즘.</p><p><img src="/2022/02/05/012-greedy-algorithm/012-01.png"></p><ul><li>참고: <a href="https://brilliant.org/wiki/greedy-algorithm/">Greedy Algorithms | Brilliant Math &amp; Science Wiki</a></li></ul><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>전체적인 최적해를 보장할 수 없다.</li><li>선택한 것을 번복하지 않는다.</li><li>직관적</li></ul><h2 id="예시-최소-신장-트리"><a href="#예시-최소-신장-트리" class="headerlink" title="예시, 최소 신장 트리"></a>예시, 최소 신장 트리</h2><ul><li>참고: <a href="https://adrian0220.tistory.com/57">14. 탐욕 알고리즘 (Greedy Algorithm) - 1</a></li></ul><h2 id="예시-거스름돈-최소-개수-반환"><a href="#예시-거스름돈-최소-개수-반환" class="headerlink" title="예시, 거스름돈 최소 개수 반환"></a>예시, 거스름돈 최소 개수 반환</h2><p>거슬러줄 돈(w)에서 동전(10, 50, 100, 500)을 뺐을 때 그 값이 <strong>가장 작은</strong> 경우의 동전을 우선 반환한다.</p><p>여기서 “뺀 값이 가장 작은 경우가 최적의 해”라는 게 이 문제에서 가장 근본적인 명제이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 거스름돈 최소 개수 반환</span></span><br><span class="line"><span class="keyword">int</span> change = w; <span class="comment">//입력: 거슬러줄 돈</span></span><br><span class="line"><span class="keyword">int</span> n500, n100, n50, n10 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(change &gt;= <span class="number">500</span>) &#123;</span><br><span class="line">    change -= <span class="number">500</span>; n500++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(change &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">    change -= <span class="number">100</span>; n100++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(change &gt;= <span class="number">50</span>) &#123;</span><br><span class="line">    change -= <span class="number">50</span>; n50++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(change &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">    change -= <span class="number">10</span>; n10++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n500 + n100 + n50 + n10;</span><br></pre></td></tr></table></figure><p>단, 200원에 대해 동전이 위의 네 가지 밖에 없다면 최종해는 100*2로 “2”겠지만, 160원짜리 동전이 만들어진다면  160*1 + 10*4로 “5”가 나오기 때문에 탐욕법으로 최적해를 찾을 수 없게 된다. 이처럼 모든 상황에서 최적해를 찾을 수 있는 유연한 방법이 아니다.</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h1 id="동적-계획법과-비교된다"><a href="#동적-계획법과-비교된다" class="headerlink" title="동적 계획법과 비교된다."></a>동적 계획법과 비교된다.</h1><blockquote><p>동적 계획법(Dynamic Programming)이란, 전체를 바라보고 그것을 여러 개의 하위 문제들로 나누어 각 하위 문제들의 답을 이용해 최종 답을 내는 것이다.(복잡한 문제를 간단한 여러 개의 문제로 나누어 푸는 방법)</p></blockquote><h2 id="동적-계획법-특징"><a href="#동적-계획법-특징" class="headerlink" title="동적 계획법 특징"></a>동적 계획법 특징</h2><ul><li>큰 문제 안에 작은 문제가 중첩되어 있는 문제를 해결하는 데 사용. 예를 들어, 피보나치 수열.</li><li>중첩되는 데이터라면 저장하고, 지속적으로 데이터를 참조한다.</li></ul><p>피보나치 수열을 간단하게 코드화하면 아래와 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이때, fib(5)를 구하려고 하면 fib(2)의 계산은 여러번 중복된다. 이로 인한 계산 속도의 저하를 막기 위해 fib(2)와 같이 중복되는 값은 배열에 저장하여 필요할 때 배열에 접근해서 값을 가져오는 방식이다.</p><p>중복계산이 줄어들기 때문에 시간 복잡도는 O(n)가 된다.</p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Algorithm/">Algorithm</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/05/012-greedy-algorithm/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] 메모리 캐시와 디스크 캐시</title>
      <link>https://dl137584.github.io/2022/02/05/010-memory-cache-and-disk-cache/</link>
      <guid>https://dl137584.github.io/2022/02/05/010-memory-cache-and-disk-cache/</guid>
      <pubDate>Sat, 05 Feb 2022 11:30:11 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;브라우저에서의-메모리-디스크-캐시&quot;&gt;&lt;a href=&quot;#브라우저에서의-메모리-디스크-캐시&quot; class=&quot;headerlink&quot; title=&quot;브라우저에서의 메모리/디스크 캐시&quot;&gt;&lt;/a&gt;&lt;strong&gt;브라우저에서의 메모리/디스크 캐시&lt;/stro</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="브라우저에서의-메모리-디스크-캐시"><a href="#브라우저에서의-메모리-디스크-캐시" class="headerlink" title="브라우저에서의 메모리/디스크 캐시"></a><strong>브라우저에서의 메모리/디스크 캐시</strong></h1><p><a href="https://mygumi.tistory.com/275">메모리 캐시 vs 디스크 캐시 :: 마이구미</a> (정리잘되어있음)</p><p>아래는 해당 링크의 요약본이다.</p><h2 id="브라우저-측면이-아닌-하드웨어-측면에서-보면"><a href="#브라우저-측면이-아닌-하드웨어-측면에서-보면" class="headerlink" title="브라우저 측면이 아닌 하드웨어 측면에서 보면,"></a>브라우저 측면이 아닌 하드웨어 측면에서 보면,</h2><ul><li>관련설명 잘 되어있는 추천영상: [bRd 3D] CPU는 어떻게 작동할까? <a href="https://youtu.be/Fg00LN30Ezg">유투브링크</a></li><li>디스크 캐시는 하드디스크에 접근하는 시간을 개선하기 위해 RAM에 저장하는 기법이다.</li><li>캐시 메모리는 램에 접근하지 않고 더 빠른 시간으로 접근할 수 있는 CPU 칩 안에 있는 작지만 빠른 메모리이다.(L1, L2, L3)</li></ul><p><img src="/2022/02/05/010-memory-cache-and-disk-cache/010-01.png"></p><h2 id="브라우저-측면에서-보면"><a href="#브라우저-측면에서-보면" class="headerlink" title="브라우저 측면에서 보면,"></a>브라우저 측면에서 보면,</h2><p>기본적으로 캐시 데이터는 하드디스크에 저장되는데(즉, 디스크 캐시), 재사용 및 I/O 최소화 등의 이점이 있으나 더 빠른 처리를 위해 I/O 없이 웹코어 내부로 바로 접근하여 데이터를 가져오는 메모리 캐시가 존재한다.</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h1 id="앱-비트맵-캐싱"><a href="#앱-비트맵-캐싱" class="headerlink" title="앱, 비트맵 캐싱"></a><strong>앱, 비트맵 캐싱</strong></h1><ul><li>참고 문서<ul><li>안드로이드 공식 문서 - <a href="https://developer.android.com/topic/performance/graphics/cache-bitmap?hl=ko">비트맵 캐싱</a></li><li>찰스의 안드로이드 - <a href="https://www.charlezz.com/?p=44551">안드로이드에서 LruCache를 파헤치기</a></li></ul></li></ul><blockquote><p>비트맵 캐싱은 LruCache를 사용하는 대표적인 예다.</p></blockquote><p>디스크 캐시 및 메모리 캐시에 대해 구분하고자 한 계기는 Glide다. Glide에서는 비트맵 풀 설정을 재정의할 때 다음과 같이 사용한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> bitmapPoolSizeBytes = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">30</span>; <span class="comment">// 30mb</span></span><br><span class="line">builder.setBitmapPool(<span class="keyword">new</span> LruBitmapPool(bitmapPoolSizeBytes));</span><br></pre></td></tr></table></figure><p>(참고로 기존에 사용하던 UIL의 설정 중 하나는 <code>.memoryCache(new LruMemoryCache(2 * 1024 * 1024))</code>였다.)</p><p>또한, 메모리 캐시를 사용하지 않거나 디스크 캐시를 어떻게 사용할지 Strategy(전략)을 설정할 수 있도록 하였다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.skipMemoryCache(<span class="keyword">true</span>) <span class="comment">// default is false</span></span><br><span class="line">.diskCacheStrategy(DiskCacheStrategy.NONE) <span class="comment">// default is AUTO</span></span><br></pre></td></tr></table></figure><p>그렇다면 왜 이 둘은 나뉘어져 있고, 왜 Lru를 사용할까.</p><h2 id="비트맵-캐싱-측면에서-보는-메모리-캐시와-디스크-캐시"><a href="#비트맵-캐싱-측면에서-보는-메모리-캐시와-디스크-캐시" class="headerlink" title="비트맵 캐싱 측면에서 보는 메모리 캐시와 디스크 캐시"></a>비트맵 캐싱 측면에서 보는 메모리 캐시와 디스크 캐시</h2><blockquote><p>메모리 캐시는 “중요한 애플리케이션 메모리”를 사용하는 대신 비트맵에 빠르게 액세스할 수 있다. (인용 출처: 공식문서)</p></blockquote><blockquote><p>주석 &gt; <a href="https://stackoverflow.com/questions/9916829/how-do-i-view-android-application-specific-cache">링크</a> “중요한 애플리케이션 메모리”는 View &gt; Tool Windows &gt; Device File Explorer 로 들어가서 data/data 하위 폴더에서 확인할 수 있다.</p></blockquote><p>하지만 애플리케이션이 종료되면 메모리 캐시는 사라지기 때문에, 일부 데이터는 “유지”될 필요가 있다.</p><blockquote><p>이러한 경우 디스크 캐시를 사용하여 처리된 비트맵을 “유지”하고 메모리 캐시에서 이미지가 더 이상 사용 가능하지 않을 때 로드 시간을 줄일 수 있습니다.</p></blockquote><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>즉, 메모리 캐시는 빠르다. 앱 자체에서 가장 빠르게 도달할 수 있는 메모리에 저장되기 때문이다. 하지만 그 용량이 작아 이미지 로딩이 많은 경우 문제가 될 수 있으므로 디스크 캐시를 함께 사용하게된다.</p><p>디스크 캐시는 메모리 캐시에 비해서는 느리다. 따라서 여기에서 이미지를 불러올 경우 백그라운드에서 로딩이 되도록 비동기 처리를 함께 해줘야하는 대신 용량이 크다.</p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/05/010-memory-cache-and-disk-cache/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android / Glide] 이미지 URL을 읽어 JPG 포맷파일로 변환하기</title>
      <link>https://dl137584.github.io/2022/02/05/011-convert-remote-url-to-jpg-file/</link>
      <guid>https://dl137584.github.io/2022/02/05/011-convert-remote-url-to-jpg-file/</guid>
      <pubDate>Sat, 05 Feb 2022 11:19:11 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;1-remote-url의-이미지를-비트맵-형식으로-가져온다&quot;&gt;&lt;a href=&quot;#1-remote-url의-이미지를-비트맵-형식으로-가져온다&quot; class=&quot;headerlink&quot; title=&quot;1. remote url의 이미지를 비트맵 형식으로</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-remote-url의-이미지를-비트맵-형식으로-가져온다"><a href="#1-remote-url의-이미지를-비트맵-형식으로-가져온다" class="headerlink" title="1. remote url의 이미지를 비트맵 형식으로 가져온다."></a>1. remote url의 이미지를 비트맵 형식으로 가져온다.</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">loadBitmapImage</span><span class="params">(context: Context, url: String?, listener: RequestListener&lt;Bitmap?&gt;?)</span> </span>&#123;</span><br><span class="line">    GlideApp.with(context)</span><br><span class="line">        .asBitmap()</span><br><span class="line">        .load(url)</span><br><span class="line">        .listener(listener)</span><br><span class="line">        .preload() <span class="comment">//submit()으로 하면 Activity destroy 시점에서 오류</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Glide를 사용해 listener를 통해 onResourceReady에서 비트맵 리소스를 받아 처리한다.</p><blockquote><p>Glide를 쓰지 않고 가령, 갤러리에 저장된 이미지를 가져와 3번으로 넘어갈 경우, imageView에 비트맵을 저장하게 되는데, 이때 Bitmap의 recycle state를 관리해줘야할 수 있다. (참고: <a href="https://dl137584.github.io/2022/02/01/004-the-way-bitmap-gc-in-glide/">Glide에서 비트맵 이미지가 GC되는 과정</a>)<br>이런 이유로 <a href="https://developer.android.com/topic/performance/graphics/manage-memory?hl=ko">Android Developer 공식 문서</a>에서는 <code>대부분의 경우 Glide 라이브러리를 사용하여 앱에서 비트맵을 가져오고 디코딩하고 표시하는 것을 추천</code>한다고 나와있다.</p></blockquote><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h1 id="2-비트맵을-JPG-포맷으로-압축-저장한다"><a href="#2-비트맵을-JPG-포맷으로-압축-저장한다" class="headerlink" title="2. 비트맵을 JPG 포맷으로 압축, 저장한다."></a>2. 비트맵을 JPG 포맷으로 압축, 저장한다.</h1><ul><li>Bitmap.compress <a href="https://developer.android.com/reference/android/graphics/Bitmap#compress(android.graphics.Bitmap.CompressFormat,%20int,%20java.io.OutputStream)">명세</a></li><li>참고 <a href="https://m.blog.naver.com/PostView.nhn?blogId=luku756&logNo=221214604097&proxyReferer=https://www.google.co.kr/">Bitmap 컨트롤하기</a></li></ul><p>이제 받아온 비트맵을 remoteTemp.jpg 라는 이름의 파일에 JPG 포맷으로 저장할 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mRemoteImageUri = Uri.fromFile(getReviewTempImageFile(context</span><br><span class="line">        , <span class="string">&quot;remoteTemp.jpg&quot;</span>));</span><br><span class="line">File bitmapFile = <span class="keyword">new</span> File(mRemoteImageUri.getPath());</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(bitmapFile);</span><br><span class="line">    bitmap.compress(Bitmap.CompressFormat.JPEG, <span class="number">100</span>, outputStream);</span><br><span class="line"></span><br><span class="line">    outputStream.flush();</span><br><span class="line">    outputStream.close();</span><br><span class="line"></span><br><span class="line">    setPickedImage(mRemoteImageUri);</span><br><span class="line">&#125;  <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>먼저 저장할 파일의 Uri를 만들었다. Uri를 생성하는 이유는 3번에서 파일의 사이즈를 얻어오기 위함이다. 자세히는 해당 번호 참조.</p><p>compress의 두 번째 인자값은 <a href="https://developer.android.com/reference/android/graphics/Bitmap.CompressFormat">CompressFormat</a>에 대한 압축률이며 0(minimum) ~ 100(maximum)으로 설정할 수 있다.</p><blockquote><p>bitmap.compress(CompressFormat.PNG, 0, filestream)<br>위와 같이 PNG로 압축하여 출력할 경우 두 번째 인자값은 무시한다. PNG 파일의 특성이 손실률 없는 포맷에 해당하기 때문이다.</p></blockquote><blockquote><p>위의 코드에서는 FileOutputStream 객체를 사용하여 JPG로 압축한 비트맵이 파일에 저장되었으나 이를 파일로 저장하지 않고 처리하려면 <a href="https://hello-bryan.tistory.com/69">ByteArrayOutputStream</a>를 사용할 수 있다.</p></blockquote><ul><li>코드 세부사항  파일에 저장하는 코드 상에서 사용한 getReviewTempImageFile 메소드는 아래와 같다.  여기서 ‣ 주의할 것.  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getReviewTempImageFile</span><span class="params">(Context context, String imageName)</span> </span>&#123;</span><br><span class="line">    String imgDirName = <span class="string">&quot;/TestDir&quot;</span>;</span><br><span class="line">    String dirPath = context.getExternalFilesDir(<span class="keyword">null</span>) + imgDirName;</span><br><span class="line">    File saveDir = <span class="keyword">new</span> File(dirPath);</span><br><span class="line">    <span class="keyword">if</span> (!saveDir.exists()) &#123;</span><br><span class="line">        saveDir.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String nomediaFilePath = dirPath + <span class="string">&quot;/.nomedia&quot;</span>;</span><br><span class="line">    File nomediaFile = <span class="keyword">new</span> File(nomediaFilePath);</span><br><span class="line">    <span class="keyword">if</span> (!nomediaFile.exists()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nomediaFile.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String filePath = dirPath + <span class="string">&quot;/&quot;</span> + imageName;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> File(filePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  getExternalFilesDir()을 사용하기 때문에 미리 WRITE_EXTERNAL_STORAGE 퍼미션 처리를 해주어야 한다. crop을 수행하는 Activity에 진입하기 전에 체크해주는 게 가장 좋다. 해당 퍼미션을 체크하는 코드는 다음과 같다.  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doImageSearch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (permissionCheck(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</span><br><span class="line">        <span class="comment">// start CropActivity</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mRequestPermission = Manifest.permission.WRITE_EXTERNAL_STORAGE;</span><br><span class="line">        requestPermission(<span class="keyword">this</span>, PermissionConstants.REQUEST_STORAGE_CODE, Manifest.permission.WRITE_EXTERNAL_STORAGE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">permissionCheck</span><span class="params">(Context context, String permission)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M</span><br><span class="line">        || (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M</span><br><span class="line">        &amp;&amp; ActivityCompat.checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">requestPermission</span><span class="params">(Context context, <span class="keyword">int</span> requestCode, String permission)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//shouldShowRequestPermissionRationale - 사용자가 권한 요청을 한번 거절 했을 경우 True</span></span><br><span class="line">    <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale((Activity) context, permission)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)</span><br><span class="line">                .setData(Uri.parse(<span class="string">&quot;package:&quot;</span> + context.getPackageName()));</span><br><span class="line">            ((Activity) context).startActivityForResult(intent, PermissionConstants.REQ_CODE_REQUEST_SETTING);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ActivityNotFoundException e) &#123;&#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 처음 권한 요청 및 다시 보지 않기를 선택하였을 경우 false</span></span><br><span class="line">        ActivityCompat.requestPermissions((Activity) context, <span class="keyword">new</span> String[]&#123;permission&#125;, requestCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-이미지-파일을-적절한-사이즈로-변경하여-재저장"><a href="#3-이미지-파일을-적절한-사이즈로-변경하여-재저장" class="headerlink" title="3. 이미지 파일을 적절한 사이즈로 변경하여 재저장"></a>3. 이미지 파일을 적절한 사이즈로 변경하여 재저장</h1><p>crop을 준비하기 위해서는 디바이스의 한 화면에 적절한 크기로 이미지를 노출해야한다. 위의 코드에서 setPickedImage 메소드가 이 기능을 담당한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPickedImage</span><span class="params">(<span class="meta">@Nullable</span> Uri rawBitmap)</span> </span>&#123;</span><br><span class="line">    mImageCaptureUri = Uri.fromFile(getReviewTempImageFile(context, <span class="string">&quot;originTemp.jpg&quot;</span>));</span><br><span class="line">    File bitmapFile = <span class="keyword">new</span> File(mImageCaptureUri.getPath());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Uri bitmapUri = mImageCaptureUri;</span><br><span class="line">        <span class="keyword">if</span>(rawBitmap != <span class="keyword">null</span>)</span><br><span class="line">            bitmapUri = rawBitmap;</span><br><span class="line"></span><br><span class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        options.inSampleSize = calculateBitmapSampleSize(<span class="keyword">this</span>, bitmapUri);</span><br><span class="line">        options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        InputStream is = getContentResolver().openInputStream(bitmapUri);</span><br><span class="line">        Bitmap bitmap = BitmapFactory.decodeStream(is, <span class="keyword">null</span>, options);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        String uriPath = getRealPathFromURI(context, bitmapUri);</span><br><span class="line">        <span class="keyword">if</span>(TextUtils.isEmpty(uriPath))</span><br><span class="line">            uriPath = bitmapUri.getPath();</span><br><span class="line">        ExifInterface exif = <span class="keyword">new</span> ExifInterface(uriPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> exifOrientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);</span><br><span class="line">        <span class="keyword">int</span> exifDegree = exifOrientationToDegrees(exifOrientation);</span><br><span class="line">        bitmap = rotate(bitmap, exifDegree);</span><br><span class="line">        FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(bitmapFile);</span><br><span class="line">        bitmap.compress(Bitmap.CompressFormat.JPEG, <span class="number">100</span>, outputStream);</span><br><span class="line"></span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        startCrop(bitmap);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mImageCaptureUri != <span class="keyword">null</span>)</span><br><span class="line">        deleteTempImageFile(mImageCaptureUri);</span><br><span class="line">    <span class="keyword">if</span>(mRemoteImageUri != <span class="keyword">null</span>)</span><br><span class="line">        deleteTempImageFile(mRemoteImageUri);</span><br><span class="line">    mCropImage.setImageBitmap(<span class="keyword">null</span>); <span class="comment">// clear bitmap in imageView</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.finish();</span><br><span class="line">    overridePendingTransition(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/05/011-convert-remote-url-to-jpg-file/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android / Glide] GlideApp 생성절차</title>
      <link>https://dl137584.github.io/2022/02/05/009-the-way-to-create-glideapp/</link>
      <guid>https://dl137584.github.io/2022/02/05/009-the-way-to-create-glideapp/</guid>
      <pubDate>Sat, 05 Feb 2022 04:01:33 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;아래 방식은 4.x.x 버전에서 유효하다. 3.x.x 버전의 Glide에서는 Manifest.xml에 meta-data를 추가하는 방식으로 진행된다.&lt;br&gt;참고) 3.x.x는 아래 링크가 더 도움이 될 것 같다. 3.x.x</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>아래 방식은 4.x.x 버전에서 유효하다. 3.x.x 버전의 Glide에서는 Manifest.xml에 meta-data를 추가하는 방식으로 진행된다.<br>참고) 3.x.x는 아래 링크가 더 도움이 될 것 같다. 3.x.x에서는 <code>AppGlideModule</code>이 아닌 <code>GlideModule</code>을 상속받는 클래스를 만들어야 한다.<br><a href="https://medium.com/@PaulinaSadowska/adding-headers-to-image-request-in-glide-dc9640ca9b12">https://medium.com/@PaulinaSadowska/adding-headers-to-image-request-in-glide-dc9640ca9b12</a></p></blockquote><h1 id="1-app-build-gradle에-dependencies-추가"><a href="#1-app-build-gradle에-dependencies-추가" class="headerlink" title="1. app/build.gradle에 dependencies 추가"></a>1. app/build.gradle에 dependencies 추가</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;kotlin-android&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;kotlin-kapt&#x27;</span></span><br><span class="line">...</span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    implementation <span class="string">&#x27;com.github.bumptech.glide:glide:4.11.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&quot;com.github.bumptech.glide:okhttp3-integration:4.11.0&quot;</span></span><br><span class="line">    kapt <span class="string">&#x27;com.github.bumptech.glide:compiler:4.11.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 코틀린을 쓰고 있다면, glide:compiler dependencies를 kapt로 추가해줘야한다.<br>이를 위해 선행작업으로 gradle.build의 최상단에 <code>kotlin-kapt</code> 도 필요하다.</p></blockquote><ul><li>glide:glide는 기본적으로 Glide 라이브러리를 사용하기 위해 추가됨.</li><li>okhttp3-integration는 CustomGlideModule에서 사용하기 위함.</li><li>glide:compiler는 GeneratedAppGlideModuleImpl를 생성하기 위함.<br>이후 proguard-rules.pro에서 GeneratedAppGlideModuleImpl를 keep 해주는데 이는 GlideApp을 사용하기 위해 CustomGlideModule과 같은 패키지(<code>net.common.utils.GlideApp</code>)에 만들어진다.(<em>4번 절차 참조</em>)</li></ul><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h1 id="2-UserAgentInterceptor-생성"><a href="#2-UserAgentInterceptor-생성" class="headerlink" title="2. UserAgentInterceptor 생성"></a>2. UserAgentInterceptor 생성</h1><ul><li>참조 문서  <a href="https://github.com/bumptech/glide/issues/3692">Using OkHttp Interceptor: Redundant User Agents · Issue #3692 · bumptech/glide</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Interceptor;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Request;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAgentInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserAgentInterceptor</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = chain.request()</span><br><span class="line">                .newBuilder()</span><br><span class="line">                .header(<span class="string">&quot;User-Agent&quot;</span>, getUserAgent(mContext))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> chain.proceed(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-CustomGlideModule-생성"><a href="#3-CustomGlideModule-생성" class="headerlink" title="3. CustomGlideModule 생성"></a>3. CustomGlideModule 생성</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.Glide;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.GlideBuilder;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.Registry;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.annotation.GlideModule;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.load.model.GlideUrl;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.<span class="keyword">module</span>.AppGlideModule;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.integration.okhttp3.OkHttpUrlLoader.Factory;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GlideModule</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomGlideModule</span> <span class="keyword">extends</span> <span class="title">AppGlideModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyOptions</span><span class="params">(<span class="meta">@NonNull</span> Context context,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> GlideBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 아무 것도 수정하지 않지만 오버라이드 해줘야함</span></span><br><span class="line">        <span class="keyword">super</span>.applyOptions(context, builder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerComponents</span><span class="params">(<span class="meta">@NonNull</span> Context context,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> Glide glide, <span class="meta">@NonNull</span> Registry registry)</span> </span>&#123;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">                .addInterceptor(<span class="keyword">new</span> UserAgentInterceptor(context))</span><br><span class="line">                .build();</span><br><span class="line">        registry.replace(GlideUrl.class, InputStream.class, <span class="keyword">new</span> Factory(client));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@GlideModule 어노테이션 선언 꼭 잊지 말 것.</li><li>3.x.x와는 다르게 AppGlideModule을 상속받아 커스텀 클래스를 만들어준다.</li><li>registerComponents에서 OkHttpClient를 통해 커스텀 인터셉터를 추가해준다.</li></ul><h2 id="AppGlideModule과-LibraryGlideModule"><a href="#AppGlideModule과-LibraryGlideModule" class="headerlink" title="AppGlideModule과 LibraryGlideModule"></a>AppGlideModule과 LibraryGlideModule</h2><p>AppGlideModule(을 상속받은 CustomAppGM)은 애플리케이션 단에, LibraryGlideModule(을 상속받은 ~ 생략)은 공통 라이브러리 단에 구현하면 된다.</p><p>이때 GlideModule을 커스텀할 경우, CustomAppGM의 구현은 필수적이나 CustomLibraryGM의 구현은 선택적이어서, CustomLibraryGM만 구현해선 안 된다.</p><p>그리고 공통 라이브러리에 정의한 모든 CustomLibraryGM은 CustomAppGM에서 통합적으로 추가된다.</p><h1 id="4-재빌드"><a href="#4-재빌드" class="headerlink" title="4. 재빌드"></a>4. 재빌드</h1><ul><li>참고 문서<ul><li><em>GeneratedAppGlideModuleImpl location</em></li></ul>  <a href="https://github.com/bumptech/glide/issues/2393">How to use Glide 4 generated API correctly both in app module and library module? · Issue #2393 · bumptech/glide</a>  <a href="https://github.com/bumptech/glide/issues/1945">cannot resolve symbol ‘GlideApp’ (GlideApp was not generated) · Issue #1945 · bumptech/glide</a></li></ul><p>3번까지 진행 후 재빌드(Build&gt;Make Project) 하자.</p><ul><li><code>app/build/generated/source/kapt/appDebug/com.bumptech.glide.GeneratedAppGlideModuleImpl</code></li><li><code>app/build/generated/source/kapt/appDebug/net.common.utils.GlideApp</code></li></ul><p>위와 같은 로케이션에 <code>GeneratedAppGlideModuleImpl</code>와 <code>GlideApp</code>이 생성되는 것을 확인할 수 있다. 이렇게 되면 이제 GlideApp을 사용할 준비가 된 것.</p><ul><li><p>GlideApp은 CustomGlideModule을 정의한 패키지 내에 만들어진다.</p></li><li><p>위의 두 파일이 만약 생성되지 않는다면</p><ul><li>build.gradle의 kapt를 확인할 것</li><li>@GlideModule 어노테이션 넣었는지 확인할 것</li></ul></li></ul><h1 id="5-app-proguard-rules-pro-편집"><a href="#5-app-proguard-rules-pro-편집" class="headerlink" title="5. app/proguard-rules.pro 편집"></a>5. app/proguard-rules.pro 편집</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-keep public class * extends com.bumptech.glide.module.AppGlideModule</span><br><span class="line">-keep class com.bumptech.glide.GeneratedAppGlideModuleImpl</span><br></pre></td></tr></table></figure><p>위와 같은 keep을 추가해줘야한다. </p><p>첫번째 라인(* extends AppGlideModule)은 CustomAppGlideModule을 위해서 쓰임.</p><p>두번째 라인(GeneratedAppGlideModuleImpl)은 빨간줄로 오류표시가 날 수 있는데, 4번에서 말한 것처럼 kapt로 추가된 의존성에 의해 빌드 후 생성되는 파일이라서이다. 빌드 후 generated에 생성되는 게 GeneratedAppGM과 GlideApp인 것으로 보아 GlideApp을 사용하기 위해서 쓰이는 걸로 보인다.</p><p>(참고로 app/proguard-rules.pro 파일에서 #으로 시작되는 라인은 주석에 해당함.)</p><h1 id="6-GlideApp-사용예"><a href="#6-GlideApp-사용예" class="headerlink" title="6. GlideApp 사용예"></a>6. GlideApp 사용예</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GlideApp.with(context)</span><br><span class="line">    .load(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    .apply(options)</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><p>GlideApp을 통해 이미지를 로드해야지만이 CustomGlideModule에서 정의한 설정을 따른다.</p><p>기본적으로 Glide와 사용에 지장이 있을 정도로 방식이 다르지 않다.</p><p>단, GlideApp은 Glide와는 다르게 일부 RequestOptions를 통해서만 호출할 수 있었던 속성들을 다이렉트로 컨트롤할 수 있게 된다. 이는 공식문서에서 일부 예제들을 통해 비교할 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/05/009-the-way-to-create-glideapp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android / Glide] Glide v4 적용</title>
      <link>https://dl137584.github.io/2022/02/05/008-glide-v4/</link>
      <guid>https://dl137584.github.io/2022/02/05/008-glide-v4/</guid>
      <pubDate>Sat, 05 Feb 2022 03:52:02 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;1-시작하기&quot;&gt;&lt;a href=&quot;#1-시작하기&quot; class=&quot;headerlink&quot; title=&quot;1. 시작하기&quot;&gt;&lt;/a&gt;1. 시작하기&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://bumptech.github.io/glide/</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-시작하기"><a href="#1-시작하기" class="headerlink" title="1. 시작하기"></a>1. 시작하기</h1><ul><li><em><a href="https://bumptech.github.io/glide/doc/configuration.html">Glide v4 공식 문서</a>(영어)</em></li><li><em>찰스의 안드로이드 - <a href="https://www.charlezz.com/wordpress/wp-content/uploads/2020/10/www.charlezz.com-glide-v4-glide-v4--by-charlezz.pdf">Glide v4</a> 한글 번역</em></li><li>*(주: 2016년 자료) 장범석님의 개발일지 - <a href="http://dktfrmaster.blogspot.com/2016/09/glide.html">Glide 사용법*</a> (feat. 메모리/디스크 캐시 설명)</li></ul><h2 id="안드로이드-SDK-요구사항"><a href="#안드로이드-SDK-요구사항" class="headerlink" title="안드로이드 SDK 요구사항"></a>안드로이드 SDK 요구사항</h2><ul><li>최소 SDK 버전 - Ice Cream Sandwich, 14 이상</li><li>컴파일 SDK 버전 - Oreo MR1, 27 이상</li></ul><h2 id="권한"><a href="#권한" class="headerlink" title="권한"></a>권한</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// Glide가 연결 상태를 감시하고 실패한 요청을 재시작하는 것을 허용</span></span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// ExternalPreferredCacheDiskCacheFactory를 사용하여 Glide의 캐시를 공개 sdcard에 저장하기 위해</span></span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h2 id="의존성"><a href="#의존성" class="headerlink" title="의존성"></a>의존성</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    kapt <span class="string">&#x27;com.github.bumptech.glide:glide:4.11.0&#x27;</span> <span class="comment">// 코틀린을 쓸 경우 kapt여야함.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em><a href="https://epro.tistory.com/236">dependencies의 implementation, api 차이점</a>에 관하여</em></li></ul><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h1 id="2-기본-형태"><a href="#2-기본-형태" class="headerlink" title="2. 기본 형태"></a>2. 기본 형태</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RequestOptions options = <span class="keyword">new</span> RequestOptions()</span><br><span class="line">.bitmapTransform(<span class="keyword">new</span> RoundedCorners(<span class="number">20</span>)) <span class="comment">//radius</span></span><br><span class="line">.placeholder(R.drawable.loading) <span class="comment">// 이미지 로딩 중</span></span><br><span class="line">.error(R.drawable.loading); <span class="comment">// 이미지를 불러오지 못할 경우</span></span><br><span class="line"></span><br><span class="line">Glide.with(context) <span class="comment">// RequestManager 형태로 반환</span></span><br><span class="line">    .load(<span class="string">&quot;url&quot;</span>) <span class="comment">// RequestBuilder&lt;Drawable&gt; 형태로 반환 (이하 apply, into 동일하게 반환)</span></span><br><span class="line">    .apply(options)</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><blockquote><p>ImageView의 setDrawableResource(resource)를 부르는 것으로 보임.</p></blockquote><ul><li>apply에 if문을 적용한 사례  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(<span class="keyword">this</span>)</span><br><span class="line">.load(url)</span><br><span class="line">.transition(DrawableTransitionOptions.withCrossFade(factory))</span><br><span class="line">.diskCacheStrategy(DiskCacheStrategy.ALL)</span><br><span class="line">.apply &#123;</span><br><span class="line"><span class="keyword">if</span> (corner = <span class="number">0</span>) transfoem(CenterInside(), RoundedCorners(corner.fromDpToPx()))</span><br><span class="line">&#125;</span><br><span class="line">.into(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-Glide-커스텀을-위한-GlideApp-사용을-위한-AppGlideModule"><a href="#3-Glide-커스텀을-위한-GlideApp-사용을-위한-AppGlideModule" class="headerlink" title="3. Glide 커스텀을 위한(=GlideApp 사용을 위한) AppGlideModule"></a>3. Glide 커스텀을 위한(=GlideApp 사용을 위한) AppGlideModule</h1><ul><li>관련 링크<ul><li>Glide 공식 API 문서 - <a href="https://bumptech.github.io/glide/javadocs/400/com/bumptech/glide/module/AppGlideModule.html">AppGildeModule API</a></li><li><a href="http://sunphiz.me/wp/archives/3546">Glide Builder 옵션 설명</a></li></ul></li></ul><h2 id="Header에-User-Agent-property-삽입"><a href="#Header에-User-Agent-property-삽입" class="headerlink" title="Header에 User-Agent property 삽입"></a>Header에 User-Agent property 삽입</h2><p><a href="https://dl137584.github.io/2022/02/05/009-the-way-to-create-glideapp/">GlideApp 생성절차</a> 링크를 따를 것.</p><h1 id="4-비트맵-관련-설정-RequestOptions"><a href="#4-비트맵-관련-설정-RequestOptions" class="headerlink" title="4. 비트맵 관련 설정 - RequestOptions"></a>4. 비트맵 관련 설정 - RequestOptions</h1><ul><li>Glide 공식 API 문서 - <a href="https://kofboy2000.github.io/glide-doc-kr/javadocs/400/com/bumptech/glide/request/RequestOptions.html#fallback-int-">RequestOptions API</a></li></ul><h2 id="1-주요-옵션"><a href="#1-주요-옵션" class="headerlink" title="(1) 주요 옵션"></a>(1) 주요 옵션</h2><ul><li>placeholder(resourceId): 이미지 로딩하는 중에 보여지는 대체 이미지.</li><li>error(resourceId): 이미지를 불러오지 못할 경우 대체 이미지.</li><li>skipMemoryCache(boolean): true 설정 시 캐시를 통하지 않고 이미지 로드.</li><li>override(int width, int height): target의 너비, 높이를 세팅. 이미지 리사이징.</li><li>centerCrop: <code>default type</code>. 외에 FitCenter, CircleCrop도 있음.</li></ul><blockquote><p> Glide에서 RequestOptions를 Glide.apply()했을 때와 안 했을 때의 이미지 transformation default 값이 다르다. <em>(아래 예시: v4 공식문서 발췌)</em></p><p>→ RequestOptions을 적용하지 않았을 경우 default 값<br>  Glide.with(context)<br>      .load(url)<br>      .<strong>fitCenter</strong>() // default<br>      .into(imageView);</p><p>→ RequestOptions을 적용 시 default 값<br>  Glide.with(context)<br>      .load(url)<br>      .apply(new RequestOptions().<strong>centerCrop</strong>())<br>      .into(imageView);</p></blockquote><p>→ xml에서 scaleType지정하면 그걸로 적용될 것 같은데, 만약 ImageView인데 scaleType을 지정하지 않았을 경우 AUIL와 Glide(RequestOptions적용한 것), Glide(RO 적용 안 한 것) 세 개의 작동이 다를 수 있음.</p><h2 id="2-참고-옵션"><a href="#2-참고-옵션" class="headerlink" title="(2) 참고 옵션"></a>(2) 참고 옵션</h2><ul><li>diskCacheStrategy: 디스크 캐시 전략. 이미지 로드에 사용할 캐시 설정  ALL - DATA와 RESOURCE를 사용하여 원격 데이터를 캐시하고 RESOURCE만 사용하여 로컬 데이터를 캐싱  AUTO - defualt value.  NONE - 디스크캐시 사용안함.</li><li>priority: 로드되는 이미지의 우선순위 결정  HIGH, IMMEDIATE, LOW, NORMAL</li><li>fallback: load할 url이 null일 경우 보여줄 대체 이미지. 이게 정의되어있지 않으면 error 이미지를, error 이미지도 없다면 placeholder 이미지로 대체됨.</li></ul><h2 id="3-예제-DisplayImageOptions와-대응되는-RequestOptions"><a href="#3-예제-DisplayImageOptions와-대응되는-RequestOptions" class="headerlink" title="(3) 예제. DisplayImageOptions와 대응되는 RequestOptions"></a>(3) 예제. DisplayImageOptions와 <strong>대응되는</strong> RequestOptions</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> DisplayImageOptions mPlaceHolderOption = <span class="keyword">new</span> DisplayImageOptions.Builder()</span><br><span class="line">        .resetViewBeforeLoading(<span class="keyword">true</span>)  <span class="comment">// default</span></span><br><span class="line">        .cacheInMemory(<span class="keyword">true</span>) <span class="comment">// default</span></span><br><span class="line">        .cacheOnDisk(<span class="keyword">true</span>) <span class="comment">// default</span></span><br><span class="line">        .imageScaleType(ImageScaleType.EXACTLY) <span class="comment">// default</span></span><br><span class="line">        .bitmapConfig(Bitmap.Config.RGB_565) <span class="comment">// default</span></span><br><span class="line">        .showImageOnLoading(R.drawable.ic_loading) <span class="comment">// loading place holder resource</span></span><br><span class="line">        .showImageOnFail(R.drawable.ic_loading) <span class="comment">// failed place holder resource</span></span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><ul><li>resetViewBeforeLoading(true)</li><li>cacheInMemory(true)  → RequestOptions.skipMemoryCache(false)</li><li>cacheOnDisk  → RequestOptions.diskCacheStrategy</li><li>imageScaleType.EXACTLY: 뷰 사이즈에 맞춰서 이미지가 작아짐.</li><li>bitmapConfig  → RequestOptions.format(DecodeFormat.PREFER_RGB_565)<pre><code>  RequestOptions.format(DecodeFormat.PREFER_ARGB_8888)</code></pre>  Glide’s default: RGB_565</li><li>showImageOnLoading / showImageOnFail  → RequestOptions.placeholder(drawable) / RequestOptions.error(drawable)</li></ul><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h1 id="5-Clear"><a href="#5-Clear" class="headerlink" title="5. Clear"></a>5. Clear</h1><h2 id="1-memory-캐시-삭제"><a href="#1-memory-캐시-삭제" class="headerlink" title="(1) memory 캐시 삭제"></a>(1) memory 캐시 삭제</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이 메소드는 메인 스레드에서 호출되어야 한다.</span></span><br><span class="line">Glide.get(context).clearMemory();</span><br></pre></td></tr></table></figure><p>Glide의 캐시 메모리 영역과 BitmapPool을 정리한다.</p><p>단, 모든 메모리를 삭제하는 것은 특히 효율적이지 않으며 버벅거림과 로드 시간 증가를 방지하기 위해 가능한 한 피해야 한다.</p><h2 id="2-disk-캐시-삭제"><a href="#2-disk-캐시-삭제" class="headerlink" title="(2) disk 캐시 삭제"></a>(2) disk 캐시 삭제</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> isMainThread = Looper.myLooper() == Looper.getMainLooper()</span><br><span class="line">just&lt;String&gt;(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  .subscribeOn(<span class="keyword">if</span> (isMainThread) Schedulers.io() <span class="keyword">else</span> Schedulers.immediate())</span><br><span class="line">  .subscribe &#123;</span><br><span class="line">    <span class="comment">// 이는 background 스레드에서 실행되어야 한다.</span></span><br><span class="line">    Glide.<span class="keyword">get</span>(<span class="keyword">this</span><span class="symbol">@SomethingActivity</span>).clearDiskCache()</span><br><span class="line">    Log.d(<span class="string">&quot;Deleted image memory cache and disk cache.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>디스크 캐시의 모든 항목을 지운다.</p><p>앱에서 실제로 테스트 해보니 캐시메모리의 디폴트 사이즈인 250MB를 채운 후 clearDiskCache()를 호출했을 때 변화는 다음과 같았다.</p><p>(Glide 외의 다른 캐시 데이터로 인해 왼쪽 before 사진에서는 250MB보다 약간 오버된 상태이다.)</p><p><img src="/2022/02/05/008-glide-v4/008-01.png"></p><h1 id="6-전환-Transitions"><a href="#6-전환-Transitions" class="headerlink" title="6. 전환 - Transitions"></a>6. 전환 - Transitions</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions.withCrossFade;</span><br><span class="line"></span><br><span class="line">Glide.with(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .transition(withCrossFade()) <span class="comment">// optional</span></span><br><span class="line">    .into(view);</span><br></pre></td></tr></table></figure><p><code>Glide v4 does NOT apply a cross fade or any other transition by default.</code></p><p>Glide v4 부터는 어떤 transitions 이벤트도 기본값으로 들어가있지 않으므로 필요할 떄 추가할 수 있다. (v3에서는 기본값이 cross fade였음)</p><h1 id="7-리스너-RequestListener"><a href="#7-리스너-RequestListener" class="headerlink" title="7. 리스너 - RequestListener"></a>7. 리스너 - RequestListener</h1><ul><li>Glide 공식 API 문서 -<a href="https://kofboy2000.github.io/glide-doc-kr/javadocs/400/com/bumptech/glide/request/RequestListener.html#fallback-int-">RequestListener API</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .listener(<span class="keyword">new</span> RequestListener&lt;Drawable&gt;() &#123; <span class="comment">// load() 다음에 추가할 것</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">onLoadFailed</span><span class="params">(<span class="meta">@Nullable</span> GlideException e, Object model,</span></span></span><br><span class="line"><span class="params"><span class="function">                Target&lt;Drawable&gt; target, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 여기서 GlideException 로그 출력</span></span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Load failed: &quot;</span> + e.printBlrBlr());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// Target에서 onLoadFailed가 호출되는 것을 허용한다.</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          resource: 로드된 이미지.</span></span><br><span class="line"><span class="comment">          model: 이미지를 로드하는 데 사용된 모델.</span></span><br><span class="line"><span class="comment">          dataSource: 이미지 출처. DATA_DISK_CACHE, LOCAL, MEMORY_CACHE, REMOTE와 같은 값.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">onResourceReady</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">                Drawable resource,</span></span></span><br><span class="line"><span class="params"><span class="function">                Object model,</span></span></span><br><span class="line"><span class="params"><span class="function">                Target&lt;Drawable&gt; target,</span></span></span><br><span class="line"><span class="params"><span class="function">                DataSource dataSource,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 성공 로그를 출력하거나 DataSource를 사용해 캐시적중을 추적할 수 있다.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// Target에서 onResourceReady가 호출되는 것을 허용한다.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><h2 id="만약-Bitmap으로-로딩된-이미지를-얻고자-한다면"><a href="#만약-Bitmap으로-로딩된-이미지를-얻고자-한다면" class="headerlink" title="만약 Bitmap으로 로딩된 이미지를 얻고자 한다면,"></a>만약 Bitmap으로 로딩된 이미지를 얻고자 한다면,</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Bitmap loadedImage = Glide.with(context)</span><br><span class="line">        .asBitmap()</span><br><span class="line">        .load(url)</span><br><span class="line">        .listener(<span class="keyword">new</span> RequestListener&lt;Bitmap&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLoadFailed</span><span class="params">(<span class="meta">@Nullable</span> GlideException e, Object o, </span></span></span><br><span class="line"><span class="params"><span class="function">                    Target&lt;Bitmap&gt; target, <span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onResourceReady</span><span class="params">(**Bitmap bitmap**, Object o, </span></span></span><br><span class="line"><span class="params"><span class="function">                    Target&lt;Bitmap&gt; target, DataSource dataSource, <span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">                image.setImage(ImageSource.bitmap(bitmap));</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .submit(<span class="number">100</span>, <span class="number">100</span>) <span class="comment">// width, height: RequestBuilder API 참조</span></span><br><span class="line">        .get();</span><br></pre></td></tr></table></figure><blockquote><p><strong>관련링크</strong></p><ul><li><a href="https://dl137584.github.io/2022/05/02/024-allow-the-different-scaletype-when-loading-image-in-glide/">Glide 이미지 로딩 중 다른 scaleType 적용하기</a></li></ul></blockquote>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Android/">Android</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/05/008-glide-v4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>기술 블로그 - 구글 검색엔진 최적화(SEO;Search Engine Optimization) 적용</title>
      <link>https://dl137584.github.io/2022/02/04/007-blog-apply-seo/</link>
      <guid>https://dl137584.github.io/2022/02/04/007-blog-apply-seo/</guid>
      <pubDate>Fri, 04 Feb 2022 13:30:30 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;이카루스에서 세팅하는 방법 - &lt;a href=&quot;https://alleyful.github.io/2019/08/10/tools/hexo/hexo-guide-03/&quot;&gt;링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;구 이카루스에서 ejs를 사용하다가</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>이카루스에서 세팅하는 방법 - <a href="https://alleyful.github.io/2019/08/10/tools/hexo/hexo-guide-03/">링크</a></li></ul><p>구 이카루스에서 ejs를 사용하다가 jsx로 바뀌어 위의 방법이 통하지 않았음.(<a href="https://aaronryu.github.io/2021/02/02/how-to-migrate-hexo-and-icarus-to-the-newest-version/">링크</a>)</p><p><a href="https://chinsun9.github.io/2020/09/23/%EB%82%B4-github-blog-%EA%B8%80%EC%9D%B4-%EA%B5%AC%EA%B8%80-%EA%B2%80%EC%83%89%EC%97%90-%EB%82%98%EC%98%A4%EB%8A%94-%EB%B2%95/#%ED%8C%81">링크</a>에 따르면 구버전에 비해 React를 사용해 만든 기존 이카루스에서는 표준링크를 자동으로 생성하기 때문에 <code>hexo-auto-canonical</code>를 따로 설치하지 않아도 된다.(그런데 설치해버려서 npm uninstall 로 삭제.)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-autonofollow</span><br><span class="line">npm i hexo-generator-feed</span><br><span class="line">npm i hexo-generator-seo-friendly-sitemap</span><br><span class="line">npm i hexo-generator-robotstxt</span><br></pre></td></tr></table></figure><p>결국 설치하는 건 위의 4개.</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="1-검색-엔진-등록-구글-서치-콘솔"><a href="#1-검색-엔진-등록-구글-서치-콘솔" class="headerlink" title="[1] 검색 엔진 등록: 구글 서치 콘솔"></a><strong>[1] 검색 엔진 등록: 구글 서치 콘솔</strong></h2><p>이 단락에서는 [사이트맵 생성]과 [색인 생성]방법을 알아볼 건데, 우선 규모가 작은 웹사이트의 경우 아래와 같이 <a href="https://developers.google.com/search/docs/advanced/sitemaps/overview?hl=ko">구글서치콘솔 가이드</a>에서 사이트맵이 필요하지 않을 수도 있다고 나와있다.</p><p><img src="/2022/02/04/007-blog-apply-seo/007-01.png"></p><p>나는 아래에도 나와있지만 사이트맵 생성에 오류가 있어 일단 사이트맵 대신 페이지마다 [색인 생성]을 하는 방법으로 각 페이지를 구글검색에 걸리도록 하였다. (현재 페이지가 4개 정도밖에 없음)</p><p>그렇다고 사이트맵을 생성하지 말아야하는 것은 아니다.</p><p><img src="/2022/02/04/007-blog-apply-seo/007-02.png"></p><h3 id="1-사이트맵-생성-아직도-안됨"><a href="#1-사이트맵-생성-아직도-안됨" class="headerlink" title="(1) 사이트맵 생성: 아직도 안됨"></a><strong>(1) 사이트맵 생성: 아직도 안됨</strong></h3><p><a href="https://search.google.com/search-console/welcome?utm_source=about-page">Google Search Console</a>에서 URL 접두어를 이용하여 도메인을 등록한다.</p><p><img src="/2022/02/04/007-blog-apply-seo/007-03.png"></p><p>[계속]을 눌렀을 때 나오는 파일을 다운로드하여 [프로젝트]/public/ 에 해당 파일을 옮겨 넣는다. 그리고 배포 후 조금 기다리면 아래와 같이 초록색이 뜬다.</p><p><img src="/2022/02/04/007-blog-apply-seo/007-04.png"></p><p>소유권이 확인되면 [속성으로 이동] 또는 왼쪽 위 URL 드롭다운을 클릭하여 Search Console을 이용할 수 있다.</p><p>지금은 검색 엔진을 사용하기 위해 사이트맵을 rss2.xml과 sitemap.xml을 등록해준다.</p><p><img src="/2022/02/04/007-blog-apply-seo/007-05.png"></p><ul><li>“가져올 수 없음”에 관한 <a href="https://julynine2.tistory.com/entry/Google-Search-Console-Sitemap-couldnt-fetch">포스팅</a></li></ul><p>그런데 “가져올 수 없음”이라고 실패/성공도 아닌 것이 뜬다. 사이트맵 입력 시 슬래시를 붙여서 “/sitemap.xml”으로 하면 잘 된다는 말이 있어서 해보았으나 다르지 않음. 아마 현재 설연휴라서 이게 처리가 늦어지는 것으로 보고 일단 보류하고 다른 방법을 찾아보았다.</p><h3 id="2-색인-생성-1-2일-소요"><a href="#2-색인-생성-1-2일-소요" class="headerlink" title="(2) 색인 생성: 1-2일 소요"></a><strong>(2) 색인 생성: 1-2일 소요</strong></h3><blockquote><p>주의 &gt; 색인 생성은 일일 할당량(10개 아래, 정확하지 않음)이 있어 이를 초과하면 더이상 색인 생성을 요청할 수 없다.</p></blockquote><p>색인 생성 방법은 다음과 같다.</p><p><img src="/2022/02/04/007-blog-apply-seo/007-06.png"></p><ul><li>참고: 구글 서치 콘솔에서 색인 생성하는 방법 <a href="https://julynine2.tistory.com/entry/%EA%B5%AC%EA%B8%80-%EC%84%9C%EC%B9%98-%EC%BD%98%EC%86%94Google-Search-Console%EC%97%90%EC%84%9C-%EC%83%89%EC%9D%B8-%EC%83%9D%EC%84%B1-%EC%9A%94%EC%B2%AD%ED%95%98%EA%B8%B0">링크</a></li></ul><p>상단 URL 검사란에 포스팅 주소(<a href="https://dl137584.github.io/2022/01/31/JCenter-%EC%A7%80%EC%9B%90%EC%A2%85%EB%A3%8C/">https://dl137584.github.io/2022/01/31/JCenter-지원종료/</a>)를 붙여넣고 아래 [색인 생성 요청]을 누른다.</p><p><img src="/2022/02/04/007-blog-apply-seo/007-07.png"></p><p>요청이 완료되면 아래와 같은 문구가 뜬다.</p><p><img src="/2022/02/04/007-blog-apply-seo/007-08.png"></p><p>기본적으로 1-2일 소요되긴 하나, 1. 구글검색창에 나와도 아래 [색인생성범위]에는 뜨지 않거나 2. 이틀이 지나도 구글검색창이나 [색인생성범위]에 리스팅되지 않아서 다시 URL 검사를 해보면 등록되어있지 않다고 나오는 등의 상황이 있었다.</p><p>1번의 경우 7일 이하로 기다리면 나타나거나 하는데 2번의 경우 나는 다시 색인생성을 요청하였다.(sitemap.xml이 계속 “가져올 수 없음”이 떴기 때문에 어쩔 수 없이…)</p><p>정상적으로 색인생성요청이 처리가 된 후에는 사이드바 [색인생성범위]에서 아래 [유효]를 클릭하면 초록색으로 변하면서 그래프에도 유효 카운트가 표시되고 그 아래에 상세정보가 뜬다.</p><p><img src="/2022/02/04/007-blog-apply-seo/007-09.png"></p><p><img src="/2022/02/04/007-blog-apply-seo/007-10.png" alt="유효 색인 상세정보"></p><p>색인을 생성한 url을 확인할 수 있으나 여기서 삭제는 할 수 없다.(해당 페이지는 내가 md 파일명을 변경하여 주소가 변경되었는데도 그대로 남아있다. 단, 이것도 7일 이하로 기다리면 [제외됨]으로 옮겨지면서 자동으로 갱신된다. [제외됨]으로 자동으로 옮겨질 경우 검색창에서도 검색되지 않는지는 해보지 않아 알 수 없음.)</p><p><img src="/2022/02/04/007-blog-apply-seo/007-11.png"></p><h3 id="3-색인-생성된-url-삭제-6시간-내로-됨"><a href="#3-색인-생성된-url-삭제-6시간-내로-됨" class="headerlink" title="(3) 색인 생성된 url 삭제: 6시간 내로 됨"></a><strong>(3) 색인 생성된 url 삭제: 6시간 내로 됨</strong></h3><p>url이 바뀌어 올렸던 것을 삭제해야 한다면 사이드바의 [삭제]로 이동한다.</p><p><img src="/2022/02/04/007-blog-apply-seo/007-12.png"></p><p>그리고[임시 삭제 항목]&gt;[새 요청]에서 삭제하고자하는 url을 기입하여 요청할 수 있다.</p><p><img src="/2022/02/04/007-blog-apply-seo/007-13.png" alt="1"></p><p><img src="/2022/02/04/007-blog-apply-seo/007-14.png" alt="2"></p><p><img src="/2022/02/04/007-blog-apply-seo/007-15.png" alt="3"></p><p>요청 처리가 완료되어 삭제되면 더이상 구글 검색창에서 관련 키워드를 입력해도 검색되지 않는다.</p>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Etc/">Etc</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/04/007-blog-apply-seo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>기술 블로그 만들기 - Github-pages, Hexo</title>
      <link>https://dl137584.github.io/2022/02/04/006-create-personal-blog-with-githubpages-and-hexo/</link>
      <guid>https://dl137584.github.io/2022/02/04/006-create-personal-blog-with-githubpages-and-hexo/</guid>
      <pubDate>Fri, 04 Feb 2022 13:04:27 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;1-노션을-사용하는-것에-대한-불편함&quot;&gt;&lt;a href=&quot;#1-노션을-사용하는-것에-대한-불편함&quot; class=&quot;headerlink&quot; title=&quot;1. 노션을 사용하는 것에 대한 불편함&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. 노션을 사용하는 것에 대한</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-노션을-사용하는-것에-대한-불편함"><a href="#1-노션을-사용하는-것에-대한-불편함" class="headerlink" title="1. 노션을 사용하는 것에 대한 불편함"></a><strong>1. 노션을 사용하는 것에 대한 불편함</strong></h1><ul><li>참고: <a href="https://www.cv-learn.com/20201124-Notion-blog-to-Github-blog/">링크</a></li></ul><h2 id="1-노션의-단점"><a href="#1-노션의-단점" class="headerlink" title="(1) 노션의 단점"></a><strong>(1) 노션의 단점</strong></h2><ul><li><p>읽기 어려운 URL + 제목을 수정하면 같이 변경되는 URL</p><p>  → 해보니 Hexo도 비슷한 이슈가 있음. 하지만 노션이 공유하기 어려운 것도 사실임.. 블로그로서 만들기가 어려움.</p></li><li><p>페이지 로딩이 느림</p><p>  → Hexo는 기본적으로 정적사이트를 생성해주기 때문에 이 부분은 해결이 됨.</p><p>  정적 웹사이트란, 서버에서 배포하기 전까지는 이미 올려진 데이터만을 보여주기 때문에 페이지 내에서 글 수정이 불가능하며 그렇기 때문에 가볍다는 장점이 있다. 페이지를 로드한 후에는 서버와 통신할 필요가 없으니까.</p></li></ul><p>덧붙여,</p><ul><li><p>목차를 한 눈에 볼 수 없음.</p><p>  → Hexo(이카루스 테마)로 해보니 목차(toc)를 노출시킬 수 있게됨. 사이드바에 노출하여 사이드바를 고정(sticky)시켜두니 정말 편해졌다.</p><p>  <img src="/2022/02/04/006-create-personal-blog-with-githubpages-and-hexo/006-01.png" alt="목차(toc)"></p></li><li><p>목차를 만들었을 때 그 목차 지점으로 가는 URL을 생성할 수 없음.</p><p>  → 목차(toc)를 노출시킬 경우 URL에 앵커(#)으로 어떤 제목으로 가는 링크가 제공됨.</p><p>  <a href="https://dl137584.github.io/2022/02/01/004-the-way-bitmap-gc-in-glide/#Glide%EB%8A%94-%EB%B9%84%ED%8A%B8%EB%A7%B5%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B3%A0-%EC%9E%88%EB%8A%94%EA%B0%80">https://dl137584.github.io/2022/02/01/004-the-way-bitmap-gc-in-glide/#Glide는-비트맵의-메모리를-어떻게-관리하고-있는가</a></p></li><li><p>방문자 통계를 내기 어려움.</p><p>  → Google Analytics 사용하여 통계낼 수 있게 됨.</p></li></ul><h2 id="2-대체-플랫폼"><a href="#2-대체-플랫폼" class="headerlink" title="(2) 대체 플랫폼"></a><strong>(2) 대체 플랫폼</strong></h2><ul><li><p>Notion + Cloudflare</p></li><li><p>Tistory</p></li><li><p>Velog</p></li><li><p>Github-pages</p><p>  → 내가 지금까지 해본 건 Tistory/Notion(오직 노션)/Github(레포지토리를 DB 삼아 md 파일 만듦. 사이트를 따로 생성하지 않음.)/Jekyll(페이지 껍데기만 만듦)/OneNote/EverNote 였다.</p><p>  그 중 고유한 Url을 생성할 수 있고 디자인을 코드단으로 만질 수 있는 Jekyll이 제일 재밌었는데 그래서 Github-pages를 사용하기로 함.</p><p>  단, Jekyll은 제외하고.(왠지 한 번 만들고 실패해서 손이 안 감.)</p></li></ul><h2 id="3-Github-pages-적용에-필요한-것"><a href="#3-Github-pages-적용에-필요한-것" class="headerlink" title="(3) Github-pages 적용에 필요한 것"></a><strong>(3) <a href="https://pages.github.com/">Github-pages</a> 적용에 필요한 것</strong></h2><ul><li>정적 사이트 생성기(Static Site Generator): <a href="https://hualiceov.github.io/">Jekyll</a>(ruby), Hugo(Go), Hexo(Node.js), Gatsby 등<ul><li>정적 웹 사이트 생성기: DB 통신 등을 해서 서버에서 HTML 페이지를 실시간으로 만들던 동적 사이트 방식이 아닌, 완성된 HTML 파일을 바로 전달.</li></ul></li></ul><p>고민은 길지 않았다. 서버 문외한인 내가 가장 많이 들어본 Node.js 기반 Hexo를 사용하기로 결정했다.</p><h2 id="4-Hexo-적용-후-불편했던-점"><a href="#4-Hexo-적용-후-불편했던-점" class="headerlink" title="(4) Hexo 적용 후 불편했던 점"></a><strong>(4) Hexo 적용 후 불편했던 점</strong></h2><p>하는 김에 hexo를 이용하면서 불편했던 점도 적어봄. 위에 나열된 노션의 단점은 모두 커버되었으나 일부 사용하기 어려운 점이 있었다.</p><ul><li><p>페이지를 업데이트하려면 코드를 수정해서 배포해야하기 때문에 바로 수정된 걸 볼 수 없다.(hexo에서 제공하는 draft 기능을 사용하는 데에도 동일한 문제있음)</p><p>  → 노션의 이용을 병행하여 draft(초안)은 노션에 작성하기로 함. (일단 나는 편해짐.)</p></li><li><p>여러 PC에서 배포를 할 수 있는 수월한 방법을 찾지 못함.</p><ul><li>방법(<a href="https://chinsun9.github.io/2020/09/18/%EC%97%AC%EB%9F%AC-%EC%BB%B4%ED%93%A8%ED%84%B0%EC%97%90%EC%84%9C-%EB%B8%94%EB%A1%9C%EA%B9%85%ED%95%98%EA%B8%B0/">링크</a>)은 찾았는데 기존 <code>.deploy_git</code>을 다른 PC에 동기화해줘야(동일하게 옮겨줘야) 하는 번거로움때문에 시도 안 하는 중..</li><li>Github에 올린 코드를 받아서 hexo-cli만 설치하여 올리려고 보니 hexo server 명령어가 기능을 잘 안 하고(기존 작업하던 PC OS는 윈도우, 새로 시도한 PC는 맥), 커밋 안 한 다른 PC에서 수정하던 게 마음에 걸려서 골치아파지더라.</li></ul></li><li><p>목차 생성 시 h1 아래에 h2가 아닌 h3으로 하위헤더를 바로 생성할 경우, 아래 이미지와 같이 일부가 생략된다.</p><p>  <img src="/2022/02/04/006-create-personal-blog-with-githubpages-and-hexo/006-03.png"></p></li></ul><h2 id="5-노션의-장점"><a href="#5-노션의-장점" class="headerlink" title="(5) 노션의 장점"></a><strong>(5) 노션의 장점</strong></h2><p>노션의 이용을 병행하려고 보니 장점을 빼놓을 수가 없다.</p><ul><li><p>접근성이 좋다. 웹, 앱 어디서든 편집할 수 있다.</p></li><li><p>동기화가 잘 된다. 엄청 잘 된다! 처음 노션을 고른 이유가 동기화였다.</p></li><li><p>편리한 단축키. ctrl + x로 한 행을 삭제하거나 슬래시(/)로 페이지를 만들 수 있게 하거나 여러가지로 잘 사용중.</p></li><li><p>편집이 편하고 예쁘다! (잘 쓰진 않지만 수정된 내용은 히스토리로 남아서 혹시모를 상황에 대비가 가능하다.)</p><ul><li>드래그앤드랍으로 행 옮기거나 블록처리 가능한 점.</li><li>어디서든 특정 부분을 하이라이트 하기 좋음. md는 코드 내에서는 볼드체가 불가능하거나 불편한 점이 있음. 이것도 따로 방법을 찾아봐야 할듯.</li><li>폰트가 읽기 좋음. md는 바꾸기 귀찮아서 디폴트로 사용중인데 영어는 거의 잘 나오는데 PC에서 한국어가 픽셀 깨지듯이(예민) 나옴.</li><li>헤더를 만들었을 때 딱 읽기 좋은 형태로(상하단 여백, 텍스트 강조) 노출됨. md는 가끔 h1 쓰는데도 읽으면서 가독성 떨어져서 일일이 bold 넣어줘야함.</li></ul></li></ul><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h1 id="2-Hexo-환경설정"><a href="#2-Hexo-환경설정" class="headerlink" title="2. Hexo 환경설정"></a><strong>2. Hexo 환경설정</strong></h1><ul><li>Hexo Guide <a href="https://hexo.io/ko/docs/">link</a></li></ul><h2 id="1-node-js-및-npm-버전-확인"><a href="#1-node-js-및-npm-버전-확인" class="headerlink" title="(1) node.js 및 npm 버전 확인"></a><strong>(1) node.js 및 npm 버전 확인</strong></h2><p>내 경우 <a href="https://www.notion.so/React-js-55af5c6144744069affde55518925452">React.js 시작하기</a> 에서 node.js와 npm이 설치된 상태여서 Hexo에 필요한 버전만 확인했다.</p><ul><li>Mac에서 node.js 및 npm설치  homebrew는 Mac에서 패키지 관리를 용이하게 하기 위한 툴이다. 이걸 먼저 설치.  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>  그리고 node.js를 설치하면 npm도 함께 설치되기 때문에 아래 명령어로 node.js를 설치.  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; node -v</span><br><span class="line">v14.15.5</span><br><span class="line">&gt; npm -v</span><br><span class="line">6.14.11</span><br></pre></td></tr></table></figure><p>Hexo를 사용하기 위해서는 node.js는 v12이상을 권하고 있다.(최소 v10.13)</p><h2 id="2-Hexo-설치"><a href="#2-Hexo-설치" class="headerlink" title="(2) Hexo 설치"></a><strong>(2) Hexo 설치</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="3-Hexo-초기화"><a href="#3-Hexo-초기화" class="headerlink" title="(3) Hexo 초기화"></a><strong>(3) Hexo 초기화</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; hexo init testBlog</span><br></pre></td></tr></table></figure><p>위 명령어로 초기화하면 아래와 같은 파일구조로 기본 설정파일들이 생성된다.</p><h2 id="4-파일구조"><a href="#4-파일구조" class="headerlink" title="(4) 파일구조"></a><strong>(4) 파일구조</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><ul><li>_config.yml: 환경설정(사이트 설정;웹사이트 제목, URL 설정, include 설정 등 가능)</li><li>package.json: 데이터 파일. EJS, Stylus, Markdown 렌더러들은 기본으로 설치됨.</li><li>scaffolds: 새 포스트/페이지를 생성했을 때 기본으로 만들어질 레이아웃을 정의.</li></ul><h2 id="5-명령어"><a href="#5-명령어" class="headerlink" title="(5) 명령어"></a><strong>(5) 명령어</strong></h2><ul><li>서버 실행: <code>hexo s</code> (server)</li><li>정적파일 생성: <code>hexo g</code> (generate, <code>public/</code>이 생성된다.) </li><li>배포: <code>hexo d</code> (deploy)</li><li>생성 및 배포: <code>hexo d -g</code> (hexo deploy -generate)</li><li>클린: <code>hexo clean</code> (<code>public/</code>이 삭제된다.)</li></ul><p>커맨드라인에서 hexo clean을 하게되면 마지막 INFO에 아래와 같이 뜨는 것을 볼 수 있다. 즉, DB와 public 폴더가 초기화된다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO  === Registering Hexo extensions ===</span><br><span class="line">INFO  Deleted database.</span><br><span class="line">INFO  Deleted public folder.</span><br></pre></td></tr></table></figure><h1 id="3-커스텀"><a href="#3-커스텀" class="headerlink" title="3. 커스텀"></a><strong>3. 커스텀</strong></h1><h2 id="1-사이드바"><a href="#1-사이드바" class="headerlink" title="(1) 사이드바"></a><strong>(1) 사이드바</strong></h2><p>_config.icarus.yml 편집</p><h1 id="4-포스팅-이카루스-테마-icarus-theme-사용"><a href="#4-포스팅-이카루스-테마-icarus-theme-사용" class="headerlink" title="4. 포스팅 - 이카루스 테마(icarus theme) 사용"></a><strong>4. 포스팅 - 이카루스 테마(icarus theme) 사용</strong></h1><ul><li>밍피디 <a href="https://mingpd.github.io/2019/04/14/github-blog-with-hexo-2/">링크</a></li></ul><h2 id="1-새-포스트-생성"><a href="#1-새-포스트-생성" class="headerlink" title="(1) 새 포스트 생성"></a><strong>(1) 새 포스트 생성</strong></h2><p>흔히 알고 있는 하나의 포스팅을 쓸 때 사용한다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;title&quot;</span><br></pre></td></tr></table></figure><h2 id="2-이미지-폴더-생성"><a href="#2-이미지-폴더-생성" class="headerlink" title="(2) 이미지 폴더 생성"></a><strong>(2) 이미지 폴더 생성</strong></h2><table><thead><tr><th></th><th>주의</th><th></th></tr></thead><tbody><tr><td></td><td>1. 파일명은 대소구분을 한다. “png”와 “PNG”는 다르다.</td><td></td></tr><tr><td></td><td>2. 아래 방법으로 하게되면 <code>hexo clean</code> 명령어 사용 시 <code>public/</code>아래의 파일은 날아가므로 여기에 파일을 넣지 않도록 할 것.</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><ol><li><p><code>_config.yml</code>에서 post_asset_folder 속성을 true로 바꾼다.</p></li><li><p>포스트 생성 시(<code>hexo new post</code>) 포스트의 제목과 같은 폴더가 자동으로 생성될텐데 여기에 이미지 파일을 넣는다.</p></li><li><p>이렇게 되면 <code>![](/2022/02/04/006-create-personal-blog-with-githubpages-and-hexo/006-02.png)</code>와 같이 접근할 수 있다.<br> 내 경우 <code>_config.yml</code>에서 permalink를 “:year/:month/:day/:title/“로 해두어 저렇게 나온다.</p></li></ol><table><thead><tr><th></th><th>주의</th><th></th></tr></thead><tbody><tr><td></td><td><code>![](./image01.png)</code>처럼 상대경로를 사용하게되면 포스팅을 클릭하여 나타난 페이지에서는 정상적으로 이미지가 노출되나 사이드메뉴의 카테고리 중 하나를 클릭했을 때 페이지에서 상대경로가 맞지 않아 이미지가 깨지게 된다.</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="3-새-페이지-생성"><a href="#3-새-페이지-생성" class="headerlink" title="(3) 새 페이지 생성"></a><strong>(3) 새 페이지 생성</strong></h2><p>페이지는 생성할 경우 해당 페이지명으로 된 폴더와 하위에 index.html 파일이 생성되며 포스트와 다르게 상단 탭에 연결할 수 있는 것으로 보임. 따라서 category와 tag는 사용할 수 없고 about처럼 상단에 추가할 수 있다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;page&quot;</span><br></pre></td></tr></table></figure><h2 id="4-Scaffolds-머리말-속성"><a href="#4-Scaffolds-머리말-속성" class="headerlink" title="(4) Scaffolds(머리말) 속성"></a><strong>(4) Scaffolds(머리말) 속성</strong></h2><p><img src="/2022/02/04/006-create-personal-blog-with-githubpages-and-hexo/006-02.png"></p><ul><li>title  대괄호가 잘 안 들어가서 이스케이프문자를 넣어야하나했는데 그냥 큰따옴표로 묶어서 해결해버림.</li><li>date  내가 지정해주지 않아도 자동으로 DB에 발행일이 들어가는가 보더라. 딱히 그럴 일이 없어서 이게 수정이 되는지는 확인 안해봄.</li><li>categories, tags  categories, tags는 여러개 지정할 수 있는데, 다음과 같이 두 가지 방법이 있다.  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - ctg1</span><br><span class="line">  - ctg2</span><br><span class="line">tags: [tag1, tag2]</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-toc-띄우기"><a href="#5-toc-띄우기" class="headerlink" title="(5) toc 띄우기"></a><strong>(5) toc 띄우기</strong></h2><p>이카루스 default 테마에서는 toc 속성이 false로 되어있는지 처음에는 나타나지 않으나 아래와 같이 true로 명시해주면 바로 [카탈로그]라고 뜬다. 사이드에 위치하는데 position 옵션에서 left/right를 지정할 수 있다.</p><p>창의 너비가 작아지면 우선적으로 보이는게 left라서 나는 left로 해두고 left sidebar의 sticky 옵션을 true로 바꾸었다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">toc: true</span><br><span class="line">widgets:</span><br><span class="line">-</span><br><span class="line">position: left</span><br><span class="line">type: toc</span><br><span class="line">index: true</span><br><span class="line">collapsed: true</span><br><span class="line">depth: 3</span><br></pre></td></tr></table></figure><h2 id="6-로컬-테스트"><a href="#6-로컬-테스트" class="headerlink" title="(6) 로컬 테스트"></a><strong>(6) 로컬 테스트</strong></h2><p><a href="http://localhost:4000/">http://localhost:4000/</a>에서 확인한다.</p><p>로컬 테스트는 배포 전 로컬의 파일 변경만으로 확인할 수 있는데, 아래 케이스에 해당한다.</p><ul><li>configuration이 변경된 경우<ul><li>서버를 내렸다가(<code>ctrl + C</code>) 다시 올려야(<code>hexo s</code>) 적용이 된다.</li></ul></li></ul><p>로컬에서 테스트가 끝나면 아래 명령어로 배포 후 1-2분 후 적용되었는지 <a href="https://dl137584.github.io/">https://dl137584.github.io/</a>에서 확인할 수 있다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h2 id="7-about-페이지-생성"><a href="#7-about-페이지-생성" class="headerlink" title="(7) about 페이지 생성"></a><strong>(7) about 페이지 생성</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>(public에 about 폴더를 만들고 별짓을 다했는데 그냥 new page하면 되는 거였어..)</p><p>page 명이 “about”인 이유는 <code>_config.icarus.yml</code>에서 navbar:menu:About에 설정한 이름을 따라간 것.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Page top navigation bar configurations</span></span><br><span class="line"><span class="attr">navbar:</span></span><br><span class="line">    <span class="comment"># Navigation menu items</span></span><br><span class="line">    <span class="attr">menu:</span></span><br><span class="line">        <span class="attr">Home:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">Archives:</span> <span class="string">/archives</span></span><br><span class="line">        <span class="comment"># Categories: /categories</span></span><br><span class="line">        <span class="comment"># Tags: /tags</span></span><br><span class="line">        <span class="attr">About:</span> <span class="string">/about</span></span><br></pre></td></tr></table></figure><h2 id="8-초안-작성"><a href="#8-초안-작성" class="headerlink" title="(8) 초안 작성"></a><strong>(8) 초안 작성</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft title</span><br></pre></td></tr></table></figure><p>이렇게 생성된 포스트는 <code>_posts/</code>가 아닌 <code>_draft/</code>에 위치하게 된다. 작성은 했는데 바로 배포하고 싶을 때 md 파일을 _draft 폴더로 옮기면 배포해도 포스팅이 노출되지 않기 때문에 편하게 쓸 수 있다.</p><p>만약 테스트 시 draft 파일도 보이도록 하고자한다면 서버를 올릴 때 –draft 옵션을 붙여주면 된다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure><h1 id="5-마크다운-활용"><a href="#5-마크다운-활용" class="headerlink" title="5. 마크다운 활용"></a><strong>5. 마크다운 활용</strong></h1><h2 id="노션의-callout-설명-구현"><a href="#노션의-callout-설명-구현" class="headerlink" title="노션의 callout(설명) 구현"></a><strong>노션의 callout(설명) 구현</strong></h2><p>인용과 차이를 두면서 노션의 callout UI와 같이 일부영역 강조를 편하게 사용하고 싶어서 마크다운의 테이블 구조를 활용하여 아래와 같이 만들었다. 인용 외에 참고사항 등에 사용할 예정이다.</p><table><thead><tr><th></th><th>Title</th><th></th></tr></thead><tbody><tr><td></td><td>Contents1</td><td></td></tr><tr><td></td><td>Contents2</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>좌우 여백은 위의 경우 제법 넓게 나타나는 편인데, 가운데 영역(Title, Content1, Content2)의 총 너비가 짧아서 그렇다. Title이나 Content의 길이가 길어질 경우 <a href="https://dl137584.github.io/2022/02/04/006-create-personal-blog-with-githubpages-and-hexo/#2-%EC%9D%B4%EB%AF%B8%EC%A7%80-%ED%8F%B4%EB%8D%94-%EC%83%9D%EC%84%B1">여기</a>에서 사용한 것처럼 여백이 줄어들게 된다.</p><p>마크다운 코드는 아래와 같이 사용하였다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　 | Title | 　</span><br><span class="line">--- | --- | ---</span><br><span class="line"> | Contents1 | </span><br><span class="line"> | Contents2 | </span><br><span class="line"> |  | </span><br></pre></td></tr></table></figure><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8868044834754772"     crossorigin="anonymous"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-8868044834754772"     data-ad-slot="1292114373"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content:encoded>
      
      
      <category domain="https://dl137584.github.io/categories/Etc/">Etc</category>
      
      
      
      <comments>https://dl137584.github.io/2022/02/04/006-create-personal-blog-with-githubpages-and-hexo/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
